{"uid":"c752f81b509253ed","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1758231644624,"stop":1758231644643,"duration":19},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f406c383bf0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f4066d09370>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f4066d09370>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1758231642315,"stop":1758231642315,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1758231642316,"stop":1758231642316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1758231642316,"stop":1758231642824,"duration":508},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1758231642316,"stop":1758231642316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1758231642316,"stop":1758231642316,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1758231642825,"stop":1758231642840,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1758231642840,"stop":1758231642841,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1758231642841,"stop":1758231642841,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1758231644233,"stop":1758231644299,"duration":66},"status":"passed","steps":[],"attachments":[{"uid":"3578935cce78d8dd","name":"Status Code: 200","source":"3578935cce78d8dd.txt","type":"text/plain","size":3},{"uid":"a69eeab53676d770","name":"Request URL","source":"a69eeab53676d770.uri","type":"text/uri-list","size":30},{"uid":"3f8f26c437b44a4","name":"Response Headers (JSON)","source":"3f8f26c437b44a4.json","type":"application/json","size":317},{"uid":"e23e438e7f2bac36","name":"Response Body (JSON)","source":"e23e438e7f2bac36.json","type":"application/json","size":224},{"uid":"3657d7e32f79acdf","name":"Status response code: 200 (Expected: 200)","source":"3657d7e32f79acdf.txt","type":"text/plain","size":3},{"uid":"3f8bbcd83ed95ffe","name":"Body of the answer (failed by AuthSuccessResponse)","source":"3f8bbcd83ed95ffe.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1758231644618,"stop":1758231644622,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1758231644622,"stop":1758231644622,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1758231644623,"stop":1758231644623,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f406c383bf0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f4066d09370>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f4066d09370>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1758231644624,"stop":1758231644642,"duration":18},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"668ddda7dbdd5912","name":"Status Code: 200","source":"668ddda7dbdd5912.txt","type":"text/plain","size":3},{"uid":"c7d8860962645b0a","name":"Request URL","source":"c7d8860962645b0a.uri","type":"text/uri-list","size":91},{"uid":"b79a57883d906415","name":"Response Headers (JSON)","source":"b79a57883d906415.json","type":"application/json","size":309},{"uid":"819ea0709be7b1a0","name":"Response Body (Text)","source":"819ea0709be7b1a0.txt","type":"text/plain","size":48},{"uid":"64cefccdff9360c7","name":"Status response code: 200 (Expected: 400)","source":"64cefccdff9360c7.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"748d4f705c0ab6a9","name":"log","source":"748d4f705c0ab6a9.txt","type":"text/plain","size":6703},{"uid":"b6fb0f320ec66746","name":"stderr","source":"b6fb0f320ec66746.txt","type":"text/plain","size":7688}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1758231644656,"stop":1758231644659,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1758231644676,"stop":1758231644679,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1758231644680,"stop":1758231644689,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Управление пользователем"},{"name":"story","value":"Удаление из избранного"},{"name":"severity","value":"normal"},{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"runnervmyfcvg"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"32e427c15aa5d5e6","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1758231644577,"stop":1758231644594,"duration":17}},{"uid":"b65e8af75dc9fbd1","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nPlanned Server Error","time":{"start":1758231644532,"stop":1758231644548,"duration":16}},{"uid":"e13dee76b7e1c0ef","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1758231644466,"stop":1758231644496,"duration":30}},{"uid":"92c3e58ebf0e5962","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1758231644375,"stop":1758231644423,"duration":48}},{"uid":"2c039a8debaec99a","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1e6f75ef-02cc-4827-a197-e1ea3e636e86\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1758231644307,"stop":1758231644333,"duration":26}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"9c06640e7dfbdd88","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/126//#testresult/9c06640e7dfbdd88","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-9f866307-e95e-4696-a593-69d9df8829c3\nBody of the answer:\nPlanned Server Error","time":{"start":1758231402766,"stop":1758231402791,"duration":25}},{"uid":"c4397ca465a3d01f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/125//#testresult/c4397ca465a3d01f","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-8f4e6af5-32c4-4116-a71c-0eaa6db722bd\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1758230436406,"stop":1758230436426,"duration":20}},{"uid":"f759af3dd92a64ae","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/124//#testresult/f759af3dd92a64ae","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-150dd8d2-ffae-4d08-a68f-91d9ee6e59a8\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755538570443,"stop":1755538570464,"duration":21}},{"uid":"7863c1794e2abf7c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/123//#testresult/7863c1794e2abf7c","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511587864,"stop":1755511587896,"duration":32}},{"uid":"c7d19f24ae87f5c6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/122//#testresult/c7d19f24ae87f5c6","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-07bd1eb2-4773-4971-967f-f75d555a9a74\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511257990,"stop":1755511258015,"duration":25}},{"uid":"ce6b9225b855b821","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/121//#testresult/ce6b9225b855b821","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-c86f2207-d0aa-43e6-bb87-7abf3e08e64a\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755508618486,"stop":1755508618505,"duration":19}},{"uid":"99120d2125bdedf9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/120//#testresult/99120d2125bdedf9","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-2f55325f-febd-49db-af43-1791fbc88114\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755508197000,"stop":1755508197024,"duration":24}},{"uid":"b25704b9a9011306","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/b25704b9a9011306","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755507569950,"stop":1755507569968,"duration":18}}]},"tags":["negative","user"]},"source":"c752f81b509253ed.json","parameterValues":[]}