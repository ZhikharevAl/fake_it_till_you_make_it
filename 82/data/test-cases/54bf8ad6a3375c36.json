{"uid":"54bf8ad6a3375c36","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1746054188857,"stop":1746054188901,"duration":44},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f4fbe692450>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f4fbe5576f0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f4fbe5576f0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746054185298,"stop":1746054185298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746054185299,"stop":1746054185299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746054185299,"stop":1746054185299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746054185299,"stop":1746054185299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746054185300,"stop":1746054185830,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746054185830,"stop":1746054185858,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746054185858,"stop":1746054185858,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746054185859,"stop":1746054185859,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746054188129,"stop":1746054188215,"duration":86},"status":"failed","statusMessage":"Failed: КРИТИЧЕСКАЯ ОШИБКА: He удалось выполнить сессионный логин для пользователя testUser4@test.com. Ошибка: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/app/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/fixtures.py\", line 898, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/app/tests/conftest.py\", line 109, in auth_token_fixture\n    pytest.fail(\n    ~~~~~~~~~~~^\n        f\"КРИТИЧЕСКАЯ ОШИБКА: He удалось выполнить сессионный логин для пользователя \"\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        f\"{TEST_USER_LOGIN}. Ошибка: {e}\",\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        pytrace=False,\n        ^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"5c917c09a565f804","name":"Status Code: 500","source":"5c917c09a565f804.txt","type":"text/plain","size":3},{"uid":"87e064372d8819b","name":"Request URL","source":"87e064372d8819b.uri","type":"text/uri-list","size":30},{"uid":"b08eac4901f5ad31","name":"Response Headers (JSON)","source":"b08eac4901f5ad31.json","type":"application/json","size":309},{"uid":"a817e97b7e8720c4","name":"Response Body (Text)","source":"a817e97b7e8720c4.txt","type":"text/plain","size":20},{"uid":"420efb26d4dcfd08","name":"Status response code: 500 (Expected: 200)","source":"420efb26d4dcfd08.txt","type":"text/plain","size":3}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},{"name":"auth_token","time":{"start":1746054188245,"stop":1746054188354,"duration":109},"status":"passed","steps":[],"attachments":[{"uid":"185f543103f334af","name":"Status Code: 200","source":"185f543103f334af.txt","type":"text/plain","size":3},{"uid":"a631090edbb743e9","name":"Request URL","source":"a631090edbb743e9.uri","type":"text/uri-list","size":30},{"uid":"32d31e3e32811729","name":"Response Headers (JSON)","source":"32d31e3e32811729.json","type":"application/json","size":317},{"uid":"a2fe4da3e410d246","name":"Response Body (JSON)","source":"a2fe4da3e410d246.json","type":"application/json","size":224},{"uid":"a396c065315938d0","name":"Status response code: 200 (Expected: 200)","source":"a396c065315938d0.txt","type":"text/plain","size":3},{"uid":"5f189266581afc62","name":"Body of the answer (failed by AuthSuccessResponse)","source":"5f189266581afc62.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746054188845,"stop":1746054188856,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746054188856,"stop":1746054188856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746054188856,"stop":1746054188856,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f4fbe692450>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f4fbe5576f0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f4fbe5576f0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1746054188857,"stop":1746054188901,"duration":44},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"66bcc56744238be5","name":"Status Code: 200","source":"66bcc56744238be5.txt","type":"text/plain","size":3},{"uid":"796132e1040dd9df","name":"Request URL","source":"796132e1040dd9df.uri","type":"text/uri-list","size":91},{"uid":"b3c8c320393fd873","name":"Response Headers (JSON)","source":"b3c8c320393fd873.json","type":"application/json","size":309},{"uid":"1203803b6cd4f7a8","name":"Response Body (Text)","source":"1203803b6cd4f7a8.txt","type":"text/plain","size":48},{"uid":"67322176c2404901","name":"Status response code: 200 (Expected: 400)","source":"67322176c2404901.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"787b8302cb204950","name":"log","source":"787b8302cb204950.txt","type":"text/plain","size":6311},{"uid":"88c96589d2bee4f8","name":"stderr","source":"88c96589d2bee4f8.txt","type":"text/plain","size":7275}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746054188914,"stop":1746054188923,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746054188926,"stop":1746054188935,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746054188936,"stop":1746054188943,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Удаление из избранного"},{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az661-654"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a00c12c37d6ccae8","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746054188751,"stop":1746054188814,"duration":63}},{"uid":"1d24acf130727d8b","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nPlanned Server Error","time":{"start":1746054188613,"stop":1746054188681,"duration":68}},{"uid":"3b19d14e08e20a8c","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746054188500,"stop":1746054188560,"duration":60}},{"uid":"30481ec9aaa8e059","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-84fc3c33-1e24-4cc0-9f77-814ab8fdd3d3\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746054188373,"stop":1746054188448,"duration":75}},{"uid":"ac094d81bd8cf37e","status":"failed","statusDetails":"Failed: КРИТИЧЕСКАЯ ОШИБКА: He удалось выполнить сессионный логин для пользователя testUser4@test.com. Ошибка: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1746054188127,"stop":1746054188127,"duration":0}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":12},"items":[{"uid":"62c08d16f4757522","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/81//#testresult/62c08d16f4757522","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-52fc88ee-b069-45fd-8f14-7f690872f3d3\nBody of the answer:\nPlanned Server Error","time":{"start":1745969593934,"stop":1745969593971,"duration":37}},{"uid":"80fe7b75e26e8b62","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/80//#testresult/80fe7b75e26e8b62","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5320d037-5906-4cab-8121-e9191a510b42\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745946047159,"stop":1745946047196,"duration":37}},{"uid":"5350cb1e40a062b9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/79//#testresult/5350cb1e40a062b9","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-a25e9cc2-44d3-4185-8af2-f32b23c0f530\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745348187111,"stop":1745348187153,"duration":42}},{"uid":"e945bd8e841da896","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/78//#testresult/e945bd8e841da896","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-7603a3c6-1c72-40db-8ca0-50878438944b\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745347898354,"stop":1745347898398,"duration":44}},{"uid":"effaa5516b450886","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/77//#testresult/effaa5516b450886","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-6ef0658e-0948-4c57-8401-68a8a18ccd20\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745347100179,"stop":1745347100221,"duration":42}},{"uid":"94d92b9c05bda46","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/76//#testresult/94d92b9c05bda46","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-cd992883-44c3-45d3-984f-0e427884f676\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745331970951,"stop":1745331970990,"duration":39}},{"uid":"a19c90fafeaec52d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/75//#testresult/a19c90fafeaec52d","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-7744cd9f-a9e0-4062-8a41-7a3549bbee96\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745298268094,"stop":1745298268135,"duration":41}},{"uid":"c231b5764ffd808f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/74//#testresult/c231b5764ffd808f","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-5421e5a8-93eb-4cca-82a6-addfeb92cb97\nBody of the answer:\nPlanned Server Error","time":{"start":1745297842223,"stop":1745297842263,"duration":40}},{"uid":"e9e24bc9f438e976","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/e9e24bc9f438e976","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-8a75c338-2935-4ce0-9a99-e6c453e88782\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745297611710,"stop":1745297611748,"duration":38}},{"uid":"1412be6db2e050f9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/1412be6db2e050f9","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-83600b8f-2092-4b38-af40-25a12189bec2\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745297412976,"stop":1745297413016,"duration":40}},{"uid":"af37cbf5dfe230c3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/af37cbf5dfe230c3","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-500ece8b-9e12-40ce-aae4-180d37bf7ee7\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745297306589,"stop":1745297306628,"duration":39}}]},"tags":["negative","user"]},"source":"54bf8ad6a3375c36.json","parameterValues":[]}