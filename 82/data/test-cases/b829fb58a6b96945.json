{"uid":"b829fb58a6b96945","name":"Тест успешного добавления запроса в избранное","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_add_to_favourites_success","historyId":"cbd3f6f5fb77de4b542b6f9736702f53","time":{"start":1746054188284,"stop":1746054188369,"duration":85},"description":"Проверяем добавление запроса в избранное и  появление в списке.","descriptionHtml":"<p>Проверяем добавление запроса в избранное и  появление в списке.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f7c4f407a80>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f7c4da38c30>\n\n    @allure.story(\"Добавление в избранное\")\n    @allure.title(\"Тест успешного добавления запроса в избранное\")\n    @allure.description(\"Проверяем добавление запроса в избранное и  появление в списке.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    @pytest.mark.dependency(name=\"add_favourite_success\")\n    def test_add_to_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного добавления запроса в избранное.\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение o успехе.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное добавление в избранное (POST /api/user/favourites), ID: %s\",\n            TEST_REQUEST_ID,\n        )\n    \n        payload = AddToFavouritesPayload(requestId=TEST_REQUEST_ID)\n>       response = authenticated_user_client.add_to_favourites(payload=payload, expected_status=200)  # type: ignore\n\ntests/user/test_user_favourites_api.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:63: in add_to_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f7c4da38c30>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746054185298,"stop":1746054185298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746054185298,"stop":1746054185298,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746054185299,"stop":1746054185299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746054185299,"stop":1746054185796,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746054185299,"stop":1746054185299,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746054185796,"stop":1746054185835,"duration":39},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746054185836,"stop":1746054185837,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746054185836,"stop":1746054185836,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746054187656,"stop":1746054187766,"duration":110},"status":"passed","steps":[],"attachments":[{"uid":"6d5a6ba027417826","name":"Status Code: 200","source":"6d5a6ba027417826.txt","type":"text/plain","size":3},{"uid":"dbf91737212dc9f2","name":"Request URL","source":"dbf91737212dc9f2.uri","type":"text/uri-list","size":30},{"uid":"7039a7784e923ca0","name":"Response Headers (JSON)","source":"7039a7784e923ca0.json","type":"application/json","size":317},{"uid":"6dfda67587950ff1","name":"Response Body (JSON)","source":"6dfda67587950ff1.json","type":"application/json","size":224},{"uid":"5ab03403fbdf6ae6","name":"Status response code: 200 (Expected: 200)","source":"5ab03403fbdf6ae6.txt","type":"text/plain","size":3},{"uid":"f9ca8a4c6fabfe6d","name":"Body of the answer (failed by AuthSuccessResponse)","source":"f9ca8a4c6fabfe6d.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746054188267,"stop":1746054188283,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746054188283,"stop":1746054188283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746054188283,"stop":1746054188283,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем добавление запроса в избранное и  появление в списке.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f7c4f407a80>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f7c4da38c30>\n\n    @allure.story(\"Добавление в избранное\")\n    @allure.title(\"Тест успешного добавления запроса в избранное\")\n    @allure.description(\"Проверяем добавление запроса в избранное и  появление в списке.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    @pytest.mark.dependency(name=\"add_favourite_success\")\n    def test_add_to_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного добавления запроса в избранное.\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение o успехе.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное добавление в избранное (POST /api/user/favourites), ID: %s\",\n            TEST_REQUEST_ID,\n        )\n    \n        payload = AddToFavouritesPayload(requestId=TEST_REQUEST_ID)\n>       response = authenticated_user_client.add_to_favourites(payload=payload, expected_status=200)  # type: ignore\n\ntests/user/test_user_favourites_api.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:63: in add_to_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f7c4da38c30>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Добавление запроса в избранное","time":{"start":1746054188285,"stop":1746054188368,"duration":83},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 63, in add_to_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"9ab0e2b0a1ba0908","name":"Status Code: 500","source":"9ab0e2b0a1ba0908.txt","type":"text/plain","size":3},{"uid":"785122d1b38d70f0","name":"Request URL","source":"785122d1b38d70f0.uri","type":"text/uri-list","size":41},{"uid":"f2c7bd79d1de9e2f","name":"Response Headers (JSON)","source":"f2c7bd79d1de9e2f.json","type":"application/json","size":309},{"uid":"6352789affcbe2ba","name":"Response Body (Text)","source":"6352789affcbe2ba.txt","type":"text/plain","size":20},{"uid":"e42f3a00184ff093","name":"Status response code: 500 (Expected: 200)","source":"e42f3a00184ff093.txt","type":"text/plain","size":3}],"parameters":[{"name":"payload","value":"AddToFavouritesPayload(request_id='request-id-1')"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f674d67649c5a99c","name":"log","source":"f674d67649c5a99c.txt","type":"text/plain","size":2732},{"uid":"53d1c0d71d1d0a7d","name":"stderr","source":"53d1c0d71d1d0a7d.txt","type":"text/plain","size":3183}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746054188389,"stop":1746054188408,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746054188748,"stop":1746054188756,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746054188757,"stop":1746054188766,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Добавление в избранное"},{"name":"tag","value":"dependency(name='add_favourite_success')"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az661-654"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["favourites","smoke","dependency(name='add_favourite_success')","positive","user"]},"source":"b829fb58a6b96945.json","parameterValues":[]}