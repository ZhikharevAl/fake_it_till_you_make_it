{"uid":"c7fa4997b88812c8","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1745290119014,"stop":1745290119062,"duration":48},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f8ee1fcd7f0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f8ee09c8c80>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f8ee09c8c80>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745290115202,"stop":1745290115202,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745290115203,"stop":1745290115203,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745290115204,"stop":1745290115647,"duration":443},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745290115204,"stop":1745290115204,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745290115204,"stop":1745290115204,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745290115647,"stop":1745290115673,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745290115673,"stop":1745290115674,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745290115674,"stop":1745290115674,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1745290117746,"stop":1745290117847,"duration":101},"status":"passed","steps":[],"attachments":[{"uid":"53d37a3ee143ecee","name":"Status Code: 200","source":"53d37a3ee143ecee.txt","type":"text/plain","size":3},{"uid":"b6e47acdd95a9e02","name":"Request URL","source":"b6e47acdd95a9e02.uri","type":"text/uri-list","size":30},{"uid":"c2272b36e7f4a83c","name":"Response Headers (JSON)","source":"c2272b36e7f4a83c.json","type":"application/json","size":317},{"uid":"c5b07a028b6530f6","name":"Response Body (JSON)","source":"c5b07a028b6530f6.json","type":"application/json","size":224},{"uid":"32bd8cb77e8eecbd","name":"Status response code: 200 (Expected: 200)","source":"32bd8cb77e8eecbd.txt","type":"text/plain","size":3},{"uid":"173ae987c048b011","name":"Body of the answer (failed by AuthSuccessResponse)","source":"173ae987c048b011.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1745290119004,"stop":1745290119013,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1745290119013,"stop":1745290119013,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1745290119013,"stop":1745290119013,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f8ee1fcd7f0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f8ee09c8c80>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f8ee09c8c80>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1745290119014,"stop":1745290119061,"duration":47},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"7f85795410208dbf","name":"Status Code: 200","source":"7f85795410208dbf.txt","type":"text/plain","size":3},{"uid":"ff4f3f57bfece6fd","name":"Request URL","source":"ff4f3f57bfece6fd.uri","type":"text/uri-list","size":91},{"uid":"e2506649ed17ccab","name":"Response Headers (JSON)","source":"e2506649ed17ccab.json","type":"application/json","size":309},{"uid":"bc77cc75707ef529","name":"Response Body (Text)","source":"bc77cc75707ef529.txt","type":"text/plain","size":48},{"uid":"2268ff0f74ae04db","name":"Status response code: 200 (Expected: 400)","source":"2268ff0f74ae04db.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a7ce582f980a2efa","name":"log","source":"a7ce582f980a2efa.txt","type":"text/plain","size":6412},{"uid":"60d6e924105af63d","name":"stderr","source":"60d6e924105af63d.txt","type":"text/plain","size":7355}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1745290119079,"stop":1745290119087,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1745290119089,"stop":1745290119097,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745290119098,"stop":1745290119107,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Управление пользователем"},{"name":"story","value":"Удаление из избранного"},{"name":"severity","value":"normal"},{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az1532-805"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"430654c981cb74b8","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nPlanned Server Error","time":{"start":1745290118936,"stop":1745290118975,"duration":39}},{"uid":"c77c0f6e7ca1fb42","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745290118860,"stop":1745290118898,"duration":38}},{"uid":"75b57a076e80cdd","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745290118783,"stop":1745290118822,"duration":39}},{"uid":"779ca1cd747481d6","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745290118690,"stop":1745290118736,"duration":46}},{"uid":"9e864921e8e5f4e4","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-5840cd09-98d3-4f9e-9bdb-063fa7decfbb\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745290118610,"stop":1745290118651,"duration":41}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","user"]},"source":"c7fa4997b88812c8.json","parameterValues":[]}