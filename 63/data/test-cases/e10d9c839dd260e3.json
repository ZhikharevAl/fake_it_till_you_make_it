{"uid":"e10d9c839dd260e3","name":"Тест получения деталей несуществующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_not_found","historyId":"26961aa1f740e62b43d9b1c13642c2bc","time":{"start":1745291451924,"stop":1745291451994,"duration":70},"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","descriptionHtml":"<p>Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7ff3a3dc08a0>\nrequest_client = <api.request.client.RequestClient object at 0x7ff3a3cca660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7ff3a3cca660>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c' status=500 status_text='Internal Server Error'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745291449404,"stop":1745291449405,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745291449405,"stop":1745291449405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745291449405,"stop":1745291449405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745291449406,"stop":1745291449843,"duration":437},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745291449406,"stop":1745291449406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745291449843,"stop":1745291449872,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745291449872,"stop":1745291449873,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745291451439,"stop":1745291451440,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7ff3a3dc08a0>\nrequest_client = <api.request.client.RequestClient object at 0x7ff3a3cca660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7ff3a3cca660>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c' status=500 status_text='Internal Server Error'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c'","time":{"start":1745291451924,"stop":1745291451993,"duration":69},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"5b28363a8fa85505","name":"Status Code: 500","source":"5b28363a8fa85505.txt","type":"text/plain","size":3},{"uid":"285013db73fe2bcd","name":"Request URL","source":"285013db73fe2bcd.uri","type":"text/uri-list","size":83},{"uid":"5c513c491aeea4a7","name":"Response Headers (JSON)","source":"5c513c491aeea4a7.json","type":"application/json","size":309},{"uid":"a2a86462bf99c2a3","name":"Response Body (Text)","source":"a2a86462bf99c2a3.txt","type":"text/plain","size":20},{"uid":"4ad562671acae909","name":"Status response code: 500 (Expected: 404)","source":"4ad562671acae909.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6b2aa0c6aa08eb54","name":"log","source":"6b2aa0c6aa08eb54.txt","type":"text/plain","size":4221},{"uid":"53e5468b80770ee9","name":"stderr","source":"53e5468b80770ee9.txt","type":"text/plain","size":4795}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745291453558,"stop":1745291453567,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745291453567,"stop":1745291453575,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"story","value":"Получение деталей"},{"name":"epic","value":"Запросы помощи"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az566-783"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"877818b20e42285c","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745291451829,"stop":1745291451884,"duration":55}},{"uid":"2682659c1340df6d","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745291451741,"stop":1745291451793,"duration":52}},{"uid":"30b18bd4620271f6","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745291451650,"stop":1745291451706,"duration":56}},{"uid":"b02a3b41843ab2a4","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745291451557,"stop":1745291451613,"duration":56}},{"uid":"2528337f02533f49","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c\nBody of the answer:\nPlanned Server Error","time":{"start":1745291451441,"stop":1745291451522,"duration":81}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"7419dbc90d9f93dc","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/62//#testresult/7419dbc90d9f93dc","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-86663c4b-75e7-47b2-aa1b-54ddefbf836a\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745290946275,"stop":1745290946328,"duration":53}}]},"tags":["request","negative"]},"source":"e10d9c839dd260e3.json","parameterValues":[]}