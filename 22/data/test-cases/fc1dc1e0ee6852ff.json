{"uid":"fc1dc1e0ee6852ff","name":"test_login_malformed_payload[empty_pass_str_xfail]","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"c5d232b72c5d2bbf6ebec03e56e18054","time":{"start":1744244023356,"stop":1744244023379,"duration":23},"description":"\nVerify API behavior with malformed payload.\n\nExpected result: status code 400 Bad Request.\n","descriptionHtml":"<p>Verify API behavior with malformed payload.</p>\n<p>Expected result: status code 400 Bad Request.</p>\n","status":"skipped","statusMessage":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7fe7626fbc50>\nauth_client = <api.auth.client.AuthClient object at 0x7fe7625363c0>\npayload_dict = {'login': 'testUser4@test.com', 'password': ''}\nexpected_status = 400, description = 'Empty string in the password field'\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"No password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"missing_password_xfail\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"No login field\",\n                id=\"missing_login_400\",\n            ),\n            pytest.param({}, 400, \"Empty request body\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Empty string in the login field\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Empty string in the password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"empty_pass_str_xfail\",\n            ),\n            pytest.param(\n                {\"login\": \"not email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Incorrect login format (not email)\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"bad_login_format_xfail\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Verify API behavior with malformed payload.\n    \n        Expected result: status code 400 Bad Request.\n        \"\"\"\n        logger.info(\"\\nTest: %s\", description)\n        response = auth_client.http.post(endpoint=auth_client.AUTH_ENDPOINT, json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Expected status {expected_status}, got {response.status}\"\n        )\nE       AssertionError: Expected status 400, got 500\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:131: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1744244022757,"stop":1744244022757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1744244022757,"stop":1744244022757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1744244022757,"stop":1744244022757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1744244022757,"stop":1744244022757,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1744244022758,"stop":1744244023016,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1744244023016,"stop":1744244023035,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1744244023036,"stop":1744244023036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1744244023036,"stop":1744244023036,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerify API behavior with malformed payload.\n\nExpected result: status code 400 Bad Request.\n","status":"skipped","statusMessage":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7fe7626fbc50>\nauth_client = <api.auth.client.AuthClient object at 0x7fe7625363c0>\npayload_dict = {'login': 'testUser4@test.com', 'password': ''}\nexpected_status = 400, description = 'Empty string in the password field'\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"No password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"missing_password_xfail\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"No login field\",\n                id=\"missing_login_400\",\n            ),\n            pytest.param({}, 400, \"Empty request body\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Empty string in the login field\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Empty string in the password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"empty_pass_str_xfail\",\n            ),\n            pytest.param(\n                {\"login\": \"not email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Incorrect login format (not email)\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"bad_login_format_xfail\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Verify API behavior with malformed payload.\n    \n        Expected result: status code 400 Bad Request.\n        \"\"\"\n        logger.info(\"\\nTest: %s\", description)\n        response = auth_client.http.post(endpoint=auth_client.AUTH_ENDPOINT, json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Expected status {expected_status}, got {response.status}\"\n        )\nE       AssertionError: Expected status 400, got 500\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:131: AssertionError","steps":[],"attachments":[{"uid":"f9954ebc732476d0","name":"API Response","source":"f9954ebc732476d0.txt","type":"text/plain","size":20},{"uid":"fb30e31d97d34e09","name":"Status Code","source":"fb30e31d97d34e09.txt","type":"text/plain","size":3},{"uid":"881cec5d02a6156c","name":"Headers","source":"881cec5d02a6156c.txt","type":"text/plain","size":309},{"uid":"6b4e0c643ae2c49a","name":"URL","source":"6b4e0c643ae2c49a.txt","type":"text/plain","size":30},{"uid":"bece2de4ac7543e7","name":"log","source":"bece2de4ac7543e7.txt","type":"text/plain","size":276},{"uid":"48dce9cacc0e37db","name":"stderr","source":"48dce9cacc0e37db.txt","type":"text/plain","size":208}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1744244023489,"stop":1744244023496,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1744244023497,"stop":1744244023504,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"negative"},{"name":"tag","value":"@pytest.mark.xfail(reason='API erratically returns 500 instead of 400', raises=<class 'AssertionError'>)"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az573-811"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Empty string in the password field'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'login': 'testUser4@test.com', 'password': ''}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":4,"passed":0,"unknown":0,"total":4},"items":[{"uid":"e5daa81ef12265a3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/21//#testresult/e5daa81ef12265a3","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744243579904,"stop":1744243579926,"duration":22}},{"uid":"113b70c192d1a4c0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/20//#testresult/113b70c192d1a4c0","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744243348505,"stop":1744243348528,"duration":23}},{"uid":"560e680b19d03576","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/19//#testresult/560e680b19d03576","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744242336578,"stop":1744242336600,"duration":22}}]},"tags":["@pytest.mark.xfail(reason='API erratically returns 500 instead of 400', raises=<class 'AssertionError'>)","negative","auth"]},"source":"fc1dc1e0ee6852ff.json","parameterValues":["'Empty string in the password field'","400","{'login': 'testUser4@test.com', 'password': ''}"]}