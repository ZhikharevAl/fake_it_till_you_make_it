{"uid":"ed85e8a88a9235d6","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1746482682127,"stop":1746482682162,"duration":35},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f8e9a74ca70>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f8e9a8075c0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f8e9a8075c0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746482680662,"stop":1746482680662,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746482680662,"stop":1746482680663,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746482680663,"stop":1746482680986,"duration":323},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746482680663,"stop":1746482680663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746482680663,"stop":1746482680663,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746482680986,"stop":1746482681008,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746482681008,"stop":1746482681009,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746482681009,"stop":1746482681009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746482681808,"stop":1746482681878,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"e8c646af558c9b52","name":"Status Code: 200","source":"e8c646af558c9b52.txt","type":"text/plain","size":3},{"uid":"cb5335d41d99610b","name":"Request URL","source":"cb5335d41d99610b.uri","type":"text/uri-list","size":30},{"uid":"210a76bab0af6f34","name":"Response Headers (JSON)","source":"210a76bab0af6f34.json","type":"application/json","size":317},{"uid":"18cf5b0af1db2d7b","name":"Response Body (JSON)","source":"18cf5b0af1db2d7b.json","type":"application/json","size":224},{"uid":"4d30de990193561f","name":"Status response code: 200 (Expected: 200)","source":"4d30de990193561f.txt","type":"text/plain","size":3},{"uid":"1d542bb76b4ae78a","name":"Body of the answer (failed by AuthSuccessResponse)","source":"1d542bb76b4ae78a.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746482682109,"stop":1746482682122,"duration":13},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746482682122,"stop":1746482682123,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746482682123,"stop":1746482682123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f8e9a74ca70>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f8e9a8075c0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f8e9a8075c0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1746482682128,"stop":1746482682161,"duration":33},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"ee46ea7ff0fb409e","name":"Status Code: 200","source":"ee46ea7ff0fb409e.txt","type":"text/plain","size":3},{"uid":"3a193aa9241f6a","name":"Request URL","source":"3a193aa9241f6a.uri","type":"text/uri-list","size":91},{"uid":"b4df0a1770aab1af","name":"Response Headers (JSON)","source":"b4df0a1770aab1af.json","type":"application/json","size":309},{"uid":"8f804e5c1c321deb","name":"Response Body (Text)","source":"8f804e5c1c321deb.txt","type":"text/plain","size":48},{"uid":"440aee886f3bd949","name":"Status response code: 200 (Expected: 400)","source":"440aee886f3bd949.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-9c5886e2-ce5b-4fd6-99d4-deb92b415b6c'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"109a5be5c52269e5","name":"log","source":"109a5be5c52269e5.txt","type":"text/plain","size":1042},{"uid":"f98317e4b2184c","name":"stderr","source":"f98317e4b2184c.txt","type":"text/plain","size":1193}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746482682176,"stop":1746482682183,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746482682339,"stop":1746482682346,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746482682347,"stop":1746482682356,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"epic","value":"Управление пользователем"},{"name":"story","value":"Удаление из избранного"},{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az2026-625"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"8c169e944077177","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/97//#testresult/8c169e944077177","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-0c38e5d7-398f-4029-b89a-31c1d6376928\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746481276073,"stop":1746481276112,"duration":39}},{"uid":"3611555f510e7d8d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/96//#testresult/3611555f510e7d8d","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-2570a3e8-f61e-494b-afa3-6629a139991c\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746479138652,"stop":1746479138693,"duration":41}},{"uid":"2d79be3171d7e108","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/95//#testresult/2d79be3171d7e108","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-7175dfd5-e291-4cf9-ab46-082571e2a1e8\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746478918601,"stop":1746478918633,"duration":32}},{"uid":"60daaef812a530d7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/94//#testresult/60daaef812a530d7","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-88f9dc84-64f3-4370-be14-f67aa33351e4\nBody of the answer:\nPlanned Server Error","time":{"start":1746398528051,"stop":1746398528116,"duration":65}},{"uid":"c63f5f64cbe60a2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/93//#testresult/c63f5f64cbe60a2","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-5f1f53bf-3651-47b9-92e0-48097b05b72b\nBody of the answer:\nPlanned Server Error","time":{"start":1746398347765,"stop":1746398347804,"duration":39}},{"uid":"1aae161aee193fd","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/92//#testresult/1aae161aee193fd","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d3e9320c-48c0-4279-8d11-88bf44fa62ca\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746398074244,"stop":1746398074282,"duration":38}},{"uid":"634af67c5b80f44","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/634af67c5b80f44","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-6036b52e-e56b-42cb-84ec-83f9261f4356\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746395044502,"stop":1746395044543,"duration":41}},{"uid":"acc8746b292e8a02","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/acc8746b292e8a02","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-cc78c951-81fd-4894-a49e-25333a55a136\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1746394513674,"stop":1746394513748,"duration":74}}]},"tags":["negative","user"]},"source":"ed85e8a88a9235d6.json","parameterValues":[]}