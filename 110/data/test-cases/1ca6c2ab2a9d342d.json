{"uid":"1ca6c2ab2a9d342d","name":"Тест получения списка избранного без аутентификации","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_get_favourites_unauthorized","historyId":"0d5ad1e4d58b7ecbade8401cb7cdc93e","time":{"start":1746737425088,"stop":1746737425158,"duration":70},"description":"Проверяем, что неавторизованный пользователь получает ошибку 403.","descriptionHtml":"<p>Проверяем, что неавторизованный пользователь получает ошибку 403.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7fa91adf8050>\nuser_client = <api.user.client.UserClient object at 0x7fa919549220>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест получения списка избранного без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 403.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_get_favourites_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка получения списка избранного без аутентификации.\n    \n        Ожидаемый результат: статус 403 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Получение избранного без авторизации (GET /api/user/favourites)\")\n>       response = user_client.get_favourites(expected_status=403)  # Swagger 401\n\ntests/user/test_user_favourites_api.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fa919549220>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 403, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746737421810,"stop":1746737421811,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746737421811,"stop":1746737421812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746737421811,"stop":1746737421811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746737421812,"stop":1746737421812,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746737421812,"stop":1746737422333,"duration":521},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746737422334,"stop":1746737422363,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746737422364,"stop":1746737422364,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_client","time":{"start":1746737425086,"stop":1746737425087,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что неавторизованный пользователь получает ошибку 403.","status":"failed","statusMessage":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7fa91adf8050>\nuser_client = <api.user.client.UserClient object at 0x7fa919549220>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест получения списка избранного без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 403.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_get_favourites_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка получения списка избранного без аутентификации.\n    \n        Ожидаемый результат: статус 403 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Получение избранного без авторизации (GET /api/user/favourites)\")\n>       response = user_client.get_favourites(expected_status=403)  # Swagger 401\n\ntests/user/test_user_favourites_api.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fa919549220>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 403, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"4ec1b760ec19eb12","name":"Status Code: 500","source":"4ec1b760ec19eb12.txt","type":"text/plain","size":3},{"uid":"ed6a27d2de9954bd","name":"Request URL","source":"ed6a27d2de9954bd.uri","type":"text/uri-list","size":41},{"uid":"f1c13ffd5c0a0963","name":"Response Headers (JSON)","source":"f1c13ffd5c0a0963.json","type":"application/json","size":309},{"uid":"7f8619617eb8d302","name":"Response Body (Text)","source":"7f8619617eb8d302.txt","type":"text/plain","size":20},{"uid":"a18dc8f7aa9647ca","name":"Status response code: 500 (Expected: 403)","source":"a18dc8f7aa9647ca.txt","type":"text/plain","size":3},{"uid":"3636a7ddbfe14cab","name":"log","source":"3636a7ddbfe14cab.txt","type":"text/plain","size":608},{"uid":"907b44fb2fcb4e7b","name":"stderr","source":"907b44fb2fcb4e7b.txt","type":"text/plain","size":717}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746737425249,"stop":1746737425266,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746737425267,"stop":1746737425281,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение списка избранного"},{"name":"severity","value":"critical"},{"name":"tag","value":"negative"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az525-333"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["negative","favourites","user"]},"source":"1ca6c2ab2a9d342d.json","parameterValues":[]}