{"uid":"c7f2a84e1497a897","name":"Тест успешной авторизации пользователя (c моком)","fullName":"tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked#test_login_success_mocked","historyId":"985b917ffc579a9a6e2c889807e3411f","time":{"start":1745946044292,"stop":1745946044364,"duration":72},"description":"Проверяем успешный ответ и валидацию токена при мокированном ответе API.","descriptionHtml":"<p>Проверяем успешный ответ и валидацию токена при мокированном ответе API.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked object at 0x7f538ccf4690>\nmocked_auth_client = <api.auth.client.AuthClient object at 0x7f538c825950>\n\n    @allure.story(\"Успешный вход (Мок)\")\n    @allure.title(\"Тест успешной авторизации пользователя (c моком)\")\n    @allure.description(\"Проверяем успешный ответ и валидацию токена при мокированном ответе API.\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success_mocked(self, mocked_auth_client: AuthClient) -> None:\n        \"\"\"Проверка успешного входа c мокированным ответом 200.\"\"\"\n        logger.info(\"Тест: Успешная авторизация (Мок)\")\n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = mocked_auth_client.login(payload=payload, expected_status=200)\n\ntests/auth/test_auth_api_mocked.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f538c825950>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745946043040,"stop":1745946043041,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745946043041,"stop":1745946043041,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745946043041,"stop":1745946043042,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745946043042,"stop":1745946043481,"duration":439},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745946043042,"stop":1745946043042,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mockable_browser_context","time":{"start":1745946043981,"stop":1745946044272,"duration":291},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_api_request_context","time":{"start":1745946044272,"stop":1745946044290,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_http_client","time":{"start":1745946044291,"stop":1745946044291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_auth_client","time":{"start":1745946044291,"stop":1745946044291,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем успешный ответ и валидацию токена при мокированном ответе API.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked object at 0x7f538ccf4690>\nmocked_auth_client = <api.auth.client.AuthClient object at 0x7f538c825950>\n\n    @allure.story(\"Успешный вход (Мок)\")\n    @allure.title(\"Тест успешной авторизации пользователя (c моком)\")\n    @allure.description(\"Проверяем успешный ответ и валидацию токена при мокированном ответе API.\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success_mocked(self, mocked_auth_client: AuthClient) -> None:\n        \"\"\"Проверка успешного входа c мокированным ответом 200.\"\"\"\n        logger.info(\"Тест: Успешная авторизация (Мок)\")\n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = mocked_auth_client.login(payload=payload, expected_status=200)\n\ntests/auth/test_auth_api_mocked.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f538c825950>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"89efa6a43d8689c0","name":"Status Code: 500","source":"89efa6a43d8689c0.txt","type":"text/plain","size":3},{"uid":"a504a322f40a2c83","name":"Request URL","source":"a504a322f40a2c83.uri","type":"text/uri-list","size":30},{"uid":"d00db9d830d49fba","name":"Response Headers (JSON)","source":"d00db9d830d49fba.json","type":"application/json","size":309},{"uid":"7f8ddb78fd7a8ed5","name":"Response Body (Text)","source":"7f8ddb78fd7a8ed5.txt","type":"text/plain","size":20},{"uid":"fd31d36c44cbec86","name":"Status response code: 500 (Expected: 200)","source":"fd31d36c44cbec86.txt","type":"text/plain","size":3},{"uid":"7734469458918dd1","name":"log","source":"7734469458918dd1.txt","type":"text/plain","size":1027},{"uid":"32392feb8e4c00b7","name":"stderr","source":"32392feb8e4c00b7.txt","type":"text/plain","size":1220}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"mocked_api_request_context::0","time":{"start":1745946044380,"stop":1745946044396,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mockable_browser_context::0","time":{"start":1745946044397,"stop":1745946044478,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745946046736,"stop":1745946046750,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Аутентификация (Моки)"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"blocker"},{"name":"story","value":"Успешный вход (Мок)"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"mocked"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api_mocked"},{"name":"subSuite","value":"TestAuthenticationAPIMocked"},{"name":"host","value":"fv-az658-601"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api_mocked"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["mocked","auth","smoke","positive"]},"source":"c7f2a84e1497a897.json","parameterValues":[]}