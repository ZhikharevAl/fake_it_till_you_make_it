{"uid":"98866d4c36b8a537","name":"Тест получения деталей несуществующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_not_found","historyId":"26961aa1f740e62b43d9b1c13642c2bc","time":{"start":1745946045599,"stop":1745946045653,"duration":54},"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","descriptionHtml":"<p>Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7efea0eb0b00>\nrequest_client = <api.request.client.RequestClient object at 0x7efea0d26660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7efea0d26660>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745946043040,"stop":1745946043040,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745946043041,"stop":1745946043042,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745946043042,"stop":1745946043042,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745946043043,"stop":1745946043043,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745946043043,"stop":1745946043481,"duration":438},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745946043481,"stop":1745946043509,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745946043509,"stop":1745946043510,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745946045111,"stop":1745946045112,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7efea0eb0b00>\nrequest_client = <api.request.client.RequestClient object at 0x7efea0d26660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7efea0d26660>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='non-existent-de2095d1-6999-463b-bce0-a506c79a9acb'","time":{"start":1745946045600,"stop":1745946045651,"duration":51},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"8576819c30c32b93","name":"Status Code: 403","source":"8576819c30c32b93.txt","type":"text/plain","size":3},{"uid":"7a8c6e708a6b3481","name":"Request URL","source":"7a8c6e708a6b3481.uri","type":"text/uri-list","size":83},{"uid":"31f03be6f61186e1","name":"Response Headers (JSON)","source":"31f03be6f61186e1.json","type":"application/json","size":316},{"uid":"bf34c01f09fa5c23","name":"Response Body (JSON)","source":"bf34c01f09fa5c23.json","type":"application/json","size":39},{"uid":"ad81bc620e9c51a2","name":"Status response code: 403 (Expected: 404)","source":"ad81bc620e9c51a2.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-de2095d1-6999-463b-bce0-a506c79a9acb'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"141ed5c2124bd7e","name":"log","source":"141ed5c2124bd7e.txt","type":"text/plain","size":4084},{"uid":"db0d40682cc4a70a","name":"stderr","source":"db0d40682cc4a70a.txt","type":"text/plain","size":4634}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745946047083,"stop":1745946047099,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745946047100,"stop":1745946047108,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Получение деталей"},{"name":"severity","value":"normal"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az658-601"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"941085692b85e721","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745946045512,"stop":1745946045565,"duration":53}},{"uid":"1e796f31de942305","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745946045424,"stop":1745946045476,"duration":52}},{"uid":"c6b7d4f81915ddaf","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745946045331,"stop":1745946045387,"duration":56}},{"uid":"5d0d4b12b2d9c516","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\nPlanned Server Error","time":{"start":1745946045228,"stop":1745946045297,"duration":69}},{"uid":"17a49a5b3d59292d","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-de2095d1-6999-463b-bce0-a506c79a9acb\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745946045113,"stop":1745946045190,"duration":77}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":10,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":10},"items":[{"uid":"e1f92d6ceb1cf24e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/79//#testresult/e1f92d6ceb1cf24e","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-af74a958-5a34-4cde-a3f1-48792af1694d\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745348185714,"stop":1745348185770,"duration":56}},{"uid":"857d4da42d688e62","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/78//#testresult/857d4da42d688e62","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-0894aef8-2d68-460d-9a8f-ac3a9eab90fb\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745347896976,"stop":1745347897032,"duration":56}},{"uid":"2bc6f50ca5475c62","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/77//#testresult/2bc6f50ca5475c62","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-6a189b8a-d1b7-4df9-8de5-90d0be2488a5\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745347098726,"stop":1745347098778,"duration":52}},{"uid":"cb278e10b8bd67d9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/76//#testresult/cb278e10b8bd67d9","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-5fe14ad4-e613-4044-8b75-1a784d474bb3\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745331969575,"stop":1745331969632,"duration":57}},{"uid":"de1a3abf27b1c321","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/75//#testresult/de1a3abf27b1c321","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-925ffe22-7183-4e88-a1d8-8942c6dc2492\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745298266896,"stop":1745298266949,"duration":53}},{"uid":"88e0d1169f7b5af2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/74//#testresult/88e0d1169f7b5af2","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-7a075503-9179-4979-aee3-2ed3fe51351d\nBody of the answer:\nPlanned Server Error","time":{"start":1745297840986,"stop":1745297841054,"duration":68}},{"uid":"e7c19da17e263354","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/e7c19da17e263354","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-ae045dcc-40f9-4f29-bb67-a452170db081\nBody of the answer:\nPlanned Server Error","time":{"start":1745297610347,"stop":1745297610417,"duration":70}},{"uid":"c30055958916e420","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/c30055958916e420","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-4113a334-32b8-4aac-a4eb-af49c85b1bc0\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297411510,"stop":1745297411562,"duration":52}},{"uid":"3bc1329e7ae44a04","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/3bc1329e7ae44a04","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-d6512de8-409f-40ec-85de-55315e7bd47b\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297305538,"stop":1745297305590,"duration":52}}]},"tags":["request","negative"]},"source":"98866d4c36b8a537.json","parameterValues":[]}