{"uid":"2bf826bf4b42ea8c","name":"Тест неуспешного входа: Пустая строка в поле login","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"b663cc8e346260d2bfa873bb5b822797","time":{"start":1745331967958,"stop":1745331968032,"duration":74},"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле login","descriptionHtml":"<p>Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле login</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f085bfac490>\nauth_client = <api.auth.client.AuthClient object at 0x7f085bd1c980>\npayload_dict = {'login': '', 'password': 'password4'}, expected_status = 400\ndescription = 'Пустая строка в поле login'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745331967015,"stop":1745331967015,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745331967016,"stop":1745331967016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745331967016,"stop":1745331967016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745331967016,"stop":1745331967016,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745331967017,"stop":1745331967443,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745331967444,"stop":1745331967472,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745331967473,"stop":1745331967473,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745331967473,"stop":1745331967474,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле login","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f085bfac490>\nauth_client = <api.auth.client.AuthClient object at 0x7f085bd1c980>\npayload_dict = {'login': '', 'password': 'password4'}, expected_status = 400\ndescription = 'Пустая строка в поле login'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","steps":[],"attachments":[{"uid":"a938615ab0b33121","name":"Status Code: 403","source":"a938615ab0b33121.txt","type":"text/plain","size":3},{"uid":"7276f96fb3d88bca","name":"Request URL","source":"7276f96fb3d88bca.uri","type":"text/uri-list","size":39},{"uid":"2cd443b352ca2304","name":"Response Headers (JSON)","source":"2cd443b352ca2304.json","type":"application/json","size":316},{"uid":"7b7ca3f242740723","name":"Response Body (JSON)","source":"7b7ca3f242740723.json","type":"application/json","size":39},{"uid":"e184cba6462db7eb","name":"log","source":"e184cba6462db7eb.txt","type":"text/plain","size":2157},{"uid":"dfe039905fb1b27d","name":"stderr","source":"dfe039905fb1b27d.txt","type":"text/plain","size":2620}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745331971019,"stop":1745331971034,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745331971035,"stop":1745331971045,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Аутентификация"},{"name":"story","value":"Неуспешный вход - Некорректное тело запроса"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az658-54"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Пустая строка в поле login'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'login': '', 'password': 'password4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"1b2d54369bc85c6b","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745331967836,"stop":1745331967932,"duration":96}},{"uid":"7adf43d4b7c2ff59","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745331967756,"stop":1745331967807,"duration":51}},{"uid":"f4d0546a9f89b623","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745331967677,"stop":1745331967728,"duration":51}},{"uid":"ec96d10bd3b5328d","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745331967590,"stop":1745331967645,"duration":55}},{"uid":"73d79876df744271","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745331967476,"stop":1745331967562,"duration":86}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"71fddbb96b0f90c7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/75//#testresult/71fddbb96b0f90c7","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745298265389,"stop":1745298265441,"duration":52}},{"uid":"a4f0c7101a67318b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/74//#testresult/a4f0c7101a67318b","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297839372,"stop":1745297839445,"duration":73}},{"uid":"5002d6933ee4b206","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/5002d6933ee4b206","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297608724,"stop":1745297608788,"duration":64}},{"uid":"1ee2fba64a368ac7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/1ee2fba64a368ac7","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297409972,"stop":1745297410030,"duration":58}},{"uid":"db091a483c8459a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/db091a483c8459a","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297303484,"stop":1745297303532,"duration":48}}]},"tags":["negative","auth"]},"source":"2bf826bf4b42ea8c.json","parameterValues":["'Пустая строка в поле login'","400","{'login': '', 'password': 'password4'}"]}