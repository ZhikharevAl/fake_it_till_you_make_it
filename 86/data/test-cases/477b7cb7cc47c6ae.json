{"uid":"477b7cb7cc47c6ae","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1746143190804,"stop":1746143190873,"duration":69},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fb069be3110>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fb068605910>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fb068605910>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746143187892,"stop":1746143187892,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746143187893,"stop":1746143187893,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746143187894,"stop":1746143187894,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746143187894,"stop":1746143188394,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746143187894,"stop":1746143187894,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746143188394,"stop":1746143188419,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746143188420,"stop":1746143188420,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746143188420,"stop":1746143188421,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746143190074,"stop":1746143190190,"duration":116},"status":"passed","steps":[],"attachments":[{"uid":"4b39ed698ad600cf","name":"Status Code: 200","source":"4b39ed698ad600cf.txt","type":"text/plain","size":3},{"uid":"dbb57e64daf6bc17","name":"Request URL","source":"dbb57e64daf6bc17.uri","type":"text/uri-list","size":30},{"uid":"ad8b47f1b69fd270","name":"Response Headers (JSON)","source":"ad8b47f1b69fd270.json","type":"application/json","size":317},{"uid":"8b59aeb0c79250f1","name":"Response Body (JSON)","source":"8b59aeb0c79250f1.json","type":"application/json","size":224},{"uid":"ecec63c29fd57034","name":"Status response code: 200 (Expected: 200)","source":"ecec63c29fd57034.txt","type":"text/plain","size":3},{"uid":"9b7232c13181ad50","name":"Body of the answer (failed by AuthSuccessResponse)","source":"9b7232c13181ad50.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746143190786,"stop":1746143190802,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746143190802,"stop":1746143190803,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746143190802,"stop":1746143190802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fb069be3110>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fb068605910>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fb068605910>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1746143190804,"stop":1746143190872,"duration":68},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"8e66834ff7f0c516","name":"Status Code: 500","source":"8e66834ff7f0c516.txt","type":"text/plain","size":3},{"uid":"4d12ec68924838bd","name":"Request URL","source":"4d12ec68924838bd.uri","type":"text/uri-list","size":30},{"uid":"de6abbf2318b0fc7","name":"Response Headers (JSON)","source":"de6abbf2318b0fc7.json","type":"application/json","size":309},{"uid":"f3f551adbc587751","name":"Response Body (Text)","source":"f3f551adbc587751.txt","type":"text/plain","size":20},{"uid":"f1e7247eb862266b","name":"Status response code: 500 (Expected: 200)","source":"f1e7247eb862266b.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1017184bb3ed686b","name":"log","source":"1017184bb3ed686b.txt","type":"text/plain","size":4674},{"uid":"cc057750eb7ea34c","name":"stderr","source":"cc057750eb7ea34c.txt","type":"text/plain","size":5539}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746143190895,"stop":1746143190911,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746143191160,"stop":1746143191175,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746143191176,"stop":1746143191187,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Управление пользователем"},{"name":"story","value":"Получение профиля"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az1778-850"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"68980695c0e674cc","status":"failed","statusDetails":"AssertionError: assert 'Национальный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный оптимизационный инженер","time":{"start":1746143190692,"stop":1746143190745,"duration":53}},{"uid":"7baaa6d7ba123121","status":"failed","statusDetails":"AssertionError: assert 'Национальный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный оптимизационный инженер","time":{"start":1746143190581,"stop":1746143190634,"duration":53}},{"uid":"9a47fa8e807780a2","status":"failed","statusDetails":"AssertionError: assert 'Национальный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный оптимизационный инженер","time":{"start":1746143190457,"stop":1746143190520,"duration":63}},{"uid":"e8328ce3433fb591","status":"failed","statusDetails":"AssertionError: assert 'Национальный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный оптимизационный инженер","time":{"start":1746143190338,"stop":1746143190395,"duration":57}},{"uid":"b2bb5199afe97901","status":"failed","statusDetails":"AssertionError: assert 'Национальный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный оптимизационный инженер","time":{"start":1746143190209,"stop":1746143190276,"duration":67}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":16,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":16},"items":[{"uid":"87eb5102f096b9aa","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/85//#testresult/87eb5102f096b9aa","status":"failed","statusDetails":"AssertionError: assert 'Национальный функциональный консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный функциональный консультант","time":{"start":1746142754099,"stop":1746142754156,"duration":57}},{"uid":"abccc8c1af54c240","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/84//#testresult/abccc8c1af54c240","status":"failed","statusDetails":"AssertionError: assert 'Региональный коммуникационный консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный коммуникационный консультант","time":{"start":1746055011984,"stop":1746055012037,"duration":53}},{"uid":"9b859f076b831b1d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/83//#testresult/9b859f076b831b1d","status":"failed","statusDetails":"AssertionError: assert 'Региональный интеграционный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный интеграционный инженер","time":{"start":1746054725453,"stop":1746054725511,"duration":58}},{"uid":"b39a79e484d9bedd","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/82//#testresult/b39a79e484d9bedd","status":"failed","statusDetails":"AssertionError: assert 'Региональный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный оптимизационный инженер","time":{"start":1746054188285,"stop":1746054188355,"duration":70}},{"uid":"b977d658b1918d9c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/81//#testresult/b977d658b1918d9c","status":"failed","statusDetails":"AssertionError: assert 'Областной функциональный координатор' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной функциональный координатор","time":{"start":1745969593460,"stop":1745969593497,"duration":37}},{"uid":"9248d95633c8713e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/80//#testresult/9248d95633c8713e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745946046411,"stop":1745946046494,"duration":83}},{"uid":"f59d31eab482a666","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/79//#testresult/f59d31eab482a666","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745348186595,"stop":1745348186685,"duration":90}},{"uid":"8be55955e1057c9c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/78//#testresult/8be55955e1057c9c","status":"failed","statusDetails":"AssertionError: assert 'Генеральный операционный консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный операционный консультант","time":{"start":1745347897814,"stop":1745347897852,"duration":38}},{"uid":"81e61276b31471df","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/77//#testresult/81e61276b31471df","status":"failed","statusDetails":"AssertionError: assert 'Главный страховой сотрудник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный страховой сотрудник","time":{"start":1745347099580,"stop":1745347099630,"duration":50}},{"uid":"d23c78e1bf06b6f1","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/76//#testresult/d23c78e1bf06b6f1","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745331970475,"stop":1745331970542,"duration":67}},{"uid":"6dea531e2a7da33d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/75//#testresult/6dea531e2a7da33d","status":"failed","statusDetails":"AssertionError: assert 'Главный функциональный агент' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный функциональный агент","time":{"start":1745298267734,"stop":1745298267785,"duration":51}},{"uid":"434f05ec38382ffd","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/74//#testresult/434f05ec38382ffd","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745297841838,"stop":1745297841905,"duration":67}},{"uid":"710d0ffa135f5754","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/710d0ffa135f5754","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745297611135,"stop":1745297611203,"duration":68}},{"uid":"3b3a720a3e20233c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/3b3a720a3e20233c","status":"failed","statusDetails":"AssertionError: assert 'Международный операционный сотрудник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Международный операционный сотрудник","time":{"start":1745297412319,"stop":1745297412378,"duration":59}},{"uid":"964edb21bb021e2c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/964edb21bb021e2c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745297305983,"stop":1745297306050,"duration":67}}]},"tags":["smoke","positive","user"]},"source":"477b7cb7cc47c6ae.json","parameterValues":[]}