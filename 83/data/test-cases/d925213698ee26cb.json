{"uid":"d925213698ee26cb","name":"Тест неуспешного входа: Неверный логин, корректный пароль","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_failure_invalid_credentials","historyId":"bb3a62b73431f40d69f43001789585f0","time":{"start":1746054723106,"stop":1746054723184,"duration":78},"description":"Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, корректный пароль","descriptionHtml":"<p>Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, корректный пароль</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f3ea1e40550>\nauth_client = <api.auth.client.AuthClient object at 0x7f3ea1c36510>\nlogin = 'nonexistent.user@example.com', password = 'password4'\nexpected_status = 400, description = 'Неверный логин, корректный пароль'\n\n    @allure.story(\"Неуспешный вход - Неверные учетные данные\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Корректный логин, неверный пароль\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Неверный логин, корректный пароль\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Неверный логин, неверный пароль\",\n                id=\"invalid_login_and_pass\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка неуспешной авторизации c неверными учетными данными.\n    \n        Ожидаемый результат: статус код 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при попытке входа c: {description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f3ea1c36510>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746054722338,"stop":1746054722339,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746054722339,"stop":1746054722339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746054722339,"stop":1746054722340,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746054722339,"stop":1746054722339,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746054722340,"stop":1746054722871,"duration":531},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746054722871,"stop":1746054722898,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746054722898,"stop":1746054722899,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746054722899,"stop":1746054722900,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, корректный пароль","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f3ea1e40550>\nauth_client = <api.auth.client.AuthClient object at 0x7f3ea1c36510>\nlogin = 'nonexistent.user@example.com', password = 'password4'\nexpected_status = 400, description = 'Неверный логин, корректный пароль'\n\n    @allure.story(\"Неуспешный вход - Неверные учетные данные\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Корректный логин, неверный пароль\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Неверный логин, корректный пароль\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Неверный логин, неверный пароль\",\n                id=\"invalid_login_and_pass\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка неуспешной авторизации c неверными учетными данными.\n    \n        Ожидаемый результат: статус код 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при попытке входа c: {description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f3ea1c36510>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"17afd06945152cee","name":"Status Code: 500","source":"17afd06945152cee.txt","type":"text/plain","size":3},{"uid":"86a840c1454289a9","name":"Request URL","source":"86a840c1454289a9.uri","type":"text/uri-list","size":30},{"uid":"6d98d1e4fa478bf5","name":"Response Headers (JSON)","source":"6d98d1e4fa478bf5.json","type":"application/json","size":309},{"uid":"64e14b6cb8f650b8","name":"Response Body (Text)","source":"64e14b6cb8f650b8.txt","type":"text/plain","size":20},{"uid":"9c2f501b4e58b495","name":"Status response code: 500 (Expected: 400)","source":"9c2f501b4e58b495.txt","type":"text/plain","size":3},{"uid":"d34c0ff1693b780b","name":"log","source":"d34c0ff1693b780b.txt","type":"text/plain","size":443},{"uid":"87a5866851beda46","name":"stderr","source":"87a5866851beda46.txt","type":"text/plain","size":531}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746054725593,"stop":1746054725609,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746054725610,"stop":1746054725621,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Неуспешный вход - Неверные учетные данные"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Аутентификация"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az523-139"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Неверный логин, корректный пароль'"},{"name":"expected_status","value":"400"},{"name":"login","value":"'nonexistent.user@example.com'"},{"name":"password","value":"'password4'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["negative","auth"]},"source":"d925213698ee26cb.json","parameterValues":["'Неверный логин, корректный пароль'","400","'nonexistent.user@example.com'","'password4'"]}