{"uid":"5e6efbf759636452","name":"Тест успешного внесения вклада в существующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_success","historyId":"669c54e9452a544e52cd8b6d124e1e96","time":{"start":1758232149659,"stop":1758232149694,"duration":35},"description":"Проверяем возможность внести вклад в существующий запрос.","descriptionHtml":"<p>Проверяем возможность внести вклад в существующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f68da3d29f0>\nrequest_client = <api.request.client.RequestClient object at 0x7f68d88aa3c0>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест успешного внесения вклада в существующий запрос\")\n    @allure.description(\"Проверяем возможность внести вклад в существующий запрос.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_contribute_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного внесения вклада (без тела запроса).\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное внесение вклада (POST /api/request/%s/contribution)\",\n            EXISTING_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f68d88aa3c0>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1/contribution' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1758232147984,"stop":1758232147985,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1758232147985,"stop":1758232147985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1758232147985,"stop":1758232147985,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1758232147987,"stop":1758232147987,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1758232147987,"stop":1758232148501,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1758232148502,"stop":1758232148518,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1758232148518,"stop":1758232148519,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1758232149126,"stop":1758232149126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем возможность внести вклад в существующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f68da3d29f0>\nrequest_client = <api.request.client.RequestClient object at 0x7f68d88aa3c0>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест успешного внесения вклада в существующий запрос\")\n    @allure.description(\"Проверяем возможность внести вклад в существующий запрос.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_contribute_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного внесения вклада (без тела запроса).\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное внесение вклада (POST /api/request/%s/contribution)\",\n            EXISTING_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f68d88aa3c0>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1/contribution' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='request-id-1'","time":{"start":1758232149660,"stop":1758232149693,"duration":33},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"958bc9bd71e6a9b8","name":"Status Code: 403","source":"958bc9bd71e6a9b8.txt","type":"text/plain","size":3},{"uid":"1fb022f569735d19","name":"Request URL","source":"1fb022f569735d19.uri","type":"text/uri-list","size":59},{"uid":"691d04170e3cb303","name":"Response Headers (JSON)","source":"691d04170e3cb303.json","type":"application/json","size":316},{"uid":"bc9c0ba26083468f","name":"Response Body (JSON)","source":"bc9c0ba26083468f.json","type":"application/json","size":39},{"uid":"b79f1c5e135a67e","name":"Status response code: 403 (Expected: 200)","source":"b79f1c5e135a67e.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'request-id-1'"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"1ab2d5990517431f","name":"log","source":"1ab2d5990517431f.txt","type":"text/plain","size":2504},{"uid":"72b604e81284f525","name":"stderr","source":"72b604e81284f525.txt","type":"text/plain","size":2925}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1758232150437,"stop":1758232150441,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1758232150442,"stop":1758232150450,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Внесение вклада"},{"name":"tag","value":"positive"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"runnervmyfcvg"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["request","positive"]},"source":"5e6efbf759636452.json","parameterValues":[]}