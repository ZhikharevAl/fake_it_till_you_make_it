{"uid":"7863c1794e2abf7c","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1755511587864,"stop":1755511587896,"duration":32},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f3f3e9d7d10>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f3f3d1d7890>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f3f3d1d7890>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755511585528,"stop":1755511585528,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755511585528,"stop":1755511585528,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755511585529,"stop":1755511585529,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755511585529,"stop":1755511585529,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755511585529,"stop":1755511586055,"duration":526},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755511586055,"stop":1755511586071,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755511586071,"stop":1755511586072,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1755511586072,"stop":1755511586073,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1755511587383,"stop":1755511587456,"duration":73},"status":"passed","steps":[],"attachments":[{"uid":"9b4caab7965d65c4","name":"Status Code: 200","source":"9b4caab7965d65c4.txt","type":"text/plain","size":3},{"uid":"10d0b0be11e371ef","name":"Request URL","source":"10d0b0be11e371ef.uri","type":"text/uri-list","size":30},{"uid":"4e3ff58c4038a016","name":"Response Headers (JSON)","source":"4e3ff58c4038a016.json","type":"application/json","size":317},{"uid":"cad62ccd41a4d8c","name":"Response Body (JSON)","source":"cad62ccd41a4d8c.json","type":"application/json","size":224},{"uid":"645a865cbfb34a4e","name":"Status response code: 200 (Expected: 200)","source":"645a865cbfb34a4e.txt","type":"text/plain","size":3},{"uid":"7518e1a250747259","name":"Body of the answer (failed by AuthSuccessResponse)","source":"7518e1a250747259.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1755511587855,"stop":1755511587862,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1755511587862,"stop":1755511587863,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1755511587862,"stop":1755511587862,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f3f3e9d7d10>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f3f3d1d7890>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f3f3d1d7890>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1755511587864,"stop":1755511587894,"duration":30},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"cb2d9e3921cf51ed","name":"Status Code: 200","source":"cb2d9e3921cf51ed.txt","type":"text/plain","size":3},{"uid":"5013a26af9045758","name":"Request URL","source":"5013a26af9045758.uri","type":"text/uri-list","size":91},{"uid":"e573d817465873c3","name":"Response Headers (JSON)","source":"e573d817465873c3.json","type":"application/json","size":309},{"uid":"f965df4b19421747","name":"Response Body (Text)","source":"f965df4b19421747.txt","type":"text/plain","size":48},{"uid":"d88eb8546fb3f4a0","name":"Status response code: 200 (Expected: 400)","source":"d88eb8546fb3f4a0.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"70fc0d3f0de22d6e","name":"log","source":"70fc0d3f0de22d6e.txt","type":"text/plain","size":6703},{"uid":"d2236163e98b4730","name":"stderr","source":"d2236163e98b4730.txt","type":"text/plain","size":7688}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1755511587916,"stop":1755511587922,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1755511587945,"stop":1755511587952,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755511587953,"stop":1755511587962,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Удаление из избранного"},{"name":"severity","value":"normal"},{"name":"epic","value":"Управление пользователем"},{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"898def68f9a6e1f5","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511587785,"stop":1755511587817,"duration":32}},{"uid":"7147b24d097ec4f5","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511587706,"stop":1755511587735,"duration":29}},{"uid":"a9efdd44b8f9887b","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511587613,"stop":1755511587655,"duration":42}},{"uid":"523cfcf4e38edee3","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511587545,"stop":1755511587574,"duration":29}},{"uid":"fab72be05e855107","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-1389eea3-7a59-43d0-b78a-ce58701555d9\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511587465,"stop":1755511587503,"duration":38}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"c7d19f24ae87f5c6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/122//#testresult/c7d19f24ae87f5c6","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-07bd1eb2-4773-4971-967f-f75d555a9a74\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755511257990,"stop":1755511258015,"duration":25}},{"uid":"ce6b9225b855b821","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/121//#testresult/ce6b9225b855b821","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-c86f2207-d0aa-43e6-bb87-7abf3e08e64a\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755508618486,"stop":1755508618505,"duration":19}},{"uid":"99120d2125bdedf9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/120//#testresult/99120d2125bdedf9","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-2f55325f-febd-49db-af43-1791fbc88114\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755508197000,"stop":1755508197024,"duration":24}},{"uid":"b25704b9a9011306","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/b25704b9a9011306","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755507569950,"stop":1755507569968,"duration":18}}]},"tags":["negative","user"]},"source":"7863c1794e2abf7c.json","parameterValues":[]}