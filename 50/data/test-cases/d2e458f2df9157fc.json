{"uid":"d2e458f2df9157fc","name":"Тест успешного получения списка избранного","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_get_favourites_success","historyId":"ffe87828fd4ec27492b9f047ec29073c","time":{"start":1745171169296,"stop":1745171169330,"duration":34},"description":"Проверяем получение списка избранного для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение списка избранного для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f0601fc4690>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f0600d82ea0>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест успешного получения списка избранного\")\n    @allure.description(\n        \"Проверяем получение списка избранного для аутентифицированного пользователя.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"Тест: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f0600d82ea0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745171167917,"stop":1745171167918,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745171167918,"stop":1745171168176,"duration":258},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745171167918,"stop":1745171167918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745171167918,"stop":1745171167918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745171167918,"stop":1745171167918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745171168177,"stop":1745171168197,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745171168198,"stop":1745171168198,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745171168198,"stop":1745171168199,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1745171168947,"stop":1745171169017,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"f1d487820725528","name":"Status Code: 200","source":"f1d487820725528.txt","type":"text/plain","size":3},{"uid":"1373f553e96ab0e6","name":"Request URL","source":"1373f553e96ab0e6.uri","type":"text/uri-list","size":30},{"uid":"48fc2ab5f1a3bd5c","name":"Response Headers (JSON)","source":"48fc2ab5f1a3bd5c.json","type":"application/json","size":317},{"uid":"d48fb82d2eebb640","name":"Response Body (JSON)","source":"d48fb82d2eebb640.json","type":"application/json","size":224},{"uid":"b512b179038be24d","name":"Status response code: 200 (Expected: 200)","source":"b512b179038be24d.txt","type":"text/plain","size":3},{"uid":"b08544c77ce5bed8","name":"Body of the answer (failed by AuthSuccessResponse)","source":"b08544c77ce5bed8.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1745171169287,"stop":1745171169295,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1745171169295,"stop":1745171169296,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1745171169295,"stop":1745171169295,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка избранного для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f0601fc4690>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f0600d82ea0>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест успешного получения списка избранного\")\n    @allure.description(\n        \"Проверяем получение списка избранного для аутентифицированного пользователя.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"Тест: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f0600d82ea0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"815d8fe08cf4f9f2","name":"Status Code: 500","source":"815d8fe08cf4f9f2.txt","type":"text/plain","size":3},{"uid":"506e3ecea58c65cf","name":"Request URL","source":"506e3ecea58c65cf.uri","type":"text/uri-list","size":41},{"uid":"874f7198409b010f","name":"Response Headers (JSON)","source":"874f7198409b010f.json","type":"application/json","size":309},{"uid":"2e13c9605cc312c5","name":"Response Body (Text)","source":"2e13c9605cc312c5.txt","type":"text/plain","size":20},{"uid":"d6ad7621c4dadbaa","name":"Status response code: 500 (Expected: 200)","source":"d6ad7621c4dadbaa.txt","type":"text/plain","size":3},{"uid":"b37b7c5adf7bf1f9","name":"log","source":"b37b7c5adf7bf1f9.txt","type":"text/plain","size":793},{"uid":"a2da0b1e007656ad","name":"stderr","source":"a2da0b1e007656ad.txt","type":"text/plain","size":923}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1745171169343,"stop":1745171169350,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1745171169436,"stop":1745171169442,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745171169443,"stop":1745171169451,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение списка избранного"},{"name":"severity","value":"normal"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az532-877"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":22,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":26},"items":[{"uid":"48c6ea8534ebd1b8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/49//#testresult/48c6ea8534ebd1b8","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745016104755,"stop":1745016104783,"duration":28}},{"uid":"2caec391f3a6ceca","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/48//#testresult/2caec391f3a6ceca","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745015892546,"stop":1745015892574,"duration":28}},{"uid":"9b03f7154de9cb33","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/47//#testresult/9b03f7154de9cb33","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745014810192,"stop":1745014810229,"duration":37}},{"uid":"888c5485e1fc54b8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/46//#testresult/888c5485e1fc54b8","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745014788294,"stop":1745014788321,"duration":27}},{"uid":"6d33203b2e3549fd","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/45//#testresult/6d33203b2e3549fd","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745013913161,"stop":1745013913189,"duration":28}},{"uid":"ad6c6b162b57745e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/ad6c6b162b57745e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745013767886,"stop":1745013767915,"duration":29}},{"uid":"9590b4408af7c2e7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/9590b4408af7c2e7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745007984464,"stop":1745007984493,"duration":29}},{"uid":"aca8837d02bbeec4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/aca8837d02bbeec4","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745007718318,"stop":1745007718346,"duration":28}},{"uid":"662906b95396fc23","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/662906b95396fc23","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745007087188,"stop":1745007087219,"duration":31}},{"uid":"6078bfc073a90712","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/6078bfc073a90712","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006983366,"stop":1745006983405,"duration":39}},{"uid":"4640a9d18a9e112b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/4640a9d18a9e112b","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006650678,"stop":1745006650706,"duration":28}},{"uid":"b6b2d31b08e087b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/b6b2d31b08e087b","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006448192,"stop":1745006448223,"duration":31}},{"uid":"547d1ae56a97a214","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/547d1ae56a97a214","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006158782,"stop":1745006158810,"duration":28}},{"uid":"4d568cb87c6755ed","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/4d568cb87c6755ed","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745005971851,"stop":1745005971880,"duration":29}},{"uid":"6d6e26d4d0e76892","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/6d6e26d4d0e76892","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745005663524,"stop":1745005663553,"duration":29}},{"uid":"9ede57671609f0cf","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/9ede57671609f0cf","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745005090341,"stop":1745005090373,"duration":32}},{"uid":"4af9d78a92ccb8b6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/4af9d78a92ccb8b6","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744923399479,"stop":1744923399509,"duration":30}},{"uid":"b2afcd12ceabc9d4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/b2afcd12ceabc9d4","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744850340598,"stop":1744850340628,"duration":30}},{"uid":"3f39bb98c1db6b4c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/3f39bb98c1db6b4c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744849900364,"stop":1744849900392,"duration":28}},{"uid":"b063684154cc6f34","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/29//#testresult/b063684154cc6f34","status":"passed","time":{"start":1744767142302,"stop":1744767142325,"duration":23}}]},"tags":["favourites","smoke","positive","user"]},"source":"d2e458f2df9157fc.json","parameterValues":[]}