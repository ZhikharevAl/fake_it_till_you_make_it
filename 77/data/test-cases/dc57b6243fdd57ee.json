{"uid":"dc57b6243fdd57ee","name":"Тест удаления из избранного без аутентификации","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_unauthorized","historyId":"1033939dd05afa312f53a1fdaa5c410d","time":{"start":1745347099412,"stop":1745347099480,"duration":68},"description":"Проверяем, что неавторизованный пользователь получает ошибку 401.","descriptionHtml":"<p>Проверяем, что неавторизованный пользователь получает ошибку 401.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user/favourites/any-id\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f5fc94b5220>\nuser_client = <api.user.client.UserClient object at 0x7f5fc9236900>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления из избранного без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 401.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления из избранного без аутентификации.\n    \n        Ожидаемый результат: статус 401 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Удаление из избранного без авторизации (DELETE ...)\")\n>       response = user_client.remove_from_favourites(request_id=\"any-id\", expected_status=401)  # type: ignore\n\ntests/user/test_user_api.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f5fc9236900>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/any-id' status=500 status_text='Internal Server Error'>\nexpected_status = 401, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user/favourites/any-id\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745347096131,"stop":1745347096132,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745347096132,"stop":1745347096132,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745347096133,"stop":1745347096133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745347096133,"stop":1745347096133,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745347096133,"stop":1745347096565,"duration":432},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745347096566,"stop":1745347096592,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745347096593,"stop":1745347096593,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_client","time":{"start":1745347099319,"stop":1745347099320,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что неавторизованный пользователь получает ошибку 401.","status":"failed","statusMessage":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user/favourites/any-id\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f5fc94b5220>\nuser_client = <api.user.client.UserClient object at 0x7f5fc9236900>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления из избранного без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 401.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления из избранного без аутентификации.\n    \n        Ожидаемый результат: статус 401 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Удаление из избранного без авторизации (DELETE ...)\")\n>       response = user_client.remove_from_favourites(request_id=\"any-id\", expected_status=401)  # type: ignore\n\ntests/user/test_user_api.py:136: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f5fc9236900>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/any-id' status=500 status_text='Internal Server Error'>\nexpected_status = 401, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user/favourites/any-id\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1745347099413,"stop":1745347099479,"duration":66},"status":"failed","statusMessage":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user/favourites/any-id\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"a09583b026f3a4b","name":"Status Code: 500","source":"a09583b026f3a4b.txt","type":"text/plain","size":3},{"uid":"a402728cc3b77342","name":"Request URL","source":"a402728cc3b77342.uri","type":"text/uri-list","size":48},{"uid":"a96b976eec442aa6","name":"Response Headers (JSON)","source":"a96b976eec442aa6.json","type":"application/json","size":309},{"uid":"a098eda51f5d67eb","name":"Response Body (Text)","source":"a098eda51f5d67eb.txt","type":"text/plain","size":20},{"uid":"70803fd05e42ece5","name":"Status response code: 500 (Expected: 401)","source":"70803fd05e42ece5.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'any-id'"},{"name":"expected_status","value":"401"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8c708f87fa966acd","name":"log","source":"8c708f87fa966acd.txt","type":"text/plain","size":1116},{"uid":"9e222a08fe62ea55","name":"stderr","source":"9e222a08fe62ea55.txt","type":"text/plain","size":1330}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745347100441,"stop":1745347100450,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745347100451,"stop":1745347100459,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"critical"},{"name":"story","value":"Удаление из избранного"},{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az2242-489"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["negative","user"]},"source":"dc57b6243fdd57ee.json","parameterValues":[]}