{"uid":"662906b95396fc23","name":"Тест успешного получения списка избранного","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_get_favourites_success","historyId":"ffe87828fd4ec27492b9f047ec29073c","time":{"start":1745007087188,"stop":1745007087219,"duration":31},"description":"Проверяем получение списка избранного для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение списка избранного для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f09e13cc690>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f09e0142ea0>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест успешного получения списка избранного\")\n    @allure.description(\n        \"Проверяем получение списка избранного для аутентифицированного пользователя.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"Тест: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f09e0142ea0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1745007085811,"stop":1745007085812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1745007085811,"stop":1745007085811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745007085811,"stop":1745007085811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745007085811,"stop":1745007085811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745007085812,"stop":1745007086071,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745007086071,"stop":1745007086091,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745007086091,"stop":1745007086092,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745007086092,"stop":1745007086092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1745007086840,"stop":1745007086911,"duration":71},"status":"passed","steps":[],"attachments":[{"uid":"f8a417532d086f5","name":"Status Code: 200","source":"f8a417532d086f5.txt","type":"text/plain","size":3},{"uid":"8542ca87223ed1e4","name":"Request URL","source":"8542ca87223ed1e4.uri","type":"text/uri-list","size":30},{"uid":"31c79b26e977339b","name":"Response Headers (JSON)","source":"31c79b26e977339b.json","type":"application/json","size":317},{"uid":"628b537e176f53d7","name":"Response Body (JSON)","source":"628b537e176f53d7.json","type":"application/json","size":224},{"uid":"f85e44dedefc0cda","name":"Status response code: 200 (Expected: 200)","source":"f85e44dedefc0cda.txt","type":"text/plain","size":3},{"uid":"54efa2b003997ddf","name":"Body of the answer (failed by AuthSuccessResponse)","source":"54efa2b003997ddf.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1745007087179,"stop":1745007087186,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1745007087187,"stop":1745007087187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1745007087187,"stop":1745007087187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка избранного для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f09e13cc690>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f09e0142ea0>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест успешного получения списка избранного\")\n    @allure.description(\n        \"Проверяем получение списка избранного для аутентифицированного пользователя.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"Тест: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f09e0142ea0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"76fa55117aecdaa2","name":"Status Code: 500","source":"76fa55117aecdaa2.txt","type":"text/plain","size":3},{"uid":"e2f322b5a73cd985","name":"Request URL","source":"e2f322b5a73cd985.uri","type":"text/uri-list","size":41},{"uid":"5bc0032ec08fbc9f","name":"Response Headers (JSON)","source":"5bc0032ec08fbc9f.json","type":"application/json","size":309},{"uid":"34b627cc217ef7d4","name":"Response Body (Text)","source":"34b627cc217ef7d4.txt","type":"text/plain","size":20},{"uid":"3b5ab02b0e84753b","name":"Status response code: 500 (Expected: 200)","source":"3b5ab02b0e84753b.txt","type":"text/plain","size":3},{"uid":"1dd0e5ecef36c82b","name":"log","source":"1dd0e5ecef36c82b.txt","type":"text/plain","size":793},{"uid":"e04f6c06c87aec65","name":"stderr","source":"e04f6c06c87aec65.txt","type":"text/plain","size":923}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1745007087236,"stop":1745007087244,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1745007087331,"stop":1745007087337,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745007087338,"stop":1745007087346,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Получение списка избранного"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az2028-992"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":4,"unknown":0,"total":17},"items":[{"uid":"6078bfc073a90712","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/6078bfc073a90712","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006983366,"stop":1745006983405,"duration":39}},{"uid":"4640a9d18a9e112b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/4640a9d18a9e112b","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006650678,"stop":1745006650706,"duration":28}},{"uid":"b6b2d31b08e087b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/b6b2d31b08e087b","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006448192,"stop":1745006448223,"duration":31}},{"uid":"547d1ae56a97a214","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/547d1ae56a97a214","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745006158782,"stop":1745006158810,"duration":28}},{"uid":"4d568cb87c6755ed","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/4d568cb87c6755ed","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745005971851,"stop":1745005971880,"duration":29}},{"uid":"6d6e26d4d0e76892","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/6d6e26d4d0e76892","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745005663524,"stop":1745005663553,"duration":29}},{"uid":"9ede57671609f0cf","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/9ede57671609f0cf","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1745005090341,"stop":1745005090373,"duration":32}},{"uid":"4af9d78a92ccb8b6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/4af9d78a92ccb8b6","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744923399479,"stop":1744923399509,"duration":30}},{"uid":"b2afcd12ceabc9d4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/b2afcd12ceabc9d4","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744850340598,"stop":1744850340628,"duration":30}},{"uid":"3f39bb98c1db6b4c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/3f39bb98c1db6b4c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744849900364,"stop":1744849900392,"duration":28}},{"uid":"b063684154cc6f34","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/29//#testresult/b063684154cc6f34","status":"passed","time":{"start":1744767142302,"stop":1744767142325,"duration":23}},{"uid":"b5604a65510842ca","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/28//#testresult/b5604a65510842ca","status":"passed","time":{"start":1744766716035,"stop":1744766716058,"duration":23}},{"uid":"3e9bfa52f92f21f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/27//#testresult/3e9bfa52f92f21f","status":"passed","time":{"start":1744662840828,"stop":1744662840854,"duration":26}},{"uid":"2273004ba03b47f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/26//#testresult/2273004ba03b47f","status":"passed","time":{"start":1744662222947,"stop":1744662222972,"duration":25}},{"uid":"9485f012479d933","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/25//#testresult/9485f012479d933","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744420061458,"stop":1744420061480,"duration":22}},{"uid":"f93c0031bcabc617","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/24//#testresult/f93c0031bcabc617","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744339367894,"stop":1744339367917,"duration":23}}]},"tags":["favourites","smoke","positive","user"]},"source":"662906b95396fc23.json","parameterValues":[]}