{"uid":"7c8211861f1e67ac","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1745007087122,"stop":1745007087154,"duration":32},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f09e13a0950>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f09e01429e0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f09e01429e0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1745007085811,"stop":1745007085812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1745007085811,"stop":1745007085811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745007085811,"stop":1745007085811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745007085811,"stop":1745007085811,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745007085812,"stop":1745007086071,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745007086071,"stop":1745007086091,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745007086091,"stop":1745007086092,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745007086092,"stop":1745007086092,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1745007086840,"stop":1745007086911,"duration":71},"status":"passed","steps":[],"attachments":[{"uid":"f8a417532d086f5","name":"Status Code: 200","source":"f8a417532d086f5.txt","type":"text/plain","size":3},{"uid":"8542ca87223ed1e4","name":"Request URL","source":"8542ca87223ed1e4.uri","type":"text/uri-list","size":30},{"uid":"31c79b26e977339b","name":"Response Headers (JSON)","source":"31c79b26e977339b.json","type":"application/json","size":317},{"uid":"628b537e176f53d7","name":"Response Body (JSON)","source":"628b537e176f53d7.json","type":"application/json","size":224},{"uid":"f85e44dedefc0cda","name":"Status response code: 200 (Expected: 200)","source":"f85e44dedefc0cda.txt","type":"text/plain","size":3},{"uid":"54efa2b003997ddf","name":"Body of the answer (failed by AuthSuccessResponse)","source":"54efa2b003997ddf.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1745007087112,"stop":1745007087120,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1745007087121,"stop":1745007087121,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1745007087121,"stop":1745007087121,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f09e13a0950>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f09e01429e0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f09e01429e0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1745007087122,"stop":1745007087153,"duration":31},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"69867a7dff604d85","name":"Status Code: 200","source":"69867a7dff604d85.txt","type":"text/plain","size":3},{"uid":"c88c3eee04aa7c70","name":"Request URL","source":"c88c3eee04aa7c70.uri","type":"text/uri-list","size":91},{"uid":"13d74f308b9730ec","name":"Response Headers (JSON)","source":"13d74f308b9730ec.json","type":"application/json","size":309},{"uid":"7cddc9ea6d12f9bb","name":"Response Body (Text)","source":"7cddc9ea6d12f9bb.txt","type":"text/plain","size":48},{"uid":"f4384978e0b79f84","name":"Status response code: 200 (Expected: 400)","source":"f4384978e0b79f84.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-ed09fe29-58a3-4f10-906b-680c2bc03786'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"9e59d497a4bee3b0","name":"log","source":"9e59d497a4bee3b0.txt","type":"text/plain","size":1042},{"uid":"da0ad49fd3a924bd","name":"stderr","source":"da0ad49fd3a924bd.txt","type":"text/plain","size":1193}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1745007087168,"stop":1745007087175,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1745007087331,"stop":1745007087337,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745007087338,"stop":1745007087346,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"epic","value":"Управление пользователем"},{"name":"story","value":"Удаление из избранного"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az2028-992"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":13,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":13},"items":[{"uid":"25430bfb90768789","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/25430bfb90768789","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-e610df47-01c6-4671-8d27-689065e8dfd6\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745006983301,"stop":1745006983332,"duration":31}},{"uid":"b869416bcaed342c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/b869416bcaed342c","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-8618fea1-718a-49f3-bc13-a0194df8e013\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745006650615,"stop":1745006650645,"duration":30}},{"uid":"36b257f58175e409","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/36b257f58175e409","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-646dc571-f280-4670-b2e4-2ba37a8be8a1\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745006448126,"stop":1745006448159,"duration":33}},{"uid":"2f2956914cc62139","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/2f2956914cc62139","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ada53b40-cada-46df-87c7-3a3d92b295fc\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745006158720,"stop":1745006158750,"duration":30}},{"uid":"f86a931e686022eb","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/f86a931e686022eb","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-a532d745-8d8b-4de0-a572-2e74b52824c5\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745005971785,"stop":1745005971817,"duration":32}},{"uid":"d37b8252833da72f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/d37b8252833da72f","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-e01049a4-ab6a-429c-968c-fb9fcb4defd3\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745005663462,"stop":1745005663493,"duration":31}},{"uid":"51746aaac8885143","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/51746aaac8885143","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-fe99c2ac-3ec3-4efc-9a4f-0a2522689f6c\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1745005090263,"stop":1745005090305,"duration":42}},{"uid":"ee2f1f74d9f40cfc","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/ee2f1f74d9f40cfc","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-565210e9-1c24-4a42-ba00-dfb4de97b270\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1744923399414,"stop":1744923399446,"duration":32}},{"uid":"15df50f941e245df","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/15df50f941e245df","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-7094aa47-140a-445a-b46b-b9ffe2e4239a\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1744850340532,"stop":1744850340564,"duration":32}},{"uid":"ccf77fd382de1e3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/ccf77fd382de1e3","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d6200f3a-610b-4cd9-a524-7982a0d48dbf\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1744849900300,"stop":1744849900331,"duration":31}},{"uid":"c787a71e360add0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/29//#testresult/c787a71e360add0","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-797c533c-a7e0-4620-8248-66145b39273d\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1744767142238,"stop":1744767142269,"duration":31}},{"uid":"defacd824c692e78","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/28//#testresult/defacd824c692e78","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-ac885117-a92c-4add-8f88-352d1364b095\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1744766715973,"stop":1744766716004,"duration":31}}]},"tags":["negative","user"]},"source":"7c8211861f1e67ac.json","parameterValues":[]}