{"uid":"715281da129993e2","name":"Тест успешной авторизации пользователя","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_success","historyId":"0c4581ef0847c2acc9fd7d6eed3bb190","time":{"start":1750872838984,"stop":1750872839042,"duration":58},"description":"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.","descriptionHtml":"<p>Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f427c9d85f0>\nauth_client = <api.auth.client.AuthClient object at 0x7f427c438980>\n\n    @allure.story(\"Успешный вход\")\n    @allure.title(\"Тест успешной авторизации пользователя\")\n    @allure.description(\n        \"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.\"\n    )\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success(self, auth_client: AuthClient) -> None:\n        \"\"\"\n        Убедитесь в успешной авторизации c помощью действительных учетных данных.\n    \n        Ожидаемый результат: статус 200 OK и действительный JWT-токен в ответе.\n        \"\"\"\n        logger.info(\"Тест: Успешная авторизация\")\n        if not TEST_USER_LOGIN or not TEST_USER_PASSWORD:\n            pytest.skip(\"Пропуск теста: Учетные данные тестового пользователя не настроены.\")\n    \n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = auth_client.login(payload=payload, expected_status=200)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/auth/test_auth_api.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f427c438980>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1750872837457,"stop":1750872837458,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1750872837458,"stop":1750872837458,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1750872837459,"stop":1750872837459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1750872837459,"stop":1750872837958,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1750872837459,"stop":1750872837459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1750872837958,"stop":1750872837984,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1750872837984,"stop":1750872837984,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1750872837984,"stop":1750872837985,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f427c9d85f0>\nauth_client = <api.auth.client.AuthClient object at 0x7f427c438980>\n\n    @allure.story(\"Успешный вход\")\n    @allure.title(\"Тест успешной авторизации пользователя\")\n    @allure.description(\n        \"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.\"\n    )\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success(self, auth_client: AuthClient) -> None:\n        \"\"\"\n        Убедитесь в успешной авторизации c помощью действительных учетных данных.\n    \n        Ожидаемый результат: статус 200 OK и действительный JWT-токен в ответе.\n        \"\"\"\n        logger.info(\"Тест: Успешная авторизация\")\n        if not TEST_USER_LOGIN or not TEST_USER_PASSWORD:\n            pytest.skip(\"Пропуск теста: Учетные данные тестового пользователя не настроены.\")\n    \n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = auth_client.login(payload=payload, expected_status=200)\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/auth/test_auth_api.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f427c438980>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"ac331b9f797b00ee","name":"Status Code: 500","source":"ac331b9f797b00ee.txt","type":"text/plain","size":3},{"uid":"de5b5055ee7b16ab","name":"Request URL","source":"de5b5055ee7b16ab.uri","type":"text/uri-list","size":30},{"uid":"79eafa1a4e3e54a9","name":"Response Headers (JSON)","source":"79eafa1a4e3e54a9.json","type":"application/json","size":309},{"uid":"862140bb4e1c0680","name":"Response Body (Text)","source":"862140bb4e1c0680.txt","type":"text/plain","size":20},{"uid":"3d16875d5a3b487","name":"Status response code: 500 (Expected: 200)","source":"3d16875d5a3b487.txt","type":"text/plain","size":3},{"uid":"a72dbce6ce012f14","name":"log","source":"a72dbce6ce012f14.txt","type":"text/plain","size":421},{"uid":"9e81b7e73a78ee4f","name":"stderr","source":"9e81b7e73a78ee4f.txt","type":"text/plain","size":509}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1750872840524,"stop":1750872840531,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1750872840532,"stop":1750872840541,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Успешный вход"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"epic","value":"Аутентификация"},{"name":"severity","value":"blocker"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"pkrvmfw4aktn2gb"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["auth","smoke","positive"]},"source":"715281da129993e2.json","parameterValues":[]}