{"uid":"2c69d942ec7a841e","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1746398347046,"stop":1746398347117,"duration":71},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f08e90a39d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f08e8762570>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f08e8762570>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746398344213,"stop":1746398344214,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746398344214,"stop":1746398344214,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746398344214,"stop":1746398344215,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746398344215,"stop":1746398344215,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746398344215,"stop":1746398344724,"duration":509},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746398344724,"stop":1746398344767,"duration":43},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746398344767,"stop":1746398344768,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746398344768,"stop":1746398344769,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746398346257,"stop":1746398346363,"duration":106},"status":"passed","steps":[],"attachments":[{"uid":"3bf6c59c45c10d21","name":"Status Code: 200","source":"3bf6c59c45c10d21.txt","type":"text/plain","size":3},{"uid":"4f85de527b2e5514","name":"Request URL","source":"4f85de527b2e5514.uri","type":"text/uri-list","size":30},{"uid":"a946228fb405f264","name":"Response Headers (JSON)","source":"a946228fb405f264.json","type":"application/json","size":317},{"uid":"e6ec1f2656d3c3f6","name":"Response Body (JSON)","source":"e6ec1f2656d3c3f6.json","type":"application/json","size":224},{"uid":"dbe1140a039cf60","name":"Status response code: 200 (Expected: 200)","source":"dbe1140a039cf60.txt","type":"text/plain","size":3},{"uid":"b450b80a6d114fb5","name":"Body of the answer (failed by AuthSuccessResponse)","source":"b450b80a6d114fb5.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746398347028,"stop":1746398347045,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746398347045,"stop":1746398347045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746398347045,"stop":1746398347045,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f08e90a39d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f08e8762570>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f08e8762570>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1746398347047,"stop":1746398347116,"duration":69},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"62dac65f8827d7db","name":"Status Code: 500","source":"62dac65f8827d7db.txt","type":"text/plain","size":3},{"uid":"5c908a83b3ed9c40","name":"Request URL","source":"5c908a83b3ed9c40.uri","type":"text/uri-list","size":30},{"uid":"edca098738b59220","name":"Response Headers (JSON)","source":"edca098738b59220.json","type":"application/json","size":309},{"uid":"4ece405ca07f5f92","name":"Response Body (Text)","source":"4ece405ca07f5f92.txt","type":"text/plain","size":20},{"uid":"536f3a8dde1719e8","name":"Status response code: 500 (Expected: 200)","source":"536f3a8dde1719e8.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"694c2b08087cdb4f","name":"log","source":"694c2b08087cdb4f.txt","type":"text/plain","size":4948},{"uid":"2c584979edb09c71","name":"stderr","source":"2c584979edb09c71.txt","type":"text/plain","size":5861}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746398347132,"stop":1746398347147,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746398347675,"stop":1746398347690,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746398347691,"stop":1746398347702,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение профиля"},{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Управление пользователем"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az1215-201"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"3e276749da8869e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398346872,"stop":1746398346980,"duration":108}},{"uid":"ce0a7f86932c2762","status":"failed","statusDetails":"AssertionError: assert 'Центральный логистический консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный логистический консультант","time":{"start":1746398346759,"stop":1746398346813,"duration":54}},{"uid":"80cf3bccaa17e548","status":"failed","statusDetails":"AssertionError: assert 'Центральный логистический консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный логистический консультант","time":{"start":1746398346638,"stop":1746398346697,"duration":59}},{"uid":"1409bd8e34a3f451","status":"failed","statusDetails":"AssertionError: assert 'Центральный логистический консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный логистический консультант","time":{"start":1746398346516,"stop":1746398346574,"duration":58}},{"uid":"1edac5ac8b792086","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398346382,"stop":1746398346443,"duration":61}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"14d7638bb35e689a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/92//#testresult/14d7638bb35e689a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398074041,"stop":1746398074073,"duration":32}},{"uid":"16abdc1663c192","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/16abdc1663c192","status":"failed","statusDetails":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","time":{"start":1746395043852,"stop":1746395043910,"duration":58}},{"uid":"3af48f1e8ebee0b7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/3af48f1e8ebee0b7","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394513268,"stop":1746394513310,"duration":42}}]},"tags":["smoke","positive","user"]},"source":"2c69d942ec7a841e.json","parameterValues":[]}