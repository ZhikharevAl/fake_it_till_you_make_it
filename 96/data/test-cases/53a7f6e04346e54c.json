{"uid":"53a7f6e04346e54c","name":"Тест неуспешного входа: Неверный логин, неверный пароль","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_failure_invalid_credentials","historyId":"7ab3741e30f743348384fc25c8c65e9f","time":{"start":1746479135536,"stop":1746479135724,"duration":188},"description":"Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, неверный пароль","descriptionHtml":"<p>Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, неверный пароль</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7fb0d14e42b0>\nauth_client = <api.auth.client.AuthClient object at 0x7fb0d1336900>\nlogin = 'nonexistent.user@example.com', password = 'wrongPassword'\nexpected_status = 400, description = 'Неверный логин, неверный пароль'\n\n    @allure.story(\"Неуспешный вход - Неверные учетные данные\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Корректный логин, неверный пароль\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Неверный логин, корректный пароль\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Неверный логин, неверный пароль\",\n                id=\"invalid_login_and_pass\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка неуспешной авторизации c неверными учетными данными.\n    \n        Ожидаемый результат: статус код 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при попытке входа c: {description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7fb0d1336900>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746479135009,"stop":1746479135009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746479135010,"stop":1746479135010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746479135010,"stop":1746479135010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746479135010,"stop":1746479135010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746479135011,"stop":1746479135506,"duration":495},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746479135506,"stop":1746479135532,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746479135532,"stop":1746479135532,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746479135533,"stop":1746479135533,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, неверный пароль","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7fb0d14e42b0>\nauth_client = <api.auth.client.AuthClient object at 0x7fb0d1336900>\nlogin = 'nonexistent.user@example.com', password = 'wrongPassword'\nexpected_status = 400, description = 'Неверный логин, неверный пароль'\n\n    @allure.story(\"Неуспешный вход - Неверные учетные данные\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Корректный логин, неверный пароль\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Неверный логин, корректный пароль\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Неверный логин, неверный пароль\",\n                id=\"invalid_login_and_pass\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка неуспешной авторизации c неверными учетными данными.\n    \n        Ожидаемый результат: статус код 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при попытке входа c: {description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7fb0d1336900>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"e14da17a3e05d5d4","name":"Status Code: 500","source":"e14da17a3e05d5d4.txt","type":"text/plain","size":3},{"uid":"f3ea6c05e078e6a2","name":"Request URL","source":"f3ea6c05e078e6a2.uri","type":"text/uri-list","size":30},{"uid":"8b4b26f95b71e457","name":"Response Headers (JSON)","source":"8b4b26f95b71e457.json","type":"application/json","size":309},{"uid":"2873be2687e23910","name":"Response Body (Text)","source":"2873be2687e23910.txt","type":"text/plain","size":20},{"uid":"ab87c2a3bbecd023","name":"Status response code: 500 (Expected: 400)","source":"ab87c2a3bbecd023.txt","type":"text/plain","size":3},{"uid":"8399352187e67715","name":"log","source":"8399352187e67715.txt","type":"text/plain","size":761},{"uid":"ebd894708a5b985b","name":"stderr","source":"ebd894708a5b985b.txt","type":"text/plain","size":933}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746479138728,"stop":1746479138737,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746479138738,"stop":1746479138745,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Аутентификация"},{"name":"story","value":"Неуспешный вход - Неверные учетные данные"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1019-568"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Неверный логин, неверный пароль'"},{"name":"expected_status","value":"400"},{"name":"login","value":"'nonexistent.user@example.com'"},{"name":"password","value":"'wrongPassword'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["negative","auth"]},"source":"53a7f6e04346e54c.json","parameterValues":["'Неверный логин, неверный пароль'","400","'nonexistent.user@example.com'","'wrongPassword'"]}