{"uid":"7d4d69cef271c2eb","name":"Тест успешного получения списка избранного","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_get_favourites_success","historyId":"ffe87828fd4ec27492b9f047ec29073c","time":{"start":1746398074314,"stop":1746398074345,"duration":31},"description":"Проверяем получение списка избранного для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение списка избранного для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7fa44f808690>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fa44f78d940>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест успешного получения списка избранного\")\n    @allure.description(\n        \"Проверяем получение списка избранного для аутентифицированного пользователя.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"Тест: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fa44f78d940>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746398072889,"stop":1746398072889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746398072889,"stop":1746398072889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746398072890,"stop":1746398072890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746398072890,"stop":1746398073189,"duration":299},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746398072890,"stop":1746398072890,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746398073189,"stop":1746398073210,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746398073210,"stop":1746398073210,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746398073211,"stop":1746398073211,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746398073963,"stop":1746398074033,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"93691b2762f80a14","name":"Status Code: 200","source":"93691b2762f80a14.txt","type":"text/plain","size":3},{"uid":"ccb3d9afa8ce62ce","name":"Request URL","source":"ccb3d9afa8ce62ce.uri","type":"text/uri-list","size":30},{"uid":"9357955fcc33c1f7","name":"Response Headers (JSON)","source":"9357955fcc33c1f7.json","type":"application/json","size":317},{"uid":"5cbaacc26a1ea72a","name":"Response Body (JSON)","source":"5cbaacc26a1ea72a.json","type":"application/json","size":224},{"uid":"e42e3c2be5d42ab1","name":"Status response code: 200 (Expected: 200)","source":"e42e3c2be5d42ab1.txt","type":"text/plain","size":3},{"uid":"496edd6c39d1e940","name":"Body of the answer (failed by AuthSuccessResponse)","source":"496edd6c39d1e940.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746398074306,"stop":1746398074313,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746398074313,"stop":1746398074313,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746398074313,"stop":1746398074314,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка избранного для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7fa44f808690>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fa44f78d940>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест успешного получения списка избранного\")\n    @allure.description(\n        \"Проверяем получение списка избранного для аутентифицированного пользователя.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"Тест: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fa44f78d940>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"82ec141c5a1fc00e","name":"Status Code: 500","source":"82ec141c5a1fc00e.txt","type":"text/plain","size":3},{"uid":"7744e9b4b411d0e8","name":"Request URL","source":"7744e9b4b411d0e8.uri","type":"text/uri-list","size":41},{"uid":"54a9c4394caa2659","name":"Response Headers (JSON)","source":"54a9c4394caa2659.json","type":"application/json","size":309},{"uid":"d5aa8941242f5acc","name":"Response Body (Text)","source":"d5aa8941242f5acc.txt","type":"text/plain","size":20},{"uid":"bc8826cf61d618d3","name":"Status response code: 500 (Expected: 200)","source":"bc8826cf61d618d3.txt","type":"text/plain","size":3},{"uid":"383252fdcd1f2cf9","name":"log","source":"383252fdcd1f2cf9.txt","type":"text/plain","size":793},{"uid":"14687ac1d1e17684","name":"stderr","source":"14687ac1d1e17684.txt","type":"text/plain","size":923}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746398074355,"stop":1746398074362,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746398074447,"stop":1746398074453,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746398074454,"stop":1746398074462,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Получение списка избранного"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az2031-666"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":3},"items":[{"uid":"60b5fc8af582c184","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/60b5fc8af582c184","status":"passed","time":{"start":1746395043936,"stop":1746395043992,"duration":56}},{"uid":"7c0331ef4e86f7e8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/7c0331ef4e86f7e8","status":"passed","time":{"start":1746394513601,"stop":1746394513655,"duration":54}}]},"tags":["favourites","smoke","positive","user"]},"source":"7d4d69cef271c2eb.json","parameterValues":[]}