[project]
name = "charity-event-mock-test"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [{ name = "AlexeyZh", email = "waltafunk@gmail.com" }]
requires-python = ">=3.13"

dependencies = []

[dependency-groups]
dev = [
    "allure-pytest>=2.13.5",
    "pydantic[email]>=2.11.2",
    "pyright>=1.1.398",
    "pytest-cov>=6.1.0",
    "pytest-playwright>=0.7.0",
    "python-dotenv>=1.1.0",
    "ruff>=0.11.2",
    "pytest>=8.3.5",
    "playwright>=1.51.0",
]

[tool.pytest.ini_options]
pythonpath = ["src", "."] # Добавил ".", чтобы можно было запускать из корня

addopts = "-v --disable-warnings"

markers = [
    "smoke: Критически важные тесты (проверка базовой работоспособности)",
    "auth: Тесты, связанные с авторизацией",
    "positive: Позитивные тестовые сценарии (ожидается успех)",
    "negative: Негативные тестовые сценарии (ожидаются ошибки)",
]

log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s [%(filename)s:%(lineno)s]"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"


testpaths = ["tests"]

[tool.ruff]

line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D100",    # missing-docstring-in-public-module
    "D101",    # missing-docstring-in-public-class
    "D102",    # missing-docstring-in-public-method
    "D103",    # missing-docstring-in-public-function
    "D104",    # missing-docstring-in-public-package
    "D105",    # missing-docstring-in-magic-method
    "D106",    # missing-docstring-in-public-nested-class
    "D107",    # missing-docstring-in-init
    "S101",    # assert (разрешаем assert в тестах)
    "PLR2004", # magic-value-comparison
    "COM812",  # missing-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "N812",    # Lowercase `expected_conditions` imported as non-lowercase
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PGH003",  # use specific rule codes when ignoring type issues
    "S105",    # hard-coded password (лучше избегать, но может быть нужно для тестов)
    "ANN002",  # Missing type annotation for `*args`
    "ANN003",  # Missing type annotation for `**kwargs`
    "ANN201",  # Missing return type annotation for public function/method
    "ANN202",  # Missing return type annotation for private function/method
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "TRY003",  # Avoid specifying long messages outside the exception class
    "EM101",   # Exception must not use a string literal, assign to variable first
    "EM102",   # Exception must not use an f-string literal, assign to variable first
    "FIX002",  # Line contains TODO
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link or ticket in TODO
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*.py" = [
    "S101",
    "ANN101",
    "ANN201",
]
"conftest.py" = ["ANN201"]

[tool.ruff.lint.isort]
known-third-party = ["pytest", "playwright", "pydantic", "allure", "dotenv"]

[tool.ruff.lint.pylint]
max-args = 7
max-returns = 3
max-statements = 50
max-branches = 12

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["pytest.mark.parametrize", "pytest.fixture"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pytest.fixture"]


[tool.pyright]
exclude = [".venv", "**/__pycache__"]
pythonVersion = "3.13"
venvPath = "."
venv = ".venv"
