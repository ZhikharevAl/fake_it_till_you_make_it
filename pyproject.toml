[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "charity-event-mock-test"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [{ name = "AlexeyZh", email = "waltafunk@gmail.com" }]
requires-python = ">=3.13"

dependencies = []

[dependency-groups]
dev = [
    "allure-pytest>=2.13.5",
    "pydantic[email]>=2.11.2",
    "pyright>=1.1.398",
    "pytest-cov>=6.1.0",
    "pytest-playwright>=0.7.0",
    "python-dotenv>=1.1.0",
    "ruff>=0.11.2",
    "pytest>=8.3.5",
    "playwright>=1.51.0",
    "pytest-rerunfailures>=15.0",
    "pytest-xdist>=3.6.1",
]

[tool.setuptools]
packages = []

[tool.pytest.ini_options]
pythonpath = ["src", "."]

addopts = "-v --disable-warnings --reruns 5 -n auto"

markers = [
    "smoke: Critical tests (basic performance testing)",
    "auth: Tests related to authorization",
    "user: Tests related to user",
    "positive: Positive test scenarios (success is expected)",
    "negative: Negative test scenarios (errors are expected)",
    "request: Tests related to request",
    "favourites: Tests related to favourites",
    "dependencies: Tests that use external dependencies",
    "mocked: Tests that use mocked data",
]

log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s [%(filename)s:%(lineno)s]"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

testpaths = ["tests"]

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "D100",    # missing-docstring-in-public-module
    "S101",    # assert
    "PLR2004", # magic-value-comparison
    "COM812",  # missing-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
    "N812",    # Lowercase `expected_conditions` imported as non-lowercase
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "PGH003",  # use specific rule codes when ignoring type issues
    "S105",    # hard-coded password
   # "AN401",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "D104"]


[tool.ruff.lint.isort]
known-third-party = ["pytest", "playwright", "pydantic", "allure", "dotenv"]

[tool.ruff.lint.pylint]
max-args = 7
max-returns = 3
max-statements = 50
max-branches = 12

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["pytest.mark.parametrize", "pytest.fixture"]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "pytest.fixture"]

[tool.pyright]
exclude = [".venv", "**/__pycache__"]
pythonVersion = "3.13"
venvPath = "."
venv = ".venv"
