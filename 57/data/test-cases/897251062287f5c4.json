{"uid":"897251062287f5c4","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1745288428918,"stop":1745288428981,"duration":63},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f0c1a7c4e10>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f0c19350dd0>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f0c19350dd0>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745288425503,"stop":1745288425503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745288425503,"stop":1745288425503,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745288425504,"stop":1745288425926,"duration":422},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745288425504,"stop":1745288425504,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745288425504,"stop":1745288425504,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745288425926,"stop":1745288425955,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745288425955,"stop":1745288425956,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745288425956,"stop":1745288425956,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1745288428182,"stop":1745288428288,"duration":106},"status":"passed","steps":[],"attachments":[{"uid":"c58fb6e122150baf","name":"Status Code: 200","source":"c58fb6e122150baf.txt","type":"text/plain","size":3},{"uid":"f741dd9b4c37f242","name":"Request URL","source":"f741dd9b4c37f242.uri","type":"text/uri-list","size":30},{"uid":"d71ff1beab1031bb","name":"Response Headers (JSON)","source":"d71ff1beab1031bb.json","type":"application/json","size":317},{"uid":"a257b098f0f48be3","name":"Response Body (JSON)","source":"a257b098f0f48be3.json","type":"application/json","size":224},{"uid":"885f359f8271270","name":"Status response code: 200 (Expected: 200)","source":"885f359f8271270.txt","type":"text/plain","size":3},{"uid":"ae209a8aa7f81e32","name":"Body of the answer (failed by AuthSuccessResponse)","source":"ae209a8aa7f81e32.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1745288428900,"stop":1745288428916,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1745288428917,"stop":1745288428917,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1745288428917,"stop":1745288428917,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f0c1a7c4e10>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f0c19350dd0>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f0c19350dd0>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1745288428918,"stop":1745288428980,"duration":62},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"ce29ab52205efb01","name":"Status Code: 500","source":"ce29ab52205efb01.txt","type":"text/plain","size":3},{"uid":"773aacd21bdd73a1","name":"Request URL","source":"773aacd21bdd73a1.uri","type":"text/uri-list","size":30},{"uid":"d583e16aa9cde66d","name":"Response Headers (JSON)","source":"d583e16aa9cde66d.json","type":"application/json","size":309},{"uid":"9b887ebdd88566a","name":"Response Body (Text)","source":"9b887ebdd88566a.txt","type":"text/plain","size":20},{"uid":"96c9e471645faf7a","name":"Status response code: 500 (Expected: 200)","source":"96c9e471645faf7a.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"ed11948e23405d8","name":"log","source":"ed11948e23405d8.txt","type":"text/plain","size":4811},{"uid":"472aaf0166c264e1","name":"stderr","source":"472aaf0166c264e1.txt","type":"text/plain","size":5700}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1745288428994,"stop":1745288429004,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1745288429540,"stop":1745288429549,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745288429550,"stop":1745288429557,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение профиля"},{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"critical"},{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az1153-204"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"5f0bf1532fbeb7ff","status":"failed","statusDetails":"AssertionError: assert 'Районный операционный руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Районный операционный руководитель","time":{"start":1745288428800,"stop":1745288428856,"duration":56}},{"uid":"658dc3b2e06a51a5","status":"failed","statusDetails":"AssertionError: assert 'Районный операционный руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Районный операционный руководитель","time":{"start":1745288428685,"stop":1745288428739,"duration":54}},{"uid":"d43cc257cca72c4e","status":"failed","statusDetails":"AssertionError: assert 'Районный операционный руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Районный операционный руководитель","time":{"start":1745288428568,"stop":1745288428626,"duration":58}},{"uid":"a99d83264cf32b3d","status":"failed","statusDetails":"AssertionError: assert 'Районный операционный руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Районный операционный руководитель","time":{"start":1745288428443,"stop":1745288428507,"duration":64}},{"uid":"e13d59aa6e084588","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745288428306,"stop":1745288428374,"duration":68}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":29,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":29},"items":[{"uid":"38dc00b2816c8fb3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/56//#testresult/38dc00b2816c8fb3","status":"failed","statusDetails":"AssertionError: assert 'Международный функциональный помощник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Международный функциональный помощник","time":{"start":1745264284272,"stop":1745264284352,"duration":80}},{"uid":"53317b5bd9e5a278","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/55//#testresult/53317b5bd9e5a278","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745263984226,"stop":1745263984257,"duration":31}},{"uid":"190da8f6cb6726bb","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/54//#testresult/190da8f6cb6726bb","status":"failed","statusDetails":"AssertionError: assert 'Региональный логистический архитектор' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный логистический архитектор","time":{"start":1745180424713,"stop":1745180424756,"duration":43}},{"uid":"25c1106c441350f2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/53//#testresult/25c1106c441350f2","status":"failed","statusDetails":"AssertionError: assert 'Международный страховой техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Международный страховой техник","time":{"start":1745180152746,"stop":1745180152778,"duration":32}},{"uid":"41375595d18bbc79","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/52//#testresult/41375595d18bbc79","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745173182239,"stop":1745173182270,"duration":31}},{"uid":"5979f9a406c717c5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/51//#testresult/5979f9a406c717c5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745173153266,"stop":1745173153296,"duration":30}},{"uid":"451d14c176dcc08e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/50//#testresult/451d14c176dcc08e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745171169026,"stop":1745171169057,"duration":31}},{"uid":"ecddb86a18fcf278","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/49//#testresult/ecddb86a18fcf278","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745016104490,"stop":1745016104520,"duration":30}},{"uid":"5cfb73d241e2334d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/48//#testresult/5cfb73d241e2334d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745015892294,"stop":1745015892324,"duration":30}},{"uid":"b35d3ffec593ed1f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/47//#testresult/b35d3ffec593ed1f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745014809916,"stop":1745014809949,"duration":33}},{"uid":"b2a0fbe5ed17a33","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/46//#testresult/b2a0fbe5ed17a33","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745014788037,"stop":1745014788068,"duration":31}},{"uid":"dbbb71de7b4d4353","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/45//#testresult/dbbb71de7b4d4353","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745013912910,"stop":1745013912940,"duration":30}},{"uid":"4754413a390ef0ac","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/4754413a390ef0ac","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745013767629,"stop":1745013767659,"duration":30}},{"uid":"c16e8e787bade7c7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/c16e8e787bade7c7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745007984188,"stop":1745007984219,"duration":31}},{"uid":"4497c205a02f76e5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/4497c205a02f76e5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745007718062,"stop":1745007718093,"duration":31}},{"uid":"2ad275bfd6044f56","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/2ad275bfd6044f56","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745007086920,"stop":1745007086950,"duration":30}},{"uid":"7a1d8b2beefc8b0c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/7a1d8b2beefc8b0c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006983096,"stop":1745006983128,"duration":32}},{"uid":"c21c2f659552df50","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/c21c2f659552df50","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006650417,"stop":1745006650447,"duration":30}},{"uid":"1b7a965fd9e6ed9d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/1b7a965fd9e6ed9d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006447908,"stop":1745006447939,"duration":31}},{"uid":"55199893bddc6f9f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/55199893bddc6f9f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006158525,"stop":1745006158555,"duration":30}}]},"tags":["smoke","positive","user"]},"source":"897251062287f5c4.json","parameterValues":[]}