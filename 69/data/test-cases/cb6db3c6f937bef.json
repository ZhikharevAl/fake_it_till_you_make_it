{"uid":"cb6db3c6f937bef","name":"Тест получения деталей запроса c некорректным ID","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_bad_request","historyId":"227b8792dcbc8996c1da6f6bff256a46","time":{"start":1745296597012,"stop":1745296597069,"duration":57},"description":"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.","descriptionHtml":"<p>Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f387f21c9d0>\nrequest_client = <api.request.client.RequestClient object at 0x7f387df2e660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей запроса c некорректным ID\")\n    @allure.description(\n        \"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_bad_request(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей запроса c некорректным ID (если сервер должен возвращать 400).\n    \n        Ожидаемый результат: статус 400 Bad Request.\n        \"\"\"\n        invalid_id = \"invalid-id-format\"\n        logger.info(\n            \"Тест: Получение деталей запроса c невалидным ID (GET /api/request/%s)\", invalid_id\n        )\n>       response = request_client.get_request_details(request_id=invalid_id, expected_status=400)  # type: ignore\n\ntests/request/test_request_api.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f387df2e660>\nresponse = <APIResponse url='http://localhost:4040/api/request/invalid-id-format' status=403 status_text='Forbidden'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745296594429,"stop":1745296594430,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745296594430,"stop":1745296594431,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745296594431,"stop":1745296594850,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745296594431,"stop":1745296594431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745296594431,"stop":1745296594431,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745296594850,"stop":1745296594879,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745296594879,"stop":1745296594880,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745296596519,"stop":1745296596520,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f387f21c9d0>\nrequest_client = <api.request.client.RequestClient object at 0x7f387df2e660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей запроса c некорректным ID\")\n    @allure.description(\n        \"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_bad_request(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей запроса c некорректным ID (если сервер должен возвращать 400).\n    \n        Ожидаемый результат: статус 400 Bad Request.\n        \"\"\"\n        invalid_id = \"invalid-id-format\"\n        logger.info(\n            \"Тест: Получение деталей запроса c невалидным ID (GET /api/request/%s)\", invalid_id\n        )\n>       response = request_client.get_request_details(request_id=invalid_id, expected_status=400)  # type: ignore\n\ntests/request/test_request_api.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f387df2e660>\nresponse = <APIResponse url='http://localhost:4040/api/request/invalid-id-format' status=403 status_text='Forbidden'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='invalid-id-format'","time":{"start":1745296597013,"stop":1745296597068,"duration":55},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"5c8b60cef7468f68","name":"Status Code: 403","source":"5c8b60cef7468f68.txt","type":"text/plain","size":3},{"uid":"c888ed49e2cb5d8b","name":"Request URL","source":"c888ed49e2cb5d8b.uri","type":"text/uri-list","size":51},{"uid":"a005503962a66364","name":"Response Headers (JSON)","source":"a005503962a66364.json","type":"application/json","size":316},{"uid":"15174d9f7750ccb","name":"Response Body (JSON)","source":"15174d9f7750ccb.json","type":"application/json","size":39},{"uid":"ce25ae3f481db0fa","name":"Status response code: 403 (Expected: 400)","source":"ce25ae3f481db0fa.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'invalid-id-format'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"f0ee9a484addbe49","name":"log","source":"f0ee9a484addbe49.txt","type":"text/plain","size":3423},{"uid":"81f8f04e6c1b6ab6","name":"stderr","source":"81f8f04e6c1b6ab6.txt","type":"text/plain","size":3997}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745296598468,"stop":1745296598476,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745296598477,"stop":1745296598486,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Запросы помощи"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"story","value":"Получение деталей"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az1242-129"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"d33a906e341df6ee","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745296596922,"stop":1745296596974,"duration":52}},{"uid":"6d2e4d3e49485813","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\nPlanned Server Error","time":{"start":1745296596819,"stop":1745296596885,"duration":66}},{"uid":"c1cfd1087831b0b","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\nPlanned Server Error","time":{"start":1745296596713,"stop":1745296596779,"duration":66}},{"uid":"abb594eb8e5baa7","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745296596626,"stop":1745296596675,"duration":49}},{"uid":"6f2f47ebf0f4a3de","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745296596521,"stop":1745296596593,"duration":72}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"acb481b7c8947080","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/68//#testresult/acb481b7c8947080","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295989548,"stop":1745295989602,"duration":54}},{"uid":"5408d97528c43391","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/67//#testresult/5408d97528c43391","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 403. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295757027,"stop":1745295757083,"duration":56}}]},"tags":["request","negative"]},"source":"cb6db3c6f937bef.json","parameterValues":[]}