{"uid":"26e39557dfc25348","name":"Тест успешного внесения вклада в существующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_success","historyId":"669c54e9452a544e52cd8b6d124e1e96","time":{"start":1745296597266,"stop":1745296597324,"duration":58},"description":"Проверяем возможность внести вклад в существующий запрос.","descriptionHtml":"<p>Проверяем возможность внести вклад в существующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f33da4c4cb0>\nrequest_client = <api.request.client.RequestClient object at 0x7f33da32c6e0>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест успешного внесения вклада в существующий запрос\")\n    @allure.description(\"Проверяем возможность внести вклад в существующий запрос.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_contribute_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного внесения вклада (без тела запроса).\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное внесение вклада (POST /api/request/%s/contribution)\",\n            EXISTING_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f33da32c6e0>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1/contribution' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745296594429,"stop":1745296594431,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745296594432,"stop":1745296594432,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745296594433,"stop":1745296594433,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745296594433,"stop":1745296594852,"duration":419},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745296594433,"stop":1745296594433,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745296594852,"stop":1745296594881,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745296594881,"stop":1745296594881,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745296596140,"stop":1745296596140,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем возможность внести вклад в существующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f33da4c4cb0>\nrequest_client = <api.request.client.RequestClient object at 0x7f33da32c6e0>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест успешного внесения вклада в существующий запрос\")\n    @allure.description(\"Проверяем возможность внести вклад в существующий запрос.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_contribute_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного внесения вклада (без тела запроса).\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное внесение вклада (POST /api/request/%s/contribution)\",\n            EXISTING_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f33da32c6e0>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1/contribution' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='request-id-1'","time":{"start":1745296597266,"stop":1745296597323,"duration":57},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"3c7c9f7f3c8e7f97","name":"Status Code: 403","source":"3c7c9f7f3c8e7f97.txt","type":"text/plain","size":3},{"uid":"d059d0068ac5fa17","name":"Request URL","source":"d059d0068ac5fa17.uri","type":"text/uri-list","size":59},{"uid":"73a2ea25f6cacb9d","name":"Response Headers (JSON)","source":"73a2ea25f6cacb9d.json","type":"application/json","size":316},{"uid":"b80acb4a616c864d","name":"Response Body (JSON)","source":"b80acb4a616c864d.json","type":"application/json","size":39},{"uid":"384f057e769945ca","name":"Status response code: 403 (Expected: 200)","source":"384f057e769945ca.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'request-id-1'"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3bff653125cb9e08","name":"log","source":"3bff653125cb9e08.txt","type":"text/plain","size":3279},{"uid":"69be9f93abd8e65f","name":"stderr","source":"69be9f93abd8e65f.txt","type":"text/plain","size":3832}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745296597677,"stop":1745296597692,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745296597693,"stop":1745296597703,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"story","value":"Внесение вклада"},{"name":"severity","value":"normal"},{"name":"epic","value":"Запросы помощи"},{"name":"tag","value":"positive"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az1242-129"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f3536e3960bebfb0","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1745296597168,"stop":1745296597232,"duration":64}},{"uid":"8e17f4f9ffaa2b65","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1745296597063,"stop":1745296597131,"duration":68}},{"uid":"7030d0a0277d061","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745296596979,"stop":1745296597030,"duration":51}},{"uid":"97e5e21308e12296","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745296596892,"stop":1745296596943,"duration":51}},{"uid":"5cf608ef69a0e7b7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745296596800,"stop":1745296596854,"duration":54}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"76a973b9cbe25ae7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/68//#testresult/76a973b9cbe25ae7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1745295989851,"stop":1745295989921,"duration":70}},{"uid":"ffcb2b101b9946a6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/67//#testresult/ffcb2b101b9946a6","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1745295757454,"stop":1745295757524,"duration":70}}]},"tags":["request","positive"]},"source":"26e39557dfc25348.json","parameterValues":[]}