{"uid":"e949e12418d05abc","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1746481275566,"stop":1746481275618,"duration":52},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f23d01af9d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f23cac6dd90>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f23cac6dd90>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746481272686,"stop":1746481272687,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746481272688,"stop":1746481272688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746481272688,"stop":1746481272688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746481272688,"stop":1746481272688,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746481272689,"stop":1746481273204,"duration":515},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746481273204,"stop":1746481273231,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746481273232,"stop":1746481273233,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746481273232,"stop":1746481273232,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746481274766,"stop":1746481274883,"duration":117},"status":"passed","steps":[],"attachments":[{"uid":"2f9e23c641a39371","name":"Status Code: 200","source":"2f9e23c641a39371.txt","type":"text/plain","size":3},{"uid":"76da210cf8f09f17","name":"Request URL","source":"76da210cf8f09f17.uri","type":"text/uri-list","size":30},{"uid":"e951ad5471bfa86","name":"Response Headers (JSON)","source":"e951ad5471bfa86.json","type":"application/json","size":317},{"uid":"217133632f188790","name":"Response Body (JSON)","source":"217133632f188790.json","type":"application/json","size":224},{"uid":"10b4630cb319a9ba","name":"Status response code: 200 (Expected: 200)","source":"10b4630cb319a9ba.txt","type":"text/plain","size":3},{"uid":"10552a8554acb9bb","name":"Body of the answer (failed by AuthSuccessResponse)","source":"10552a8554acb9bb.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746481275547,"stop":1746481275564,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746481275564,"stop":1746481275564,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746481275565,"stop":1746481275565,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f23d01af9d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f23cac6dd90>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f23cac6dd90>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1746481275566,"stop":1746481275616,"duration":50},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"454cfcfcd3ee1f95","name":"Status Code: 500","source":"454cfcfcd3ee1f95.txt","type":"text/plain","size":3},{"uid":"92b6c0c24b70fbac","name":"Request URL","source":"92b6c0c24b70fbac.uri","type":"text/uri-list","size":30},{"uid":"db26639dfe685c99","name":"Response Headers (JSON)","source":"db26639dfe685c99.json","type":"application/json","size":309},{"uid":"729ac0f9401484b8","name":"Response Body (Text)","source":"729ac0f9401484b8.txt","type":"text/plain","size":20},{"uid":"ad31b53174cf8599","name":"Status response code: 500 (Expected: 200)","source":"ad31b53174cf8599.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"dbe995468b0ac4b","name":"log","source":"dbe995468b0ac4b.txt","type":"text/plain","size":4674},{"uid":"a2519c847a05bf8a","name":"stderr","source":"a2519c847a05bf8a.txt","type":"text/plain","size":5539}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746481275638,"stop":1746481275652,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746481276512,"stop":1746481276520,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746481276521,"stop":1746481276529,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"critical"},{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"story","value":"Получение профиля"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az881-867"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"13d233accc655d17","status":"failed","statusDetails":"AssertionError: assert 'Областной страховой разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной страховой разработчик","time":{"start":1746481275403,"stop":1746481275505,"duration":102}},{"uid":"c5cfd1bfb264daa3","status":"failed","statusDetails":"AssertionError: assert 'Областной страховой разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной страховой разработчик","time":{"start":1746481275278,"stop":1746481275340,"duration":62}},{"uid":"4770514254757491","status":"failed","statusDetails":"AssertionError: assert 'Областной страховой разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной страховой разработчик","time":{"start":1746481275148,"stop":1746481275205,"duration":57}},{"uid":"619b2529d9bd58be","status":"failed","statusDetails":"AssertionError: assert 'Областной страховой разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной страховой разработчик","time":{"start":1746481275025,"stop":1746481275086,"duration":61}},{"uid":"6f47b95a2d635479","status":"failed","statusDetails":"AssertionError: assert 'Областной страховой разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной страховой разработчик","time":{"start":1746481274901,"stop":1746481274964,"duration":63}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"72f843ca9d8b82d8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/96//#testresult/72f843ca9d8b82d8","status":"failed","statusDetails":"AssertionError: assert 'Международный операционный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Международный операционный инженер","time":{"start":1746479137925,"stop":1746479138019,"duration":94}},{"uid":"fcc3bc3e66e77b42","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/95//#testresult/fcc3bc3e66e77b42","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746478918404,"stop":1746478918435,"duration":31}},{"uid":"aa3eb924cdd2cf45","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/94//#testresult/aa3eb924cdd2cf45","status":"failed","statusDetails":"AssertionError: assert 'Глобальный маркетинговый помощник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Глобальный маркетинговый помощник","time":{"start":1746398527168,"stop":1746398527231,"duration":63}},{"uid":"2c69d942ec7a841e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/93//#testresult/2c69d942ec7a841e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398347046,"stop":1746398347117,"duration":71}},{"uid":"14d7638bb35e689a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/92//#testresult/14d7638bb35e689a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398074041,"stop":1746398074073,"duration":32}},{"uid":"16abdc1663c192","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/16abdc1663c192","status":"failed","statusDetails":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","time":{"start":1746395043852,"stop":1746395043910,"duration":58}},{"uid":"3af48f1e8ebee0b7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/3af48f1e8ebee0b7","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394513268,"stop":1746394513310,"duration":42}}]},"tags":["smoke","positive","user"]},"source":"e949e12418d05abc.json","parameterValues":[]}