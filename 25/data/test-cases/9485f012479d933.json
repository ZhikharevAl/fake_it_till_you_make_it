{"uid":"9485f012479d933","name":"test_get_favourites_success","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_get_favourites_success","historyId":"ffe87828fd4ec27492b9f047ec29073c","time":{"start":1744420061458,"stop":1744420061480,"duration":22},"description":"\nПроверка успешного получения списка избранного для аутентифицированного пользователя.\n\nОжидаемый результат: статус 200 и список строк (возможно, пустой).\n","descriptionHtml":"<p>Проверка успешного получения списка избранного для аутентифицированного пользователя.</p>\n<p>Ожидаемый результат: статус 200 и список строк (возможно, пустой).</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7fe4e49afb10>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fe4e482ba10>\n\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"\\nTest: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:26: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fe4e482ba10>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1744420060715,"stop":1744420060715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1744420060715,"stop":1744420060715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1744420060715,"stop":1744420060716,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1744420060715,"stop":1744420060715,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1744420060716,"stop":1744420060976,"duration":260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1744420060976,"stop":1744420060996,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1744420060996,"stop":1744420060997,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1744420061457,"stop":1744420061457,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nПроверка успешного получения списка избранного для аутентифицированного пользователя.\n\nОжидаемый результат: статус 200 и список строк (возможно, пустой).\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7fe4e49afb10>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fe4e482ba10>\n\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_favourites_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка избранного для аутентифицированного пользователя.\n    \n        Ожидаемый результат: статус 200 и список строк (возможно, пустой).\n        \"\"\"\n        logger.info(\"\\nTest: Успешное получение избранного (GET /api/user/favourites)\")\n>       response = authenticated_user_client.get_favourites(expected_status=200)\n\ntests/user/test_user_favourites_api.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:26: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fe4e482ba10>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"15c77890b6563478","name":"Status Code: 403","source":"15c77890b6563478.txt","type":"text/plain","size":3},{"uid":"b1b46fcbaa440fe6","name":"Request URL","source":"b1b46fcbaa440fe6.uri","type":"text/uri-list","size":41},{"uid":"b34369db5732f31b","name":"Response Headers (JSON)","source":"b34369db5732f31b.json","type":"application/json","size":316},{"uid":"e693767bcfd6ca8","name":"Response Body (JSON)","source":"e693767bcfd6ca8.json","type":"application/json","size":39},{"uid":"b1af3192a82e20d4","name":"Status response code: 403 (Expected: 200)","source":"b1af3192a82e20d4.txt","type":"text/plain","size":3},{"uid":"4fde7294ad096e99","name":"log","source":"4fde7294ad096e99.txt","type":"text/plain","size":385},{"uid":"bcd0fb1db1ada9a9","name":"stderr","source":"bcd0fb1db1ada9a9.txt","type":"text/plain","size":307}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1744420061510,"stop":1744420061517,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1744420061518,"stop":1744420061525,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az1984-790"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"f93c0031bcabc617","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/24//#testresult/f93c0031bcabc617","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744339367894,"stop":1744339367917,"duration":23}}]},"tags":["favourites","smoke","positive","user"]},"source":"9485f012479d933.json","parameterValues":[]}