{"uid":"37468c54dca22732","name":"Тест внесения вклада в несуществующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_not_found","historyId":"f35ec1402f8fdf4c2858bcd70942d7cb","time":{"start":1745006447786,"stop":1745006447811,"duration":25},"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","descriptionHtml":"<p>Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f6db9b06470>\nrequest_client = <api.request.client.RequestClient object at 0x7f6db99fbe00>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f6db99fbe00>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745006446738,"stop":1745006446739,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745006446739,"stop":1745006446739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745006446739,"stop":1745006446739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745006446739,"stop":1745006447031,"duration":292},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745006446739,"stop":1745006446739,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745006447032,"stop":1745006447051,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745006447052,"stop":1745006447052,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745006447574,"stop":1745006447574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f6db9b06470>\nrequest_client = <api.request.client.RequestClient object at 0x7f6db99fbe00>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f6db99fbe00>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9'","time":{"start":1745006447787,"stop":1745006447810,"duration":23},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"ec5a9ef3d9922c2b","name":"Status Code: 403","source":"ec5a9ef3d9922c2b.txt","type":"text/plain","size":3},{"uid":"166404c08f12b4","name":"Request URL","source":"166404c08f12b4.uri","type":"text/uri-list","size":96},{"uid":"d72dee9ca3cfa866","name":"Response Headers (JSON)","source":"d72dee9ca3cfa866.json","type":"application/json","size":316},{"uid":"680999d7395be5b5","name":"Response Body (JSON)","source":"680999d7395be5b5.json","type":"application/json","size":39},{"uid":"1f9e1f27a59cab71","name":"Status response code: 403 (Expected: 404)","source":"1f9e1f27a59cab71.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-5d4821b9-e65d-4a8a-861a-f0fe3f68cbf9'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4a72d1643c9c7c65","name":"log","source":"4a72d1643c9c7c65.txt","type":"text/plain","size":676},{"uid":"710227dbdc8530a","name":"stderr","source":"710227dbdc8530a.txt","type":"text/plain","size":761}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745006448331,"stop":1745006448338,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745006448339,"stop":1745006448346,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"severity","value":"normal"},{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Внесение вклада"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az770-655"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"4e2e496e606376d2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/4e2e496e606376d2","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-a3126d27-532f-46ae-89c0-66428d16ba56/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006158412,"stop":1745006158435,"duration":23}},{"uid":"229e28ca98cd7894","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/229e28ca98cd7894","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-27b2a964-d3cd-4698-a9cb-7176d5a68ef4/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005971454,"stop":1745005971478,"duration":24}},{"uid":"4829d1b0c0a53e4e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/4829d1b0c0a53e4e","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-2a2c2758-faec-4137-8345-76a769339b66/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005663151,"stop":1745005663174,"duration":23}},{"uid":"953189cce2954fa5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/953189cce2954fa5","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-c5a893b7-0e30-4707-8885-51840c419536/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005089927,"stop":1745005089953,"duration":26}},{"uid":"9ac82d6bf661e457","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/9ac82d6bf661e457","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-12e26049-73de-4592-b885-99a68653685b/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744923399089,"stop":1744923399114,"duration":25}},{"uid":"54e6f86c95a703de","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/54e6f86c95a703de","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-cdd2f14e-1183-44cf-bd7f-2d427ed52aa2/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744850340206,"stop":1744850340231,"duration":25}},{"uid":"a388546d11b44621","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/a388546d11b44621","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-350637ea-4ef6-47d3-aef1-f3930c986a10/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744849899990,"stop":1744849900013,"duration":23}}]},"tags":["request","negative"]},"source":"37468c54dca22732.json","parameterValues":[]}