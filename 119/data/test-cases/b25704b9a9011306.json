{"uid":"b25704b9a9011306","name":"Тест удаления несуществующего ID из избранного","fullName":"tests.user.test_user_api.TestUserAPI#test_remove_from_favourites_not_found","historyId":"a824f132e0d4f3dbee701c192815afe3","time":{"start":1755507569950,"stop":1755507569968,"duration":18},"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","descriptionHtml":"<p>Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fd4f3e23e30>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fd4f3c0d8c0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fd4f3c0d8c0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755507567538,"stop":1755507567538,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755507567539,"stop":1755507567539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755507567539,"stop":1755507568016,"duration":477},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755507567539,"stop":1755507567539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755507567539,"stop":1755507567539,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755507568028,"stop":1755507568060,"duration":32},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755507568060,"stop":1755507568061,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1755507568061,"stop":1755507568061,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1755507569095,"stop":1755507569126,"duration":31},"status":"failed","statusMessage":"Failed: КРИТИЧЕСКАЯ ОШИБКА: He удалось выполнить сессионный логин для пользователя testUser4@test.com. Ошибка: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/app/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n    ~~~~~~~~~~~~~~^^^^^^^^^^^\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/app/.venv/lib/python3.13/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/fixtures.py\", line 1195, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/fixtures.py\", line 929, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n  File \"/app/tests/conftest.py\", line 109, in auth_token_fixture\n    pytest.fail(\n    ~~~~~~~~~~~^\n        f\"КРИТИЧЕСКАЯ ОШИБКА: He удалось выполнить сессионный логин для пользователя \"\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        f\"{TEST_USER_LOGIN}. Ошибка: {e}\",\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n        pytrace=False,\n        ^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/.venv/lib/python3.13/site-packages/_pytest/outcomes.py\", line 177, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n","steps":[],"attachments":[{"uid":"782963d03fb50ab7","name":"Status Code: 500","source":"782963d03fb50ab7.txt","type":"text/plain","size":3},{"uid":"956d8af8c3d6f17b","name":"Request URL","source":"956d8af8c3d6f17b.uri","type":"text/uri-list","size":30},{"uid":"cf013f79b251a29c","name":"Response Headers (JSON)","source":"cf013f79b251a29c.json","type":"application/json","size":309},{"uid":"212ac173caff8c3","name":"Response Body (Text)","source":"212ac173caff8c3.txt","type":"text/plain","size":20},{"uid":"26d356a01476f0d8","name":"Status response code: 500 (Expected: 200)","source":"26d356a01476f0d8.txt","type":"text/plain","size":3}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},{"name":"auth_token","time":{"start":1755507569149,"stop":1755507569227,"duration":78},"status":"passed","steps":[],"attachments":[{"uid":"c5a4b4fae1768492","name":"Status Code: 200","source":"c5a4b4fae1768492.txt","type":"text/plain","size":3},{"uid":"3e30e3f19ddf48a","name":"Request URL","source":"3e30e3f19ddf48a.uri","type":"text/uri-list","size":30},{"uid":"490277a2e21bf6e1","name":"Response Headers (JSON)","source":"490277a2e21bf6e1.json","type":"application/json","size":317},{"uid":"881bf69c648b21ad","name":"Response Body (JSON)","source":"881bf69c648b21ad.json","type":"application/json","size":224},{"uid":"aa37e8c3636ff876","name":"Status response code: 200 (Expected: 200)","source":"aa37e8c3636ff876.txt","type":"text/plain","size":3},{"uid":"c85bacc6aa997356","name":"Body of the answer (failed by AuthSuccessResponse)","source":"c85bacc6aa997356.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1755507569943,"stop":1755507569949,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1755507569949,"stop":1755507569950,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1755507569949,"stop":1755507569949,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fd4f3e23e30>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fd4f3c0d8c0>\n\n    @allure.feature(\"Избранное пользователя (DELETE /api/user/favourites/{id})\")\n    @allure.story(\"Удаление из избранного\")\n    @allure.title(\"Тест удаления несуществующего ID из избранного\")\n    @allure.description(\n        \"Проверяем, что при попытке удалить несуществующий ID возвращается ошибка 400.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_remove_from_favourites_not_found(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка удаления несуществующего запроса из избранного.\n    \n        Ожидаемый результат: статус 400 Bad Request .\n        \"\"\"\n        logger.info(\n            \"Тест: Удаление несуществующего ID из избранного (DELETE .../%s)\", NON_EXISTENT_ID\n        )\n>       response = authenticated_user_client.remove_from_favourites(\n            request_id=NON_EXISTENT_ID, expected_status=400\n        )  # type: ignore\n\ntests/user/test_user_api.py:156: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:82: in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fd4f3c0d8c0>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f' status=200 status_text='OK'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nE       Body of the answer:\nE       Request is removed form Favourites successfully.\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Удаление запроса из избранного","time":{"start":1755507569951,"stop":1755507569967,"duration":16},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 82, in remove_from_favourites\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"7d4daabdaeba2f3e","name":"Status Code: 200","source":"7d4daabdaeba2f3e.txt","type":"text/plain","size":3},{"uid":"e89c877c26b5ff9e","name":"Request URL","source":"e89c877c26b5ff9e.uri","type":"text/uri-list","size":91},{"uid":"3b6b2361e9e924ae","name":"Response Headers (JSON)","source":"3b6b2361e9e924ae.json","type":"application/json","size":309},{"uid":"9c50d91f752a3cb8","name":"Response Body (Text)","source":"9c50d91f752a3cb8.txt","type":"text/plain","size":48},{"uid":"f05fe3745254a9e0","name":"Status response code: 200 (Expected: 400)","source":"f05fe3745254a9e0.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"8c5d70add9529ff5","name":"log","source":"8c5d70add9529ff5.txt","type":"text/plain","size":6412},{"uid":"b9b6208a2a7ead71","name":"stderr","source":"b9b6208a2a7ead71.txt","type":"text/plain","size":7355}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1755507569982,"stop":1755507569986,"duration":4},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1755507569989,"stop":1755507569992,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755507569992,"stop":1755507570000,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Избранное пользователя (DELETE /api/user/favourites/{id})"},{"name":"story","value":"Удаление из избранного"},{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"de3a76cd59601e75","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755507569901,"stop":1755507569918,"duration":17}},{"uid":"da2b84eb8df30044","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755507569841,"stop":1755507569870,"duration":29}},{"uid":"96fca17e49225178","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nPlanned Server Error","time":{"start":1755507569771,"stop":1755507569797,"duration":26}},{"uid":"9db4dbd024c18786","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755507569696,"stop":1755507569725,"duration":29}},{"uid":"d2ce8e629ae8d711","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 200. URL: http://localhost:4040/api/user/favourites/non-existent-d8b90eed-4dbe-4e52-a915-5a36ec145d7f\nBody of the answer:\nRequest is removed form Favourites successfully.","time":{"start":1755507569615,"stop":1755507569646,"duration":31}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","user"]},"source":"b25704b9a9011306.json","parameterValues":[]}