{"uid":"8ebae8318cf90698","name":"Тест неуспешного входа: Пустая строка в поле password","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"e532b4087c5da060e67f6e1cdb223a91","time":{"start":1745297304004,"stop":1745297304098,"duration":94},"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле password","descriptionHtml":"<p>Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле password</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7fbe8786af50>\nauth_client = <api.auth.client.AuthClient object at 0x7fbe875c4980>\npayload_dict = {'login': 'testUser4@test.com', 'password': ''}\nexpected_status = 400, description = 'Пустая строка в поле password'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745297302582,"stop":1745297302582,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745297302582,"stop":1745297302582,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745297302583,"stop":1745297302583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745297302583,"stop":1745297302583,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745297302583,"stop":1745297303007,"duration":424},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745297303008,"stop":1745297303034,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745297303034,"stop":1745297303035,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745297303035,"stop":1745297303035,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле password","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7fbe8786af50>\nauth_client = <api.auth.client.AuthClient object at 0x7fbe875c4980>\npayload_dict = {'login': 'testUser4@test.com', 'password': ''}\nexpected_status = 400, description = 'Пустая строка в поле password'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","steps":[],"attachments":[{"uid":"60ddfc53ab392a9a","name":"Status Code: 500","source":"60ddfc53ab392a9a.txt","type":"text/plain","size":3},{"uid":"49977e4008aaf26e","name":"Request URL","source":"49977e4008aaf26e.uri","type":"text/uri-list","size":39},{"uid":"c8f41314ba4fef55","name":"Response Headers (JSON)","source":"c8f41314ba4fef55.json","type":"application/json","size":309},{"uid":"b782f44dc64d7a1a","name":"Response Body (Text)","source":"b782f44dc64d7a1a.txt","type":"text/plain","size":20},{"uid":"82d4df2921b5f0ba","name":"log","source":"82d4df2921b5f0ba.txt","type":"text/plain","size":1990},{"uid":"bb78fe331579ad1c","name":"stderr","source":"bb78fe331579ad1c.txt","type":"text/plain","size":2393}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745297306882,"stop":1745297306890,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745297306891,"stop":1745297306898,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Аутентификация"},{"name":"severity","value":"normal"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"story","value":"Неуспешный вход - Некорректное тело запроса"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az736-452"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Пустая строка в поле password'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'login': 'testUser4@test.com', 'password': ''}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"7db4b775c6f164cd","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297303924,"stop":1745297303972,"duration":48}},{"uid":"29ccca6c350e5d88","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297303842,"stop":1745297303895,"duration":53}},{"uid":"e1b14335dd52b6f2","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297303763,"stop":1745297303817,"duration":54}},{"uid":"2c64b2c6f5cd30df","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297303670,"stop":1745297303739,"duration":69}},{"uid":"7eb192ffc48e553","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745297303558,"stop":1745297303644,"duration":86}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["negative","auth"]},"source":"8ebae8318cf90698.json","parameterValues":["'Пустая строка в поле password'","400","{'login': 'testUser4@test.com', 'password': ''}"]}