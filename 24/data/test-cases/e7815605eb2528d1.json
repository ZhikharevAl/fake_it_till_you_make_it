{"uid":"e7815605eb2528d1","name":"test_login_failure_invalid_credentials[invalid_login_and_pass_xfail]","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_failure_invalid_credentials","historyId":"e303a18a2e9070f84bb5e52f5e0bd567","time":{"start":1744339367593,"stop":1744339367626,"duration":33},"description":"\nVerify unsuccessful authorization with incorrect credentials.\n\nExpected result: status code 400 Bad Request.\n","descriptionHtml":"<p>Verify unsuccessful authorization with incorrect credentials.</p>\n<p>Expected result: status code 400 Bad Request.</p>\n","status":"skipped","statusMessage":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f9bd20cc3e0>\nauth_client = <api.auth.client.AuthClient object at 0x7f9bd1fb2900>\nlogin = 'nonexistent.user@example.com', password = 'wrongPassword'\nexpected_status = 400, description = 'Wrong login, wrong password'\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Correct login, wrong password\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Incorrect login, correct password\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Wrong login, wrong password\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"invalid_login_and_pass_xfail\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Verify unsuccessful authorization with incorrect credentials.\n    \n        Expected result: status code 400 Bad Request.\n        \"\"\"\n        logger.info(\"\\nTest: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:53: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f9bd1fb2900>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1744339367167,"stop":1744339367168,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1744339367168,"stop":1744339367168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1744339367168,"stop":1744339367168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1744339367168,"stop":1744339367168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1744339367168,"stop":1744339367424,"duration":256},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1744339367424,"stop":1744339367443,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1744339367443,"stop":1744339367444,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1744339367444,"stop":1744339367444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerify unsuccessful authorization with incorrect credentials.\n\nExpected result: status code 400 Bad Request.\n","status":"skipped","statusMessage":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f9bd20cc3e0>\nauth_client = <api.auth.client.AuthClient object at 0x7f9bd1fb2900>\nlogin = 'nonexistent.user@example.com', password = 'wrongPassword'\nexpected_status = 400, description = 'Wrong login, wrong password'\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Correct login, wrong password\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Incorrect login, correct password\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Wrong login, wrong password\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"invalid_login_and_pass_xfail\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Verify unsuccessful authorization with incorrect credentials.\n    \n        Expected result: status code 400 Bad Request.\n        \"\"\"\n        logger.info(\"\\nTest: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:53: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f9bd1fb2900>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"203e99a689c31e61","name":"API Response","source":"203e99a689c31e61.txt","type":"text/plain","size":20},{"uid":"bbf2a94182c70f79","name":"Status Code","source":"bbf2a94182c70f79.txt","type":"text/plain","size":3},{"uid":"236b9637823f7d6a","name":"Headers","source":"236b9637823f7d6a.txt","type":"text/plain","size":309},{"uid":"4c27883073f5a138","name":"URL","source":"4c27883073f5a138.txt","type":"text/plain","size":30},{"uid":"d59aeb533e545428","name":"Status response code: 500 (Expected: 400)","source":"d59aeb533e545428.txt","type":"text/plain","size":3},{"uid":"3b9c6484fc8a84ec","name":"log","source":"3b9c6484fc8a84ec.txt","type":"text/plain","size":268},{"uid":"7cbfe904ada9c27d","name":"stderr","source":"7cbfe904ada9c27d.txt","type":"text/plain","size":201}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1744339367946,"stop":1744339367953,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1744339367954,"stop":1744339367961,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"negative"},{"name":"tag","value":"@pytest.mark.xfail(reason='API erratically returns 500 instead of 400', raises=<class 'AssertionError'>)"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1116-760"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Wrong login, wrong password'"},{"name":"expected_status","value":"400"},{"name":"login","value":"'nonexistent.user@example.com'"},{"name":"password","value":"'wrongPassword'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":5,"passed":0,"unknown":0,"total":5},"items":[{"uid":"5def6bd5f9445855","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/22//#testresult/5def6bd5f9445855","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1744244023189,"stop":1744244023221,"duration":32}},{"uid":"6a00901713b67a07","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/21//#testresult/6a00901713b67a07","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1744243579737,"stop":1744243579767,"duration":30}},{"uid":"b878e22f0e6ccfc7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/20//#testresult/b878e22f0e6ccfc7","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1744243348334,"stop":1744243348364,"duration":30}},{"uid":"d812d08277892574","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/19//#testresult/d812d08277892574","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1744242336411,"stop":1744242336441,"duration":30}}]},"tags":["@pytest.mark.xfail(reason='API erratically returns 500 instead of 400', raises=<class 'AssertionError'>)","negative","auth"]},"source":"e7815605eb2528d1.json","parameterValues":["'Wrong login, wrong password'","400","'nonexistent.user@example.com'","'wrongPassword'"]}