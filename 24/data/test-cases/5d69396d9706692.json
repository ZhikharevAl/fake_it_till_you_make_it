{"uid":"5d69396d9706692","name":"test_login_malformed_payload[missing_password_xfail]","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"d6083c355ddd24c2e73e7a89e0116e35","time":{"start":1744339367640,"stop":1744339367665,"duration":25},"description":"\nVerify API behavior with malformed payload.\n\nExpected result: status code 400 Bad Request.\n","descriptionHtml":"<p>Verify API behavior with malformed payload.</p>\n<p>Expected result: status code 400 Bad Request.</p>\n","status":"skipped","statusMessage":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f9bd20cc770>\nauth_client = <api.auth.client.AuthClient object at 0x7f9bd1fb2900>\npayload_dict = {'login': 'testUser4@test.com'}, expected_status = 400\ndescription = 'No password field'\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"No password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"missing_password_xfail\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"No login field\",\n                id=\"missing_login_400\",\n            ),\n            pytest.param({}, 400, \"Empty request body\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Empty string in the login field\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Empty string in the password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"empty_pass_str_xfail\",\n            ),\n            pytest.param(\n                {\"login\": \"not email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Incorrect login format (not email)\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"bad_login_format_xfail\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Verify API behavior with malformed payload.\n    \n        Expected result: status code 400 Bad Request.\n        \"\"\"\n        logger.info(\"\\nTest: %s\", description)\n        response = auth_client.http.post(endpoint=auth_client.AUTH_ENDPOINT, json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Expected status {expected_status}, got {response.status}\"\n        )\nE       AssertionError: Expected status 400, got 500\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:131: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1744339367167,"stop":1744339367168,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1744339367168,"stop":1744339367168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1744339367168,"stop":1744339367168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1744339367168,"stop":1744339367168,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1744339367168,"stop":1744339367424,"duration":256},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1744339367424,"stop":1744339367443,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1744339367443,"stop":1744339367444,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1744339367444,"stop":1744339367444,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nVerify API behavior with malformed payload.\n\nExpected result: status code 400 Bad Request.\n","status":"skipped","statusMessage":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f9bd20cc770>\nauth_client = <api.auth.client.AuthClient object at 0x7f9bd1fb2900>\npayload_dict = {'login': 'testUser4@test.com'}, expected_status = 400\ndescription = 'No password field'\n\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"No password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"missing_password_xfail\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"No login field\",\n                id=\"missing_login_400\",\n            ),\n            pytest.param({}, 400, \"Empty request body\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Empty string in the login field\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Empty string in the password field\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"empty_pass_str_xfail\",\n            ),\n            pytest.param(\n                {\"login\": \"not email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Incorrect login format (not email)\",\n                marks=pytest.mark.xfail(\n                    reason=\"API erratically returns 500 instead of 400\", raises=AssertionError\n                ),\n                id=\"bad_login_format_xfail\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Verify API behavior with malformed payload.\n    \n        Expected result: status code 400 Bad Request.\n        \"\"\"\n        logger.info(\"\\nTest: %s\", description)\n        response = auth_client.http.post(endpoint=auth_client.AUTH_ENDPOINT, json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Expected status {expected_status}, got {response.status}\"\n        )\nE       AssertionError: Expected status 400, got 500\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:131: AssertionError","steps":[],"attachments":[{"uid":"9a4ff1bb72a704b1","name":"API Response","source":"9a4ff1bb72a704b1.txt","type":"text/plain","size":1033},{"uid":"124ad4f85bef0e15","name":"Status Code","source":"124ad4f85bef0e15.txt","type":"text/plain","size":3},{"uid":"fb99303d2431a9e3","name":"Headers","source":"fb99303d2431a9e3.txt","type":"text/plain","size":353},{"uid":"299e402e4468a66d","name":"URL","source":"299e402e4468a66d.txt","type":"text/plain","size":30},{"uid":"f6f8057c8cc213d4","name":"log","source":"f6f8057c8cc213d4.txt","type":"text/plain","size":259},{"uid":"84aa0833870450a5","name":"stderr","source":"84aa0833870450a5.txt","type":"text/plain","size":191}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1744339367946,"stop":1744339367953,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1744339367954,"stop":1744339367961,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"negative"},{"name":"tag","value":"@pytest.mark.xfail(reason='API erratically returns 500 instead of 400', raises=<class 'AssertionError'>)"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1116-760"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'No password field'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'login': 'testUser4@test.com'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"history":{"statistic":{"failed":0,"broken":0,"skipped":5,"passed":0,"unknown":0,"total":5},"items":[{"uid":"acb57a20ba957877","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/22//#testresult/acb57a20ba957877","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744244023235,"stop":1744244023260,"duration":25}},{"uid":"4e4312741306c317","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/21//#testresult/4e4312741306c317","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744243579782,"stop":1744243579807,"duration":25}},{"uid":"9e62b1f952123dde","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/20//#testresult/9e62b1f952123dde","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744243348381,"stop":1744243348408,"duration":27}},{"uid":"f94aa01fb8cc3231","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/19//#testresult/f94aa01fb8cc3231","status":"skipped","statusDetails":"XFAIL API erratically returns 500 instead of 400\n\nAssertionError: Expected status 400, got 500\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>.status","time":{"start":1744242336458,"stop":1744242336483,"duration":25}}]},"tags":["@pytest.mark.xfail(reason='API erratically returns 500 instead of 400', raises=<class 'AssertionError'>)","negative","auth"]},"source":"5d69396d9706692.json","parameterValues":["'No password field'","400","{'login': 'testUser4@test.com'}"]}