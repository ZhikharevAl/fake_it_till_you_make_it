{"uid":"dbe047d3d458127c","name":"Тест успешного получения деталей существующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_success","historyId":"848c3990855d944f629b42a62406a4ac","time":{"start":1745180151737,"stop":1745180151805,"duration":68},"description":"Проверяем получение деталей запроса по существующему ID и валидируем поля.","descriptionHtml":"<p>Проверяем получение деталей запроса по существующему ID и валидируем поля.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fbd405f4b90>\nrequest_client = <api.request.client.RequestClient object at 0x7fbd40431d30>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест успешного получения деталей существующего запроса\")\n    @allure.description(\n        \"Проверяем получение деталей запроса по существующему ID и валидируем поля.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_get_request_details_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения деталей существующего запроса.\n    \n        Ожидаемый результат: статус 200 и объект HelpRequestData c корректными полями.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное получение деталей запроса (GET /api/request/%s)\", EXISTING_REQUEST_ID\n        )\n>       response = request_client.get_request_details(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fbd40431d30>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.request.models.HelpRequestData'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745180149398,"stop":1745180149399,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745180149399,"stop":1745180149399,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745180149401,"stop":1745180149854,"duration":453},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745180149401,"stop":1745180149401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745180149401,"stop":1745180149401,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745180149855,"stop":1745180149882,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745180149882,"stop":1745180149883,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745180151228,"stop":1745180151229,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение деталей запроса по существующему ID и валидируем поля.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fbd405f4b90>\nrequest_client = <api.request.client.RequestClient object at 0x7fbd40431d30>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест успешного получения деталей существующего запроса\")\n    @allure.description(\n        \"Проверяем получение деталей запроса по существующему ID и валидируем поля.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_get_request_details_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения деталей существующего запроса.\n    \n        Ожидаемый результат: статус 200 и объект HelpRequestData c корректными полями.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное получение деталей запроса (GET /api/request/%s)\", EXISTING_REQUEST_ID\n        )\n>       response = request_client.get_request_details(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fbd40431d30>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.request.models.HelpRequestData'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='request-id-1'","time":{"start":1745180151738,"stop":1745180151804,"duration":66},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"e2dcbb200190966","name":"Status Code: 500","source":"e2dcbb200190966.txt","type":"text/plain","size":3},{"uid":"3d77789f5035279e","name":"Request URL","source":"3d77789f5035279e.uri","type":"text/uri-list","size":46},{"uid":"cd1e930154c126da","name":"Response Headers (JSON)","source":"cd1e930154c126da.json","type":"application/json","size":309},{"uid":"4a2c121c52c2ecc8","name":"Response Body (Text)","source":"4a2c121c52c2ecc8.txt","type":"text/plain","size":20},{"uid":"d5745429bd7a7f26","name":"Status response code: 500 (Expected: 200)","source":"d5745429bd7a7f26.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'request-id-1'"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"d6fa7f9ee8861748","name":"log","source":"d6fa7f9ee8861748.txt","type":"text/plain","size":3380},{"uid":"6a42544734ede1ad","name":"stderr","source":"6a42544734ede1ad.txt","type":"text/plain","size":3978}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745180153513,"stop":1745180153521,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745180153522,"stop":1745180153529,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение деталей"},{"name":"epic","value":"Запросы помощи"},{"name":"severity","value":"normal"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"tag","value":"positive"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az1146-135"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"737ba574a684fde7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","time":{"start":1745180151633,"stop":1745180151703,"duration":70}},{"uid":"89f0c39490fec80d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745180151542,"stop":1745180151597,"duration":55}},{"uid":"1b4c51783c23ec27","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745180151446,"stop":1745180151504,"duration":58}},{"uid":"9fddcda6ed7e4b35","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","time":{"start":1745180151344,"stop":1745180151410,"duration":66}},{"uid":"27455f084665f31b","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745180151235,"stop":1745180151310,"duration":75}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":23,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":23},"items":[{"uid":"1dfd33df48100f06","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/52//#testresult/1dfd33df48100f06","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745173181945,"stop":1745173181978,"duration":33}},{"uid":"18e6fdf0e763402","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/51//#testresult/18e6fdf0e763402","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745173152989,"stop":1745173153011,"duration":22}},{"uid":"1012e244ffc19ad7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/50//#testresult/1012e244ffc19ad7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745171168741,"stop":1745171168765,"duration":24}},{"uid":"c42e183a83b3aa1c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/49//#testresult/c42e183a83b3aa1c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745016104185,"stop":1745016104211,"duration":26}},{"uid":"3a1b43efc52775f4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/48//#testresult/3a1b43efc52775f4","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745015892012,"stop":1745015892040,"duration":28}},{"uid":"afdf67c562f7b69a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/47//#testresult/afdf67c562f7b69a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745014809622,"stop":1745014809647,"duration":25}},{"uid":"c36059ab95ccdaea","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/46//#testresult/c36059ab95ccdaea","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745014787750,"stop":1745014787785,"duration":35}},{"uid":"e43e1165961d5f86","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/45//#testresult/e43e1165961d5f86","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745013912632,"stop":1745013912655,"duration":23}},{"uid":"f6ea948eb54d206a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/f6ea948eb54d206a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745013767354,"stop":1745013767377,"duration":23}},{"uid":"e0c7a9daee529b35","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/e0c7a9daee529b35","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745007983900,"stop":1745007983923,"duration":23}},{"uid":"366cca971be50977","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/366cca971be50977","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745007717778,"stop":1745007717812,"duration":34}},{"uid":"2523b6822c596f13","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/2523b6822c596f13","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745007086636,"stop":1745007086661,"duration":25}},{"uid":"9afe2dea23bfdf18","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/9afe2dea23bfdf18","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006982812,"stop":1745006982836,"duration":24}},{"uid":"2e7125c03edb1af6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/2e7125c03edb1af6","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006650137,"stop":1745006650161,"duration":24}},{"uid":"bbd589824adb3e70","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/bbd589824adb3e70","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006447616,"stop":1745006447642,"duration":26}},{"uid":"d8557ce68df50ab7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/d8557ce68df50ab7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006158254,"stop":1745006158278,"duration":24}},{"uid":"5fdedaff9c52ffef","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/5fdedaff9c52ffef","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005971285,"stop":1745005971309,"duration":24}},{"uid":"23c517c665fe626a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/23c517c665fe626a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005662982,"stop":1745005663015,"duration":33}},{"uid":"2282d242eba3c74c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/2282d242eba3c74c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005089751,"stop":1745005089777,"duration":26}},{"uid":"3b6b861f0c4ae2b5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/3b6b861f0c4ae2b5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744923398921,"stop":1744923398946,"duration":25}}]},"tags":["request","positive"]},"source":"dbe047d3d458127c.json","parameterValues":[]}