{"uid":"cafe89f392c10663","name":"Тест получения деталей несуществующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_not_found","historyId":"26961aa1f740e62b43d9b1c13642c2bc","time":{"start":1745295989524,"stop":1745295989582,"duration":58},"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","descriptionHtml":"<p>Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f4d5f71c9d0>\nrequest_client = <api.request.client.RequestClient object at 0x7f4d5f4ba900>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f4d5f4ba900>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745295986919,"stop":1745295986919,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745295986919,"stop":1745295986920,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745295986920,"stop":1745295987391,"duration":471},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745295986920,"stop":1745295986920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745295986920,"stop":1745295986920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745295987391,"stop":1745295987419,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745295987419,"stop":1745295987420,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745295989044,"stop":1745295989044,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f4d5f71c9d0>\nrequest_client = <api.request.client.RequestClient object at 0x7f4d5f4ba900>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f4d5f4ba900>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b'","time":{"start":1745295989525,"stop":1745295989580,"duration":55},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"542a87a13f054e66","name":"Status Code: 403","source":"542a87a13f054e66.txt","type":"text/plain","size":3},{"uid":"aae68189dc529f43","name":"Request URL","source":"aae68189dc529f43.uri","type":"text/uri-list","size":83},{"uid":"52e81647042c3bc9","name":"Response Headers (JSON)","source":"52e81647042c3bc9.json","type":"application/json","size":316},{"uid":"2ace93e69b1d793d","name":"Response Body (JSON)","source":"2ace93e69b1d793d.json","type":"application/json","size":39},{"uid":"eb11c466d88f2681","name":"Status response code: 403 (Expected: 404)","source":"eb11c466d88f2681.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"bb84f99fce502a2b","name":"log","source":"bb84f99fce502a2b.txt","type":"text/plain","size":3947},{"uid":"f4e8d4d2bf39e4bf","name":"stderr","source":"f4e8d4d2bf39e4bf.txt","type":"text/plain","size":4473}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745295991016,"stop":1745295991025,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745295991026,"stop":1745295991034,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Получение деталей"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az2245-725"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"6b0711fa846dbd1","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295989420,"stop":1745295989479,"duration":59}},{"uid":"84253589acfc27b4","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295989327,"stop":1745295989385,"duration":58}},{"uid":"91ad93d3b1349ac0","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295989235,"stop":1745295989291,"duration":56}},{"uid":"429c47245db849a","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295989142,"stop":1745295989196,"duration":54}},{"uid":"d23c002e39fdced5","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-52cbcee9-66e7-45d0-bb51-a7a456113e0b\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295989046,"stop":1745295989103,"duration":57}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"59bbe71d38bf9a82","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/67//#testresult/59bbe71d38bf9a82","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-0e308b67-537e-4a73-959b-e851829c7659\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745295757447,"stop":1745295757504,"duration":57}}]},"tags":["request","negative"]},"source":"cafe89f392c10663.json","parameterValues":[]}