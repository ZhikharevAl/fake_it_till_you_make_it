{"uid":"21eb60d045fcbc93","name":"Тест внесения вклада в несуществующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_not_found","historyId":"f35ec1402f8fdf4c2858bcd70942d7cb","time":{"start":1745295989760,"stop":1745295989815,"duration":55},"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","descriptionHtml":"<p>Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fa0a40c09e0>\nrequest_client = <api.request.client.RequestClient object at 0x7fa09fe45a90>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fa09fe45a90>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745295986916,"stop":1745295986917,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745295986917,"stop":1745295986917,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745295986918,"stop":1745295986918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745295986918,"stop":1745295987388,"duration":470},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745295986918,"stop":1745295986918,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745295987388,"stop":1745295987414,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745295987415,"stop":1745295987415,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745295988822,"stop":1745295988823,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fa0a40c09e0>\nrequest_client = <api.request.client.RequestClient object at 0x7fa09fe45a90>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fa09fe45a90>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='non-existent-a366711a-a25d-4a32-b14c-54fb919e422f'","time":{"start":1745295989761,"stop":1745295989814,"duration":53},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-a366711a-a25d-4a32-b14c-54fb919e422f/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"ac3586ae39e1f947","name":"Status Code: 403","source":"ac3586ae39e1f947.txt","type":"text/plain","size":3},{"uid":"2c19a0046bdf2e84","name":"Request URL","source":"2c19a0046bdf2e84.uri","type":"text/uri-list","size":96},{"uid":"25ca754c4a27b06c","name":"Response Headers (JSON)","source":"25ca754c4a27b06c.json","type":"application/json","size":316},{"uid":"300b2646c8a26cc7","name":"Response Body (JSON)","source":"300b2646c8a26cc7.json","type":"application/json","size":39},{"uid":"572b923e05b596f4","name":"Status response code: 403 (Expected: 404)","source":"572b923e05b596f4.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-a366711a-a25d-4a32-b14c-54fb919e422f'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6c8a8ef3efb47b99","name":"log","source":"6c8a8ef3efb47b99.txt","type":"text/plain","size":2707},{"uid":"23fb4335cf5f3552","name":"stderr","source":"23fb4335cf5f3552.txt","type":"text/plain","size":3044}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745295991144,"stop":1745295991153,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745295991154,"stop":1745295991163,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Внесение вклада"},{"name":"severity","value":"normal"},{"name":"epic","value":"Запросы помощи"},{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az2245-725"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["request","negative"]},"source":"21eb60d045fcbc93.json","parameterValues":[]}