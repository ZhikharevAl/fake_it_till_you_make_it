{"uid":"5fdedaff9c52ffef","name":"Тест успешного получения деталей существующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_success","historyId":"848c3990855d944f629b42a62406a4ac","time":{"start":1745005971285,"stop":1745005971309,"duration":24},"description":"Проверяем получение деталей запроса по существующему ID и валидируем поля.","descriptionHtml":"<p>Проверяем получение деталей запроса по существующему ID и валидируем поля.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f5076dcc050>\nrequest_client = <api.request.client.RequestClient object at 0x7f5076e47e00>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест успешного получения деталей существующего запроса\")\n    @allure.description(\n        \"Проверяем получение деталей запроса по существующему ID и валидируем поля.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_get_request_details_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения деталей существующего запроса.\n    \n        Ожидаемый результат: статус 200 и объект HelpRequestData c корректными полями.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное получение деталей запроса (GET /api/request/%s)\", EXISTING_REQUEST_ID\n        )\n>       response = request_client.get_request_details(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f5076e47e00>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1' status=403 status_text='Forbidden'>\nexpected_status = 200\nresponse_model = <class 'api.request.models.HelpRequestData'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745005970452,"stop":1745005970452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745005970452,"stop":1745005970452,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745005970453,"stop":1745005970453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745005970453,"stop":1745005970713,"duration":260},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745005970453,"stop":1745005970453,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745005970713,"stop":1745005970732,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745005970732,"stop":1745005970733,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745005971243,"stop":1745005971244,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение деталей запроса по существующему ID и валидируем поля.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f5076dcc050>\nrequest_client = <api.request.client.RequestClient object at 0x7f5076e47e00>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест успешного получения деталей существующего запроса\")\n    @allure.description(\n        \"Проверяем получение деталей запроса по существующему ID и валидируем поля.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_get_request_details_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения деталей существующего запроса.\n    \n        Ожидаемый результат: статус 200 и объект HelpRequestData c корректными полями.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное получение деталей запроса (GET /api/request/%s)\", EXISTING_REQUEST_ID\n        )\n>       response = request_client.get_request_details(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f5076e47e00>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1' status=403 status_text='Forbidden'>\nexpected_status = 200\nresponse_model = <class 'api.request.models.HelpRequestData'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='request-id-1'","time":{"start":1745005971286,"stop":1745005971308,"duration":22},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"c2807ce65124e8c3","name":"Status Code: 403","source":"c2807ce65124e8c3.txt","type":"text/plain","size":3},{"uid":"ffeee19b682239ff","name":"Request URL","source":"ffeee19b682239ff.uri","type":"text/uri-list","size":46},{"uid":"3556c51043c34b46","name":"Response Headers (JSON)","source":"3556c51043c34b46.json","type":"application/json","size":316},{"uid":"ab8cd0247fcf878b","name":"Response Body (JSON)","source":"ab8cd0247fcf878b.json","type":"application/json","size":39},{"uid":"7afa8a6abf7f238","name":"Status response code: 403 (Expected: 200)","source":"7afa8a6abf7f238.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'request-id-1'"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"bb50605663627187","name":"log","source":"bb50605663627187.txt","type":"text/plain","size":481},{"uid":"c7c6ca27457fc863","name":"stderr","source":"c7c6ca27457fc863.txt","type":"text/plain","size":566}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745005971982,"stop":1745005971988,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745005971989,"stop":1745005971997,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение деталей"},{"name":"epic","value":"Запросы помощи"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"severity","value":"normal"},{"name":"tag","value":"positive"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az520-964"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"23c517c665fe626a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/23c517c665fe626a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005662982,"stop":1745005663015,"duration":33}},{"uid":"2282d242eba3c74c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/2282d242eba3c74c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005089751,"stop":1745005089777,"duration":26}},{"uid":"3b6b861f0c4ae2b5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/3b6b861f0c4ae2b5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744923398921,"stop":1744923398946,"duration":25}},{"uid":"7135d3c1e5e1f66a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/7135d3c1e5e1f66a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744850340033,"stop":1744850340059,"duration":26}},{"uid":"1424baccda49c766","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/1424baccda49c766","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1744849899823,"stop":1744849899851,"duration":28}}]},"tags":["request","positive"]},"source":"5fdedaff9c52ffef.json","parameterValues":[]}