{"uid":"bac06cf746427857","name":"Тест неуспешного входа: Неверный пароль (c моком)","fullName":"tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked#test_login_failure_mocked","historyId":"208f65b13ec1ada36bb2307af14759e3","time":{"start":1745295756352,"stop":1745295756435,"duration":83},"description":"Проверяем получение ответа 400 (мок) при: Неверный пароль","descriptionHtml":"<p>Проверяем получение ответа 400 (мок) при: Неверный пароль</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked object at 0x7fa2011ac7d0>\nmocked_auth_client = <api.auth.client.AuthClient object at 0x7fa200d13250>\nlogin = 'testUser4@test.com', password = 'wrongPassword'\ndescription = 'Неверный пароль'\n\n    @allure.story(\"Неуспешный вход (Мок)\")\n    @allure.title(\"Тест неуспешного входа: {description} (c моком)\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                \"Неверный пароль\",\n                id=\"invalid_password_mock\",\n            ),\n            pytest.param(\n                \"nonexistent@example.com\",\n                TEST_USER_PASSWORD,\n                \"Неверный логин\",\n                id=\"invalid_login_mock\",\n            ),\n            pytest.param(\n                \"nonexistent@example.com\",\n                INVALID_USER_PASSWORD,\n                \"Неверные логин и пароль\",\n                id=\"invalid_both_mock\",\n            ),\n        ],\n    )\n    def test_login_failure_mocked(\n        self,\n        mocked_auth_client: AuthClient,\n        login: str,\n        password: str,\n        description: str,\n    ) -> None:\n        \"\"\"Проверка неуспешного входа c мокированным ответом 400.\"\"\"\n        allure.dynamic.description(f\"Проверяем получение ответа 400 (мок) при: {description}\")\n        logger.info(\"Тест: %s (Мок)\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = mocked_auth_client.login(payload=payload, expected_status=400)\n\ntests/auth/test_auth_api_mocked.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7fa200d13250>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745295754560,"stop":1745295754560,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745295754561,"stop":1745295754561,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745295754561,"stop":1745295754561,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745295754561,"stop":1745295754562,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745295754562,"stop":1745295754988,"duration":426},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mockable_browser_context","time":{"start":1745295756138,"stop":1745295756322,"duration":184},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_api_request_context","time":{"start":1745295756325,"stop":1745295756350,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_http_client","time":{"start":1745295756350,"stop":1745295756350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_auth_client","time":{"start":1745295756350,"stop":1745295756350,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ответа 400 (мок) при: Неверный пароль","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked object at 0x7fa2011ac7d0>\nmocked_auth_client = <api.auth.client.AuthClient object at 0x7fa200d13250>\nlogin = 'testUser4@test.com', password = 'wrongPassword'\ndescription = 'Неверный пароль'\n\n    @allure.story(\"Неуспешный вход (Мок)\")\n    @allure.title(\"Тест неуспешного входа: {description} (c моком)\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                \"Неверный пароль\",\n                id=\"invalid_password_mock\",\n            ),\n            pytest.param(\n                \"nonexistent@example.com\",\n                TEST_USER_PASSWORD,\n                \"Неверный логин\",\n                id=\"invalid_login_mock\",\n            ),\n            pytest.param(\n                \"nonexistent@example.com\",\n                INVALID_USER_PASSWORD,\n                \"Неверные логин и пароль\",\n                id=\"invalid_both_mock\",\n            ),\n        ],\n    )\n    def test_login_failure_mocked(\n        self,\n        mocked_auth_client: AuthClient,\n        login: str,\n        password: str,\n        description: str,\n    ) -> None:\n        \"\"\"Проверка неуспешного входа c мокированным ответом 400.\"\"\"\n        allure.dynamic.description(f\"Проверяем получение ответа 400 (мок) при: {description}\")\n        logger.info(\"Тест: %s (Мок)\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = mocked_auth_client.login(payload=payload, expected_status=400)\n\ntests/auth/test_auth_api_mocked.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7fa200d13250>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"c9c60f934733985e","name":"Status Code: 500","source":"c9c60f934733985e.txt","type":"text/plain","size":3},{"uid":"1068a447f79628b2","name":"Request URL","source":"1068a447f79628b2.uri","type":"text/uri-list","size":30},{"uid":"ec867483174f60a8","name":"Response Headers (JSON)","source":"ec867483174f60a8.json","type":"application/json","size":309},{"uid":"1f6eefa79ca5af5e","name":"Response Body (Text)","source":"1f6eefa79ca5af5e.txt","type":"text/plain","size":20},{"uid":"bdff8cac80d71580","name":"Status response code: 500 (Expected: 400)","source":"bdff8cac80d71580.txt","type":"text/plain","size":3},{"uid":"d604a66802925add","name":"log","source":"d604a66802925add.txt","type":"text/plain","size":1017},{"uid":"32712951264dc3b8","name":"stderr","source":"32712951264dc3b8.txt","type":"text/plain","size":1210}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"mocked_api_request_context::0","time":{"start":1745295756454,"stop":1745295756469,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mockable_browser_context::0","time":{"start":1745295756469,"stop":1745295756549,"duration":80},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745295758413,"stop":1745295758422,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"story","value":"Неуспешный вход (Мок)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Аутентификация (Моки)"},{"name":"tag","value":"negative"},{"name":"tag","value":"mocked"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api_mocked"},{"name":"subSuite","value":"TestAuthenticationAPIMocked"},{"name":"host","value":"fv-az520-964"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api_mocked"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Неверный пароль'"},{"name":"login","value":"'testUser4@test.com'"},{"name":"password","value":"'wrongPassword'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["negative","mocked","auth"]},"source":"bac06cf746427857.json","parameterValues":["'Неверный пароль'","'testUser4@test.com'","'wrongPassword'"]}