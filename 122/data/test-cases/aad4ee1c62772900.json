{"uid":"aad4ee1c62772900","name":"Тест внесения вклада в несуществующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_not_found","historyId":"f35ec1402f8fdf4c2858bcd70942d7cb","time":{"start":1755511257414,"stop":1755511257435,"duration":21},"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","descriptionHtml":"<p>Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f59cce52470>\nrequest_client = <api.request.client.RequestClient object at 0x7f59ccb9b380>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f59ccb9b380>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755511255882,"stop":1755511255883,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755511255883,"stop":1755511255883,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755511255883,"stop":1755511255883,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755511255883,"stop":1755511255883,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755511255884,"stop":1755511256398,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755511256399,"stop":1755511256414,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755511256414,"stop":1755511256415,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1755511256796,"stop":1755511256797,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f59cce52470>\nrequest_client = <api.request.client.RequestClient object at 0x7f59ccb9b380>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f59ccb9b380>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62'","time":{"start":1755511257415,"stop":1755511257434,"duration":19},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"2fa3ebb3b7c5bf23","name":"Status Code: 403","source":"2fa3ebb3b7c5bf23.txt","type":"text/plain","size":3},{"uid":"e81c5f9548988e8f","name":"Request URL","source":"e81c5f9548988e8f.uri","type":"text/uri-list","size":96},{"uid":"4e8615beefda79df","name":"Response Headers (JSON)","source":"4e8615beefda79df.json","type":"application/json","size":316},{"uid":"48618e34890e7b7c","name":"Response Body (JSON)","source":"48618e34890e7b7c.json","type":"application/json","size":39},{"uid":"61f4dfcca72016b7","name":"Status response code: 403 (Expected: 404)","source":"61f4dfcca72016b7.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"31829ef9cf3b85f1","name":"log","source":"31829ef9cf3b85f1.txt","type":"text/plain","size":4335},{"uid":"c2165fa70d5e0e18","name":"stderr","source":"c2165fa70d5e0e18.txt","type":"text/plain","size":4888}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1755511258436,"stop":1755511258439,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755511258440,"stop":1755511258448,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Запросы помощи"},{"name":"severity","value":"normal"},{"name":"story","value":"Внесение вклада"},{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"70b0bca47a5c38e8","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755511257373,"stop":1755511257393,"duration":20}},{"uid":"b64c6ab2eb94908b","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755511257320,"stop":1755511257346,"duration":26}},{"uid":"e2a13b7ed2162859","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755511257264,"stop":1755511257288,"duration":24}},{"uid":"82e210b4ede1339f","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755511257208,"stop":1755511257231,"duration":23}},{"uid":"4129e80253238b87","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-7647a679-2d46-4b66-a82a-3cf2eec92d62/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755511257131,"stop":1755511257176,"duration":45}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"650764292674381","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/121//#testresult/650764292674381","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-60648366-602c-4501-833f-ef0c5f4d44f7/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755508617564,"stop":1755508617589,"duration":25}},{"uid":"e29e0fe2690afaf","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/120//#testresult/e29e0fe2690afaf","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3353130a-a5eb-49ae-9a4e-74aef789469c/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755508196080,"stop":1755508196101,"duration":21}},{"uid":"aed6ff97ea5fa44c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/aed6ff97ea5fa44c","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-6036a086-9ec4-4a9c-a0a5-af816c2c1c8f/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755507568917,"stop":1755507568939,"duration":22}}]},"tags":["request","negative"]},"source":"aad4ee1c62772900.json","parameterValues":[]}