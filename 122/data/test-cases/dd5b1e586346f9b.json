{"uid":"dd5b1e586346f9b","name":"Тест неуспешного входа: Пустое тело запроса","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"eb7958bd4321194f1284512d6ef1aa81","time":{"start":1755511256951,"stop":1755511256979,"duration":28},"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустое тело запроса","descriptionHtml":"<p>Проверяем, что API возвращает 400 при отправке некорректного тела: Пустое тело запроса</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f94d8460050>\nauth_client = <api.auth.client.AuthClient object at 0x7f94d3fdacf0>\npayload_dict = {}, expected_status = 400, description = 'Пустое тело запроса'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755511255882,"stop":1755511255884,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755511255884,"stop":1755511255884,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755511255885,"stop":1755511256396,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755511255885,"stop":1755511255885,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755511255885,"stop":1755511255885,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755511256396,"stop":1755511256413,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755511256413,"stop":1755511256414,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1755511256414,"stop":1755511256414,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустое тело запроса","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f94d8460050>\nauth_client = <api.auth.client.AuthClient object at 0x7f94d3fdacf0>\npayload_dict = {}, expected_status = 400, description = 'Пустое тело запроса'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nE       assert 500 == 400\nE        +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","steps":[],"attachments":[{"uid":"a5bc368cb7fe5f5e","name":"Status Code: 500","source":"a5bc368cb7fe5f5e.txt","type":"text/plain","size":3},{"uid":"50b57477658ec9d8","name":"Request URL","source":"50b57477658ec9d8.uri","type":"text/uri-list","size":39},{"uid":"90e02708bfa1a3f0","name":"Response Headers (JSON)","source":"90e02708bfa1a3f0.json","type":"application/json","size":309},{"uid":"63e38550e40c3c62","name":"Response Body (Text)","source":"63e38550e40c3c62.txt","type":"text/plain","size":20},{"uid":"68e94ab1d822ab92","name":"log","source":"68e94ab1d822ab92.txt","type":"text/plain","size":2067},{"uid":"67db7998feb48482","name":"stderr","source":"67db7998feb48482.txt","type":"text/plain","size":2494}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1755511258160,"stop":1755511258166,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755511258167,"stop":1755511258178,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"epic","value":"Аутентификация"},{"name":"story","value":"Неуспешный вход - Некорректное тело запроса"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"9-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Пустое тело запроса'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3945a5ef369cc894","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755511256902,"stop":1755511256926,"duration":24}},{"uid":"d684d9ea1c35489d","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755511256858,"stop":1755511256879,"duration":21}},{"uid":"aa6ab71a4b891948","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755511256813,"stop":1755511256836,"duration":23}},{"uid":"90bc769ebf1320a7","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1755511256772,"stop":1755511256790,"duration":18}},{"uid":"b9b2f65422713b01","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755511256727,"stop":1755511256746,"duration":19}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"b54f7998e63a2deb","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/121//#testresult/b54f7998e63a2deb","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755508617260,"stop":1755508617277,"duration":17}},{"uid":"185328ffd5767db3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/120//#testresult/185328ffd5767db3","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755508195715,"stop":1755508195754,"duration":39}},{"uid":"4cb9c50bcaed73b3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/4cb9c50bcaed73b3","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1755507568633,"stop":1755507568647,"duration":14}}]},"tags":["negative","auth"]},"source":"dd5b1e586346f9b.json","parameterValues":["'Пустое тело запроса'","400","{}"]}