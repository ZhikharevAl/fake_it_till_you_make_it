{"uid":"f3ee77b92d9cde3e","name":"Тест получения списка избранного без аутентификации","fullName":"tests.user.test_user_favourites_api.TestUserFavouritesAPI#test_get_favourites_unauthorized","historyId":"0d5ad1e4d58b7ecbade8401cb7cdc93e","time":{"start":1744767142336,"stop":1744767142365,"duration":29},"description":"Проверяем, что неавторизованный пользователь получает ошибку 403.","descriptionHtml":"<p>Проверяем, что неавторизованный пользователь получает ошибку 403.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f9e17c6c410>\nuser_client = <api.user.client.UserClient object at 0x7f9e16890910>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест получения списка избранного без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 403.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_get_favourites_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка получения списка избранного без аутентификации.\n    \n        Ожидаемый результат: статус 403 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Получение избранного без авторизации (GET /api/user/favourites)\")\n>       response = user_client.get_favourites(expected_status=403)  # Swagger 401\n\ntests/user/test_user_favourites_api.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f9e16890910>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 403, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1744767141206,"stop":1744767141206,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1744767141207,"stop":1744767141207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1744767141207,"stop":1744767141207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1744767141207,"stop":1744767141207,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1744767141207,"stop":1744767141458,"duration":251},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1744767141459,"stop":1744767141477,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1744767141477,"stop":1744767141478,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_client","time":{"start":1744767142085,"stop":1744767142086,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что неавторизованный пользователь получает ошибку 403.","status":"failed","statusMessage":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_favourites_api.TestUserFavouritesAPI object at 0x7f9e17c6c410>\nuser_client = <api.user.client.UserClient object at 0x7f9e16890910>\n\n    @allure.story(\"Получение списка избранного\")\n    @allure.title(\"Тест получения списка избранного без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 403.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_get_favourites_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка получения списка избранного без аутентификации.\n    \n        Ожидаемый результат: статус 403 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Получение избранного без авторизации (GET /api/user/favourites)\")\n>       response = user_client.get_favourites(expected_status=403)  # Swagger 401\n\ntests/user/test_user_favourites_api.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:31: in get_favourites\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f9e16890910>\nresponse = <APIResponse url='http://localhost:4040/api/user/favourites' status=500 status_text='Internal Server Error'>\nexpected_status = 403, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"1b0cfd6c8e120b68","name":"Status Code: 500","source":"1b0cfd6c8e120b68.txt","type":"text/plain","size":3},{"uid":"3fa00e51e381ae68","name":"Request URL","source":"3fa00e51e381ae68.uri","type":"text/uri-list","size":41},{"uid":"a0a68bf7856d7fcf","name":"Response Headers (JSON)","source":"a0a68bf7856d7fcf.json","type":"application/json","size":309},{"uid":"81f83615a0e9a08c","name":"Response Body (Text)","source":"81f83615a0e9a08c.txt","type":"text/plain","size":20},{"uid":"105024e3f2145eb8","name":"Status response code: 500 (Expected: 403)","source":"105024e3f2145eb8.txt","type":"text/plain","size":3},{"uid":"d889966f6755ec0c","name":"log","source":"d889966f6755ec0c.txt","type":"text/plain","size":538},{"uid":"d84f331f8da39f80","name":"stderr","source":"d84f331f8da39f80.txt","type":"text/plain","size":626}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1744767142435,"stop":1744767142441,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1744767142442,"stop":1744767142449,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение списка избранного"},{"name":"severity","value":"critical"},{"name":"tag","value":"negative"},{"name":"tag","value":"favourites"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_favourites_api"},{"name":"subSuite","value":"TestUserFavouritesAPI"},{"name":"host","value":"fv-az2022-39"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_favourites_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":6},"items":[{"uid":"3bcd68aff0ef46be","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/28//#testresult/3bcd68aff0ef46be","status":"failed","statusDetails":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744766716070,"stop":1744766716098,"duration":28}},{"uid":"82056a2a236a3ab9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/27//#testresult/82056a2a236a3ab9","status":"failed","statusDetails":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744662840867,"stop":1744662840897,"duration":30}},{"uid":"72a06fe1c4058d94","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/26//#testresult/72a06fe1c4058d94","status":"failed","statusDetails":"AssertionError: The status was pending 403, but received 500. URL: http://localhost:4040/api/user/favourites\nBody of the answer:\nPlanned Server Error","time":{"start":1744662222985,"stop":1744662223014,"duration":29}},{"uid":"1b931f6bcf7ba31e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/25//#testresult/1b931f6bcf7ba31e","status":"passed","time":{"start":1744420061492,"stop":1744420061508,"duration":16}},{"uid":"91abcaa7f641f46c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/24//#testresult/91abcaa7f641f46c","status":"passed","time":{"start":1744339367928,"stop":1744339367944,"duration":16}}]},"tags":["negative","favourites","user"]},"source":"f3ee77b92d9cde3e.json","parameterValues":[]}