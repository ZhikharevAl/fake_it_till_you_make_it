{"uid":"ed3e7884f542959f","name":"Тест внесения вклада в несуществующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_not_found","historyId":"f35ec1402f8fdf4c2858bcd70942d7cb","time":{"start":1745293351797,"stop":1745293351869,"duration":72},"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","descriptionHtml":"<p>Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f1bb4fb89e0>\nrequest_client = <api.request.client.RequestClient object at 0x7f1bb4ebe660>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f1bb4ebe660>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution' status=500 status_text='Internal Server Error'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745293348719,"stop":1745293348719,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745293348719,"stop":1745293348719,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745293348720,"stop":1745293348720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745293348720,"stop":1745293348720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745293348720,"stop":1745293349168,"duration":448},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745293349168,"stop":1745293349195,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745293349195,"stop":1745293349196,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745293350699,"stop":1745293350700,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f1bb4fb89e0>\nrequest_client = <api.request.client.RequestClient object at 0x7f1bb4ebe660>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест внесения вклада в несуществующий запрос\")\n    @allure.description(\n        \"Проверяем получение ошибки 404 при попытке внести вклад в несуществующий запрос.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_contribute_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка внесения вклада для несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Внесение вклада в несуществующий запрос (POST /api/request/%s/contribution)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f1bb4ebe660>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution' status=500 status_text='Internal Server Error'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45'","time":{"start":1745293351798,"stop":1745293351868,"duration":70},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"b481580aea5652b1","name":"Status Code: 500","source":"b481580aea5652b1.txt","type":"text/plain","size":3},{"uid":"be63643ffb4e41f3","name":"Request URL","source":"be63643ffb4e41f3.uri","type":"text/uri-list","size":96},{"uid":"261e216fa67080ce","name":"Response Headers (JSON)","source":"261e216fa67080ce.json","type":"application/json","size":309},{"uid":"a41f71ab4a2bdbb8","name":"Response Body (Text)","source":"a41f71ab4a2bdbb8.txt","type":"text/plain","size":20},{"uid":"4833e6a2aeeba1ed","name":"Status response code: 500 (Expected: 404)","source":"4833e6a2aeeba1ed.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"762f334c61bb1e15","name":"log","source":"762f334c61bb1e15.txt","type":"text/plain","size":4335},{"uid":"e4a19875a4b55610","name":"stderr","source":"e4a19875a4b55610.txt","type":"text/plain","size":4888}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745293353113,"stop":1745293353121,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745293353122,"stop":1745293353129,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Внесение вклада"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az2028-992"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"cebad5866d533788","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745293351714,"stop":1745293351764,"duration":50}},{"uid":"c7167af20a3a3e50","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745293351628,"stop":1745293351679,"duration":51}},{"uid":"6b2352e2b9c305e","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745293351539,"stop":1745293351592,"duration":53}},{"uid":"41f2233d5de0df60","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745293351450,"stop":1745293351499,"duration":49}},{"uid":"c8bc8451fb645931","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-fc3ae971-5fda-4cf7-ab0e-ceec56960a45/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1745293351307,"stop":1745293351415,"duration":108}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":3},"items":[{"uid":"20dd9e848ad1ec1a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/63//#testresult/20dd9e848ad1ec1a","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3a6b934f-721f-411d-9aa0-de6a97bbbd7c/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745291452481,"stop":1745291452535,"duration":54}},{"uid":"572c703f659aa67","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/62//#testresult/572c703f659aa67","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-3a405c66-4e9b-4dc1-9971-dbda0d5512fc/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745290946706,"stop":1745290946761,"duration":55}}]},"tags":["request","negative"]},"source":"ed3e7884f542959f.json","parameterValues":[]}