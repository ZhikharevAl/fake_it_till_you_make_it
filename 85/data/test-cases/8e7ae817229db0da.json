{"uid":"8e7ae817229db0da","name":"Тест успешного получения списка всех запросов помощи","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_all_requests_success","historyId":"5875c2fe5df957c12e3410e346b8b5a0","time":{"start":1746142752805,"stop":1746142752875,"duration":70},"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","descriptionHtml":"<p>Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fd791d02ad0>\nrequest_client = <api.request.client.RequestClient object at 0x7fd7903b6120>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fd7903b6120>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746142751100,"stop":1746142751100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746142751100,"stop":1746142751100,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746142751101,"stop":1746142751101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746142751101,"stop":1746142751620,"duration":519},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746142751101,"stop":1746142751101,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746142751620,"stop":1746142751649,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746142751649,"stop":1746142751650,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1746142752329,"stop":1746142752329,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fd791d02ad0>\nrequest_client = <api.request.client.RequestClient object at 0x7fd7903b6120>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fd7903b6120>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение всех запросов помощи","time":{"start":1746142752806,"stop":1746142752873,"duration":67},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 30, in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"89384decd0ab5a8d","name":"Status Code: 500","source":"89384decd0ab5a8d.txt","type":"text/plain","size":3},{"uid":"6ad183561698ee62","name":"Request URL","source":"6ad183561698ee62.uri","type":"text/uri-list","size":33},{"uid":"2334c1292f7c0220","name":"Response Headers (JSON)","source":"2334c1292f7c0220.json","type":"application/json","size":309},{"uid":"9e6cefdfc860e479","name":"Response Body (Text)","source":"9e6cefdfc860e479.txt","type":"text/plain","size":20},{"uid":"3603fbeace7bf069","name":"Status response code: 500 (Expected: 200)","source":"3603fbeace7bf069.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3b41d40318f1a847","name":"log","source":"3b41d40318f1a847.txt","type":"text/plain","size":2770},{"uid":"4e49e8703b29429a","name":"stderr","source":"4e49e8703b29429a.txt","type":"text/plain","size":3320}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746142754238,"stop":1746142754252,"duration":14},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746142754253,"stop":1746142754264,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Запросы помощи"},{"name":"severity","value":"normal"},{"name":"story","value":"Получение списка"},{"name":"feature","value":"Список запросов (GET /api/request)"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az523-139"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"f528930aea392e88","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746142752709,"stop":1746142752768,"duration":59}},{"uid":"7e555d1d167cbf06","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746142752613,"stop":1746142752670,"duration":57}},{"uid":"9bf284e0d9940241","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746142752519,"stop":1746142752572,"duration":53}},{"uid":"16b88e07e552dc06","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746142752426,"stop":1746142752482,"duration":56}},{"uid":"a5284c8cf9f6969e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746142752330,"stop":1746142752389,"duration":59}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":15},"items":[{"uid":"b2ae8a90c3e48337","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/84//#testresult/b2ae8a90c3e48337","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746055010583,"stop":1746055010637,"duration":54}},{"uid":"62af41c25dba62fe","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/83//#testresult/62af41c25dba62fe","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746054724564,"stop":1746054724617,"duration":53}},{"uid":"6c344e99e478cdfa","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/82//#testresult/6c344e99e478cdfa","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746054186873,"stop":1746054186929,"duration":56}},{"uid":"df2064f719d5323a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/81//#testresult/df2064f719d5323a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745969592622,"stop":1745969592673,"duration":51}},{"uid":"d041b9c418fab904","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/80//#testresult/d041b9c418fab904","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745946045487,"stop":1745946045538,"duration":51}},{"uid":"b52abcfc44c87d2f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/79//#testresult/b52abcfc44c87d2f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745348185530,"stop":1745348185586,"duration":56}},{"uid":"face6dc433af065e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/78//#testresult/face6dc433af065e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745347896752,"stop":1745347896805,"duration":53}},{"uid":"ee2c87707c4d5073","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/77//#testresult/ee2c87707c4d5073","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745347098514,"stop":1745347098568,"duration":54}},{"uid":"eb9394207042cc8d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/76//#testresult/eb9394207042cc8d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","time":{"start":1745331969302,"stop":1745331969372,"duration":70}},{"uid":"789d0591a65dbf7f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/75//#testresult/789d0591a65dbf7f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745298266710,"stop":1745298266764,"duration":54}},{"uid":"8a8fc7369f488df","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/74//#testresult/8a8fc7369f488df","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297840648,"stop":1745297840700,"duration":52}},{"uid":"1f48ffd5f409617","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/1f48ffd5f409617","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","time":{"start":1745297610240,"stop":1745297610310,"duration":70}},{"uid":"887dea0815d5031e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/887dea0815d5031e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297411327,"stop":1745297411380,"duration":53}},{"uid":"d8992ad14ab9df48","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/d8992ad14ab9df48","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","time":{"start":1745297304862,"stop":1745297304935,"duration":73}}]},"tags":["request","smoke","positive"]},"source":"8e7ae817229db0da.json","parameterValues":[]}