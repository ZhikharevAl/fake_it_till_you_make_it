{"uid":"a1f9e51033d822f6","name":"Тест успешного получения списка всех запросов помощи","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_all_requests_success","historyId":"5875c2fe5df957c12e3410e346b8b5a0","time":{"start":1755373120372,"stop":1755373120389,"duration":17},"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","descriptionHtml":"<p>Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f0f47c78cd0>\nrequest_client = <api.request.client.RequestClient object at 0x7f0f46a09160>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f0f46a09160>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1755373119073,"stop":1755373119073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1755373119073,"stop":1755373119073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755373119074,"stop":1755373119074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755373119074,"stop":1755373119074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755373119074,"stop":1755373119572,"duration":498},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755373119572,"stop":1755373119589,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755373119589,"stop":1755373119589,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1755373120178,"stop":1755373120178,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f0f47c78cd0>\nrequest_client = <api.request.client.RequestClient object at 0x7f0f46a09160>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f0f46a09160>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение всех запросов помощи","time":{"start":1755373120372,"stop":1755373120388,"duration":16},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 30, in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"3fcb8e434de8faeb","name":"Status Code: 403","source":"3fcb8e434de8faeb.txt","type":"text/plain","size":3},{"uid":"9a2d04d8ee2ca838","name":"Request URL","source":"9a2d04d8ee2ca838.uri","type":"text/uri-list","size":33},{"uid":"3318c58810f1bea9","name":"Response Headers (JSON)","source":"3318c58810f1bea9.json","type":"application/json","size":316},{"uid":"da145e452278ee44","name":"Response Body (JSON)","source":"da145e452278ee44.json","type":"application/json","size":39},{"uid":"86e62440b29faffe","name":"Status response code: 403 (Expected: 200)","source":"86e62440b29faffe.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7ce7e08155412a2d","name":"log","source":"7ce7e08155412a2d.txt","type":"text/plain","size":2344},{"uid":"befbb841e150a215","name":"stderr","source":"befbb841e150a215.txt","type":"text/plain","size":2810}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1755373121188,"stop":1755373121194,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755373121195,"stop":1755373121205,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение списка"},{"name":"feature","value":"Список запросов (GET /api/request)"},{"name":"severity","value":"normal"},{"name":"epic","value":"Запросы помощи"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["request","smoke","positive"]},"source":"a1f9e51033d822f6.json","parameterValues":[]}