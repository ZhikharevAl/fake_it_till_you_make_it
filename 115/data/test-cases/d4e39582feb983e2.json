{"uid":"d4e39582feb983e2","name":"Тест получения деталей запроса c некорректным ID","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_bad_request","historyId":"227b8792dcbc8996c1da6f6bff256a46","time":{"start":1755373120243,"stop":1755373120263,"duration":20},"description":"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.","descriptionHtml":"<p>Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f4ca2ed28b0>\nrequest_client = <api.request.client.RequestClient object at 0x7f4ca137a660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей запроса c некорректным ID\")\n    @allure.description(\n        \"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_bad_request(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей запроса c некорректным ID (если сервер должен возвращать 400).\n    \n        Ожидаемый результат: статус 400 Bad Request.\n        \"\"\"\n        invalid_id = \"invalid-id-format\"\n        logger.info(\n            \"Тест: Получение деталей запроса c невалидным ID (GET /api/request/%s)\", invalid_id\n        )\n>       response = request_client.get_request_details(request_id=invalid_id, expected_status=400)  # type: ignore\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/request/test_request_api.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f4ca137a660>\nresponse = <APIResponse url='http://localhost:4040/api/request/invalid-id-format' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755373119073,"stop":1755373119073,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755373119074,"stop":1755373119556,"duration":482},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755373119074,"stop":1755373119074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755373119074,"stop":1755373119074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755373119074,"stop":1755373119074,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755373119557,"stop":1755373119582,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755373119582,"stop":1755373119583,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1755373120188,"stop":1755373120188,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f4ca2ed28b0>\nrequest_client = <api.request.client.RequestClient object at 0x7f4ca137a660>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей запроса c некорректным ID\")\n    @allure.description(\n        \"Проверяем получение ошибки 400 при запросе деталей c ID, должен быть отклонен сервером.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_bad_request(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей запроса c некорректным ID (если сервер должен возвращать 400).\n    \n        Ожидаемый результат: статус 400 Bad Request.\n        \"\"\"\n        invalid_id = \"invalid-id-format\"\n        logger.info(\n            \"Тест: Получение деталей запроса c невалидным ID (GET /api/request/%s)\", invalid_id\n        )\n>       response = request_client.get_request_details(request_id=invalid_id, expected_status=400)  # type: ignore\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/request/test_request_api.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f4ca137a660>\nresponse = <APIResponse url='http://localhost:4040/api/request/invalid-id-format' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='invalid-id-format'","time":{"start":1755373120243,"stop":1755373120262,"duration":19},"status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/request/invalid-id-format\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"15239d9ce4e3b389","name":"Status Code: 500","source":"15239d9ce4e3b389.txt","type":"text/plain","size":3},{"uid":"67fef145871670cb","name":"Request URL","source":"67fef145871670cb.uri","type":"text/uri-list","size":51},{"uid":"dfe4df656b03d574","name":"Response Headers (JSON)","source":"dfe4df656b03d574.json","type":"application/json","size":309},{"uid":"d772eb19976ef8df","name":"Response Body (Text)","source":"d772eb19976ef8df.txt","type":"text/plain","size":20},{"uid":"832758bef75d3f2a","name":"Status response code: 500 (Expected: 400)","source":"832758bef75d3f2a.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'invalid-id-format'"},{"name":"expected_status","value":"400"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"7cc10227bcbe9488","name":"log","source":"7cc10227bcbe9488.txt","type":"text/plain","size":1238},{"uid":"3afafba08631acff","name":"stderr","source":"3afafba08631acff.txt","type":"text/plain","size":1452}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1755373121535,"stop":1755373121538,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755373121539,"stop":1755373121546,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение деталей"},{"name":"epic","value":"Запросы помощи"},{"name":"severity","value":"normal"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["request","negative"]},"source":"d4e39582feb983e2.json","parameterValues":[]}