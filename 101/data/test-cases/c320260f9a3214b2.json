{"uid":"c320260f9a3214b2","name":"Тест успешного получения списка всех запросов помощи","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_all_requests_success","historyId":"5875c2fe5df957c12e3410e346b8b5a0","time":{"start":1746486677397,"stop":1746486677451,"duration":54},"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","descriptionHtml":"<p>Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f4f43817390>\nrequest_client = <api.request.client.RequestClient object at 0x7f4f4379ae40>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f4f4379ae40>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746486675944,"stop":1746486675944,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746486675945,"stop":1746486675945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746486675945,"stop":1746486675945,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746486675945,"stop":1746486675946,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746486675946,"stop":1746486676449,"duration":503},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746486676450,"stop":1746486676478,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746486676479,"stop":1746486676479,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1746486676908,"stop":1746486676909,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f4f43817390>\nrequest_client = <api.request.client.RequestClient object at 0x7f4f4379ae40>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f4f4379ae40>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение всех запросов помощи","time":{"start":1746486677398,"stop":1746486677450,"duration":52},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 30, in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"a8e73a2775aa266d","name":"Status Code: 403","source":"a8e73a2775aa266d.txt","type":"text/plain","size":3},{"uid":"bd4f2987cb8279c6","name":"Request URL","source":"bd4f2987cb8279c6.uri","type":"text/uri-list","size":33},{"uid":"ba60138c23b341dc","name":"Response Headers (JSON)","source":"ba60138c23b341dc.json","type":"application/json","size":316},{"uid":"9c9f333847a7e7dd","name":"Response Body (JSON)","source":"9c9f333847a7e7dd.json","type":"application/json","size":39},{"uid":"fa8757562132bb17","name":"Status response code: 403 (Expected: 200)","source":"fa8757562132bb17.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"fed160aa69bd9f23","name":"log","source":"fed160aa69bd9f23.txt","type":"text/plain","size":2907},{"uid":"82d610f2f1557e79","name":"stderr","source":"82d610f2f1557e79.txt","type":"text/plain","size":3481}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746486679447,"stop":1746486679456,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746486679457,"stop":1746486679465,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"story","value":"Получение списка"},{"name":"feature","value":"Список запросов (GET /api/request)"},{"name":"epic","value":"Запросы помощи"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az740-563"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a6614f27bc986fc5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746486677300,"stop":1746486677359,"duration":59}},{"uid":"ee1bba9839cca8ed","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746486677208,"stop":1746486677264,"duration":56}},{"uid":"d590cee6e9319925","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","time":{"start":1746486677106,"stop":1746486677174,"duration":68}},{"uid":"739c2b84b99c8d90","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746486677019,"stop":1746486677073,"duration":54}},{"uid":"8112245476d22e6d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","time":{"start":1746486676910,"stop":1746486676982,"duration":72}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":12,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":12},"items":[{"uid":"fc9b10468e518b82","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/100//#testresult/fc9b10468e518b82","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request\nBody of the answer:\nPlanned Server Error","time":{"start":1746483619645,"stop":1746483619696,"duration":51}},{"uid":"a411d52e6a3d81ce","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/99//#testresult/a411d52e6a3d81ce","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746483424199,"stop":1746483424223,"duration":24}},{"uid":"f4073d92d96f3508","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/98//#testresult/f4073d92d96f3508","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746482681536,"stop":1746482681562,"duration":26}},{"uid":"fce47c79e4457017","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/97//#testresult/fce47c79e4457017","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746481274237,"stop":1746481274291,"duration":54}},{"uid":"103bfdc00573c06f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/96//#testresult/103bfdc00573c06f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746479137062,"stop":1746479137118,"duration":56}},{"uid":"30974a842f31db9","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/95//#testresult/30974a842f31db9","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746478918071,"stop":1746478918106,"duration":35}},{"uid":"1e490e287cf8db44","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/94//#testresult/1e490e287cf8db44","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746398526600,"stop":1746398526653,"duration":53}},{"uid":"9d579d0aed1d7296","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/93//#testresult/9d579d0aed1d7296","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746398345790,"stop":1746398345844,"duration":54}},{"uid":"ef5a42678ac7d6c4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/92//#testresult/ef5a42678ac7d6c4","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746398073715,"stop":1746398073741,"duration":26}},{"uid":"78fc1a7a240ee263","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/78fc1a7a240ee263","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746395043049,"stop":1746395043090,"duration":41}},{"uid":"bd1006d39a4a6297","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/bd1006d39a4a6297","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1746394512030,"stop":1746394512089,"duration":59}}]},"tags":["request","smoke","positive"]},"source":"c320260f9a3214b2.json","parameterValues":[]}