{"uid":"16abdc1663c192","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1746395043852,"stop":1746395043910,"duration":58},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7ff3a7b33890>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7ff3a79ea0f0>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n        response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n    \n        with allure.step(\"Проверка данных пользователя\"):  # type: ignore\n            assert isinstance(response, UserDataResponse), \"Ответ должен быть типа UserDataResponse\"\n            assert response.id is not None, \"Поле 'id' пользователя не должно быть пустым\"\n            assert isinstance(response.id, str), \"Поле 'id' пользователя должно быть типа str\"\n            assert len(response.base_locations) == 2\n    \n            education = response.educations[0]\n            assert education is not None\n            assert education.model_dump(by_alias=True)[\"organizationName\"] == \"НПГУ ДПИ\"\n            assert education.model_dump(by_alias=True)[\"level\"] == \"Высшее\"\n>           assert (\n                education.model_dump(by_alias=True)[\"specialization\"]\n                == \"Районный маркетинговый администратор\"\n            )\nE           AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\nE             \nE             - Районный маркетинговый администратор\nE             + Региональный маркетинговый аналитик\n\ntests/user/test_user_api.py:48: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746395040991,"stop":1746395040993,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746395040993,"stop":1746395040993,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746395040994,"stop":1746395040994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746395040994,"stop":1746395040994,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746395040994,"stop":1746395041499,"duration":505},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746395041499,"stop":1746395041527,"duration":28},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746395041527,"stop":1746395041528,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746395041528,"stop":1746395041528,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746395043095,"stop":1746395043206,"duration":111},"status":"passed","steps":[],"attachments":[{"uid":"936223253036eb4d","name":"Status Code: 200","source":"936223253036eb4d.txt","type":"text/plain","size":3},{"uid":"e36b379baa35f11f","name":"Request URL","source":"e36b379baa35f11f.uri","type":"text/uri-list","size":30},{"uid":"6e3a2482a652d5b2","name":"Response Headers (JSON)","source":"6e3a2482a652d5b2.json","type":"application/json","size":317},{"uid":"69f7090176b6eac8","name":"Response Body (JSON)","source":"69f7090176b6eac8.json","type":"application/json","size":224},{"uid":"89940c07c05e61b1","name":"Status response code: 200 (Expected: 200)","source":"89940c07c05e61b1.txt","type":"text/plain","size":3},{"uid":"8c66a8b306bc7c47","name":"Body of the answer (failed by AuthSuccessResponse)","source":"8c66a8b306bc7c47.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746395043832,"stop":1746395043850,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746395043850,"stop":1746395043850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746395043850,"stop":1746395043850,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7ff3a7b33890>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7ff3a79ea0f0>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n        response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n    \n        with allure.step(\"Проверка данных пользователя\"):  # type: ignore\n            assert isinstance(response, UserDataResponse), \"Ответ должен быть типа UserDataResponse\"\n            assert response.id is not None, \"Поле 'id' пользователя не должно быть пустым\"\n            assert isinstance(response.id, str), \"Поле 'id' пользователя должно быть типа str\"\n            assert len(response.base_locations) == 2\n    \n            education = response.educations[0]\n            assert education is not None\n            assert education.model_dump(by_alias=True)[\"organizationName\"] == \"НПГУ ДПИ\"\n            assert education.model_dump(by_alias=True)[\"level\"] == \"Высшее\"\n>           assert (\n                education.model_dump(by_alias=True)[\"specialization\"]\n                == \"Районный маркетинговый администратор\"\n            )\nE           AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\nE             \nE             - Районный маркетинговый администратор\nE             + Региональный маркетинговый аналитик\n\ntests/user/test_user_api.py:48: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1746395043852,"stop":1746395043908,"duration":56},"status":"passed","steps":[],"attachments":[{"uid":"eb5d3242c50741ab","name":"Status Code: 200","source":"eb5d3242c50741ab.txt","type":"text/plain","size":3},{"uid":"7530de0fbb2c4416","name":"Request URL","source":"7530de0fbb2c4416.uri","type":"text/uri-list","size":30},{"uid":"47254c29feeb7a9a","name":"Response Headers (JSON)","source":"47254c29feeb7a9a.json","type":"application/json","size":318},{"uid":"86356f6dfbc0a928","name":"Response Body (JSON)","source":"86356f6dfbc0a928.json","type":"application/json","size":1274},{"uid":"a1be73c4def50881","name":"Status response code: 200 (Expected: 200)","source":"a1be73c4def50881.txt","type":"text/plain","size":3},{"uid":"451ac495e0166da1","name":"Body of the answer (failed by UserDataResponse)","source":"451ac495e0166da1.json","type":"application/json","size":1127}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"Проверка данных пользователя","time":{"start":1746395043908,"stop":1746395043909,"duration":1},"status":"failed","statusMessage":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик\n","statusTrace":"  File \"/app/tests/user/test_user_api.py\", line 48, in test_get_user_info_success\n    assert (\n    ...<2 lines>...\n    )\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b2202c5e22f7589c","name":"log","source":"b2202c5e22f7589c.txt","type":"text/plain","size":4811},{"uid":"4e37c2f0f73fc42c","name":"stderr","source":"4e37c2f0f73fc42c.txt","type":"text/plain","size":5700}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746395043925,"stop":1746395043941,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746395044138,"stop":1746395044157,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746395044158,"stop":1746395044170,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"story","value":"Получение профиля"},{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"critical"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az2250-971"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"70ef9c6be43a19c9","status":"failed","statusDetails":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","time":{"start":1746395043699,"stop":1746395043790,"duration":91}},{"uid":"2b54d679edb17b0","status":"failed","statusDetails":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","time":{"start":1746395043592,"stop":1746395043648,"duration":56}},{"uid":"a4600a2bfaf34b94","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746395043484,"stop":1746395043532,"duration":48}},{"uid":"576bf96acdb0cd5a","status":"failed","statusDetails":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","time":{"start":1746395043371,"stop":1746395043431,"duration":60}},{"uid":"8ed189cc5e384f08","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746395043226,"stop":1746395043296,"duration":70}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"3af48f1e8ebee0b7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/3af48f1e8ebee0b7","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394513268,"stop":1746394513310,"duration":42}}]},"tags":["smoke","positive","user"]},"source":"16abdc1663c192.json","parameterValues":[]}