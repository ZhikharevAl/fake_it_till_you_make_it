{"uid":"33679ba2b82c56c2","name":"Тест успешной авторизации пользователя (c моком)","fullName":"tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked#test_login_success_mocked","historyId":"985b917ffc579a9a6e2c889807e3411f","time":{"start":1745297609498,"stop":1745297609587,"duration":89},"description":"Проверяем успешный ответ и валидацию токена при мокированном ответе API.","descriptionHtml":"<p>Проверяем успешный ответ и валидацию токена при мокированном ответе API.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked object at 0x7f9dd45ac690>\nmocked_auth_client = <api.auth.client.AuthClient object at 0x7f9dd4123750>\n\n    @allure.story(\"Успешный вход (Мок)\")\n    @allure.title(\"Тест успешной авторизации пользователя (c моком)\")\n    @allure.description(\"Проверяем успешный ответ и валидацию токена при мокированном ответе API.\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success_mocked(self, mocked_auth_client: AuthClient) -> None:\n        \"\"\"Проверка успешного входа c мокированным ответом 200.\"\"\"\n        logger.info(\"Тест: Успешная авторизация (Мок)\")\n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = mocked_auth_client.login(payload=payload, expected_status=200)\n\ntests/auth/test_auth_api_mocked.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f9dd4123750>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745297607781,"stop":1745297607781,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745297607782,"stop":1745297607782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745297607782,"stop":1745297607782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745297607782,"stop":1745297607782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745297607783,"stop":1745297608210,"duration":427},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mockable_browser_context","time":{"start":1745297609151,"stop":1745297609473,"duration":322},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_api_request_context","time":{"start":1745297609474,"stop":1745297609495,"duration":21},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_auth_client","time":{"start":1745297609495,"stop":1745297609495,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mocked_http_client","time":{"start":1745297609495,"stop":1745297609495,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем успешный ответ и валидацию токена при мокированном ответе API.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api_mocked.TestAuthenticationAPIMocked object at 0x7f9dd45ac690>\nmocked_auth_client = <api.auth.client.AuthClient object at 0x7f9dd4123750>\n\n    @allure.story(\"Успешный вход (Мок)\")\n    @allure.title(\"Тест успешной авторизации пользователя (c моком)\")\n    @allure.description(\"Проверяем успешный ответ и валидацию токена при мокированном ответе API.\")\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success_mocked(self, mocked_auth_client: AuthClient) -> None:\n        \"\"\"Проверка успешного входа c мокированным ответом 200.\"\"\"\n        logger.info(\"Тест: Успешная авторизация (Мок)\")\n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = mocked_auth_client.login(payload=payload, expected_status=200)\n\ntests/auth/test_auth_api_mocked.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f9dd4123750>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"5ec5613c6b7d0876","name":"Status Code: 500","source":"5ec5613c6b7d0876.txt","type":"text/plain","size":3},{"uid":"13f377447959a151","name":"Request URL","source":"13f377447959a151.uri","type":"text/uri-list","size":30},{"uid":"84f1c36b5ca0f392","name":"Response Headers (JSON)","source":"84f1c36b5ca0f392.json","type":"application/json","size":309},{"uid":"7040d957fa57738b","name":"Response Body (Text)","source":"7040d957fa57738b.txt","type":"text/plain","size":20},{"uid":"c244136716eafaeb","name":"Status response code: 500 (Expected: 200)","source":"c244136716eafaeb.txt","type":"text/plain","size":3},{"uid":"45e1c1a9542a0317","name":"log","source":"45e1c1a9542a0317.txt","type":"text/plain","size":1027},{"uid":"eed46e0a20f8d4cc","name":"stderr","source":"eed46e0a20f8d4cc.txt","type":"text/plain","size":1220}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"mocked_api_request_context::0","time":{"start":1745297609605,"stop":1745297609621,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mockable_browser_context::0","time":{"start":1745297609622,"stop":1745297609705,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745297611481,"stop":1745297611490,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"blocker"},{"name":"story","value":"Успешный вход (Мок)"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"epic","value":"Аутентификация (Моки)"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"mocked"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api_mocked"},{"name":"subSuite","value":"TestAuthenticationAPIMocked"},{"name":"host","value":"fv-az888-937"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api_mocked"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["mocked","auth","smoke","positive"]},"source":"33679ba2b82c56c2.json","parameterValues":[]}