{"uid":"3af48f1e8ebee0b7","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1746394513268,"stop":1746394513310,"duration":42},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fe9364a39d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fe934f2c830>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n        response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n    \n        with allure.step(\"Проверка данных пользователя\"):  # type: ignore\n            assert isinstance(response, UserDataResponse), \"Ответ должен быть типа UserDataResponse\"\n            assert response.id is not None, \"Поле 'id' пользователя не должно быть пустым\"\n            assert isinstance(response.id, str), \"Поле 'id' пользователя должно быть типа str\"\n            assert len(response.base_locations) == 2\n    \n            education = response.educations[0]\n            assert education is not None\n            assert education.model_dump(by_alias=True)[\"organizationName\"] == \"НПГУ ДПИ\"\n            assert education.model_dump(by_alias=True)[\"level\"] == \"Высшее\"\n>           assert (\n                education.model_dump(by_alias=True)[\"specialization\"]\n                == \"Районный маркетинговый администратор\"\n            )\nE           AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\nE             \nE             - Районный маркетинговый администратор\nE             + Генеральный маркетинговый техник\n\ntests/user/test_user_api.py:48: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746394510388,"stop":1746394510389,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746394510389,"stop":1746394510389,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746394510390,"stop":1746394510390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746394510390,"stop":1746394510390,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746394510390,"stop":1746394510890,"duration":500},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746394510895,"stop":1746394510932,"duration":37},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746394510932,"stop":1746394510933,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746394510933,"stop":1746394510934,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746394512506,"stop":1746394512618,"duration":112},"status":"passed","steps":[],"attachments":[{"uid":"20d3f53a58a4c797","name":"Status Code: 200","source":"20d3f53a58a4c797.txt","type":"text/plain","size":3},{"uid":"5a8d9e3bc49b057f","name":"Request URL","source":"5a8d9e3bc49b057f.uri","type":"text/uri-list","size":30},{"uid":"fac03ed4a615107","name":"Response Headers (JSON)","source":"fac03ed4a615107.json","type":"application/json","size":317},{"uid":"a73e7413486e19b3","name":"Response Body (JSON)","source":"a73e7413486e19b3.json","type":"application/json","size":224},{"uid":"fc5f83de6d117388","name":"Status response code: 200 (Expected: 200)","source":"fc5f83de6d117388.txt","type":"text/plain","size":3},{"uid":"e897fd3717a4e96","name":"Body of the answer (failed by AuthSuccessResponse)","source":"e897fd3717a4e96.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746394513249,"stop":1746394513267,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746394513267,"stop":1746394513267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746394513267,"stop":1746394513267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fe9364a39d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fe934f2c830>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n        response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n    \n        with allure.step(\"Проверка данных пользователя\"):  # type: ignore\n            assert isinstance(response, UserDataResponse), \"Ответ должен быть типа UserDataResponse\"\n            assert response.id is not None, \"Поле 'id' пользователя не должно быть пустым\"\n            assert isinstance(response.id, str), \"Поле 'id' пользователя должно быть типа str\"\n            assert len(response.base_locations) == 2\n    \n            education = response.educations[0]\n            assert education is not None\n            assert education.model_dump(by_alias=True)[\"organizationName\"] == \"НПГУ ДПИ\"\n            assert education.model_dump(by_alias=True)[\"level\"] == \"Высшее\"\n>           assert (\n                education.model_dump(by_alias=True)[\"specialization\"]\n                == \"Районный маркетинговый администратор\"\n            )\nE           AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\nE             \nE             - Районный маркетинговый администратор\nE             + Генеральный маркетинговый техник\n\ntests/user/test_user_api.py:48: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1746394513268,"stop":1746394513308,"duration":40},"status":"passed","steps":[],"attachments":[{"uid":"767ba87b342bf1ef","name":"Status Code: 200","source":"767ba87b342bf1ef.txt","type":"text/plain","size":3},{"uid":"a05669b187f60039","name":"Request URL","source":"a05669b187f60039.uri","type":"text/uri-list","size":30},{"uid":"61b84f7f51e70a87","name":"Response Headers (JSON)","source":"61b84f7f51e70a87.json","type":"application/json","size":318},{"uid":"811881af7df9db5","name":"Response Body (JSON)","source":"811881af7df9db5.json","type":"application/json","size":1265},{"uid":"1076f2c09d9d20ef","name":"Status response code: 200 (Expected: 200)","source":"1076f2c09d9d20ef.txt","type":"text/plain","size":3},{"uid":"d2b07997dcf03ac5","name":"Body of the answer (failed by UserDataResponse)","source":"d2b07997dcf03ac5.json","type":"application/json","size":1118}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"Проверка данных пользователя","time":{"start":1746394513308,"stop":1746394513308,"duration":0},"status":"failed","statusMessage":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник\n","statusTrace":"  File \"/app/tests/user/test_user_api.py\", line 48, in test_get_user_info_success\n    assert (\n    ...<2 lines>...\n    )\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"976bb5a59d4d8d3c","name":"log","source":"976bb5a59d4d8d3c.txt","type":"text/plain","size":4811},{"uid":"9e4ca061816e2ac0","name":"stderr","source":"9e4ca061816e2ac0.txt","type":"text/plain","size":5700}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":8,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746394513324,"stop":1746394513336,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746394514338,"stop":1746394514346,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746394514347,"stop":1746394514354,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"critical"},{"name":"story","value":"Получение профиля"},{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az2021-534"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"6f560e122c06e45d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746394513133,"stop":1746394513199,"duration":66}},{"uid":"87f8c158244ef84d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746394512993,"stop":1746394513060,"duration":67}},{"uid":"5bda01a956aa7dc7","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394512877,"stop":1746394512931,"duration":54}},{"uid":"5e34b4cb252ab905","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394512760,"stop":1746394512816,"duration":56}},{"uid":"ddf237a3f670deae","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394512637,"stop":1746394512701,"duration":64}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["smoke","positive","user"]},"source":"3af48f1e8ebee0b7.json","parameterValues":[]}