{"uid":"13d37f302a8a30dd","name":"Тест успешного внесения вклада в существующий запрос","fullName":"tests.request.test_request_api.TestRequestAPI#test_contribute_success","historyId":"669c54e9452a544e52cd8b6d124e1e96","time":{"start":1755538570167,"stop":1755538570191,"duration":24},"description":"Проверяем возможность внести вклад в существующий запрос.","descriptionHtml":"<p>Проверяем возможность внести вклад в существующий запрос.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f568d4bf770>\nrequest_client = <api.request.client.RequestClient object at 0x7f568d02b230>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест успешного внесения вклада в существующий запрос\")\n    @allure.description(\"Проверяем возможность внести вклад в существующий запрос.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_contribute_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного внесения вклада (без тела запроса).\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное внесение вклада (POST /api/request/%s/contribution)\",\n            EXISTING_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f568d02b230>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1/contribution' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755538568411,"stop":1755538568411,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755538568412,"stop":1755538568413,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755538568412,"stop":1755538568412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755538568412,"stop":1755538568412,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755538568414,"stop":1755538568928,"duration":514},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755538568928,"stop":1755538568943,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755538568943,"stop":1755538568943,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1755538569523,"stop":1755538569524,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем возможность внести вклад в существующий запрос.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f568d4bf770>\nrequest_client = <api.request.client.RequestClient object at 0x7f568d02b230>\n\n    @allure.feature(\"Вклад в запрос (POST /api/request/{id}/contribution)\")\n    @allure.story(\"Внесение вклада\")\n    @allure.title(\"Тест успешного внесения вклада в существующий запрос\")\n    @allure.description(\"Проверяем возможность внести вклад в существующий запрос.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_contribute_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного внесения вклада (без тела запроса).\n    \n        Ожидаемый результат: статус 200 и текстовое сообщение.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное внесение вклада (POST /api/request/%s/contribution)\",\n            EXISTING_REQUEST_ID,\n        )\n>       response = request_client.contribute_to_request(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:194: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:81: in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f568d02b230>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1/contribution' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Внесение вклада в запрос помощи: id='request-id-1'","time":{"start":1755538570168,"stop":1755538570190,"duration":22},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 81, in contribute_to_request\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"5524e0678734907d","name":"Status Code: 500","source":"5524e0678734907d.txt","type":"text/plain","size":3},{"uid":"9f17b04e8f7aa5b4","name":"Request URL","source":"9f17b04e8f7aa5b4.uri","type":"text/uri-list","size":59},{"uid":"931ac52a256a1df1","name":"Response Headers (JSON)","source":"931ac52a256a1df1.json","type":"application/json","size":309},{"uid":"1eb249b7e2d4f1f2","name":"Response Body (Text)","source":"1eb249b7e2d4f1f2.txt","type":"text/plain","size":20},{"uid":"adde1557567ce809","name":"Status response code: 500 (Expected: 200)","source":"adde1557567ce809.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'request-id-1'"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6ab6c66fa90b04f4","name":"log","source":"6ab6c66fa90b04f4.txt","type":"text/plain","size":3553},{"uid":"96eb3a8275cc4b11","name":"stderr","source":"96eb3a8275cc4b11.txt","type":"text/plain","size":4154}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1755538570648,"stop":1755538570654,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755538570655,"stop":1755538570665,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"normal"},{"name":"epic","value":"Запросы помощи"},{"name":"feature","value":"Вклад в запрос (POST /api/request/{id}/contribution)"},{"name":"story","value":"Внесение вклада"},{"name":"tag","value":"positive"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b084d85f357eec00","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755538570105,"stop":1755538570132,"duration":27}},{"uid":"9571e9778a484eea","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755538570043,"stop":1755538570073,"duration":30}},{"uid":"4776af6d92f83ab9","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755538569979,"stop":1755538570015,"duration":36}},{"uid":"354c684c0a10193d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755538569924,"stop":1755538569950,"duration":26}},{"uid":"e46a1082bb0aad40","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755538569860,"stop":1755538569888,"duration":28}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":6},"items":[{"uid":"a31d84b128127a79","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/123//#testresult/a31d84b128127a79","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755511587223,"stop":1755511587298,"duration":75}},{"uid":"fa043a8b7bf1c27f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/122//#testresult/fa043a8b7bf1c27f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755511257550,"stop":1755511257587,"duration":37}},{"uid":"4ee61c23cfc9b6e4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/121//#testresult/4ee61c23cfc9b6e4","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755508617903,"stop":1755508617928,"duration":25}},{"uid":"65fb8793b7dd7a30","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/120//#testresult/65fb8793b7dd7a30","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\nPlanned Server Error","time":{"start":1755508196323,"stop":1755508196347,"duration":24}},{"uid":"482fdd07e58f6b78","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/482fdd07e58f6b78","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1/contribution\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755507569258,"stop":1755507569280,"duration":22}}]},"tags":["request","positive"]},"source":"13d37f302a8a30dd.json","parameterValues":[]}