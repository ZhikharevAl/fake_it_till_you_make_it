{"uid":"aeb480af4d320f3e","name":"Тест успешной авторизации пользователя","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_success","historyId":"0c4581ef0847c2acc9fd7d6eed3bb190","time":{"start":1746398526002,"stop":1746398526057,"duration":55},"description":"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.","descriptionHtml":"<p>Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f67771f9130>\nauth_client = <api.auth.client.AuthClient object at 0x7f677705e900>\n\n    @allure.story(\"Успешный вход\")\n    @allure.title(\"Тест успешной авторизации пользователя\")\n    @allure.description(\n        \"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.\"\n    )\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success(self, auth_client: AuthClient) -> None:\n        \"\"\"\n        Убедитесь в успешной авторизации c помощью действительных учетных данных.\n    \n        Ожидаемый результат: статус 200 OK и действительный JWT-токен в ответе.\n        \"\"\"\n        logger.info(\"Тест: Успешная авторизация\")\n        if not TEST_USER_LOGIN or not TEST_USER_PASSWORD:\n            pytest.skip(\"Пропуск теста: Учетные данные тестового пользователя не настроены.\")\n    \n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = auth_client.login(payload=payload, expected_status=200)\n\ntests/auth/test_auth_api.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f677705e900>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746398524610,"stop":1746398524610,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746398524611,"stop":1746398524611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746398524611,"stop":1746398524611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746398524611,"stop":1746398524611,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746398524612,"stop":1746398525109,"duration":497},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746398525109,"stop":1746398525151,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746398525151,"stop":1746398525152,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746398525152,"stop":1746398525152,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f67771f9130>\nauth_client = <api.auth.client.AuthClient object at 0x7f677705e900>\n\n    @allure.story(\"Успешный вход\")\n    @allure.title(\"Тест успешной авторизации пользователя\")\n    @allure.description(\n        \"Проверяем, что при валидных учетных данных возвращается статус 200 и JWT токен.\"\n    )\n    @allure.severity(allure.severity_level.BLOCKER)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_login_success(self, auth_client: AuthClient) -> None:\n        \"\"\"\n        Убедитесь в успешной авторизации c помощью действительных учетных данных.\n    \n        Ожидаемый результат: статус 200 OK и действительный JWT-токен в ответе.\n        \"\"\"\n        logger.info(\"Тест: Успешная авторизация\")\n        if not TEST_USER_LOGIN or not TEST_USER_PASSWORD:\n            pytest.skip(\"Пропуск теста: Учетные данные тестового пользователя не настроены.\")\n    \n        payload = AuthPayload(login=TEST_USER_LOGIN, password=TEST_USER_PASSWORD)\n>       response = auth_client.login(payload=payload, expected_status=200)\n\ntests/auth/test_auth_api.py:162: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f677705e900>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"c02c9fba2248ad95","name":"Status Code: 500","source":"c02c9fba2248ad95.txt","type":"text/plain","size":3},{"uid":"2993a0d821178cd7","name":"Request URL","source":"2993a0d821178cd7.uri","type":"text/uri-list","size":30},{"uid":"3d52ecedc6cf4674","name":"Response Headers (JSON)","source":"3d52ecedc6cf4674.json","type":"application/json","size":309},{"uid":"92264aed67d3df2","name":"Response Body (Text)","source":"92264aed67d3df2.txt","type":"text/plain","size":20},{"uid":"8381fd252394f530","name":"Status response code: 500 (Expected: 200)","source":"8381fd252394f530.txt","type":"text/plain","size":3},{"uid":"834e39bb12797336","name":"log","source":"834e39bb12797336.txt","type":"text/plain","size":421},{"uid":"c616aaffd151a699","name":"stderr","source":"c616aaffd151a699.txt","type":"text/plain","size":509}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746398527925,"stop":1746398527941,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746398527942,"stop":1746398527952,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"severity","value":"blocker"},{"name":"epic","value":"Аутентификация"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"story","value":"Успешный вход"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az883-585"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["auth","smoke","positive"]},"source":"aeb480af4d320f3e.json","parameterValues":[]}