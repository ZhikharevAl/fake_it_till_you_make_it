{"uid":"24668c5bb5dbb16d","name":"Тест получения данных пользователя без аутентификации","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_unauthorized","historyId":"ac47ae78c55f9b4383c56514db258fb5","time":{"start":1745348186305,"stop":1745348186421,"duration":116},"description":"Проверяем, что неавторизованный пользователь получает ошибку 401.","descriptionHtml":"<p>Проверяем, что неавторизованный пользователь получает ошибку 401.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f1a19ab8f50>\nuser_client = <api.user.client.UserClient object at 0x7f1a199b4c20>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест получения данных пользователя без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 401.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_get_user_info_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка получения информации o пользователе без аутентификации.\n    \n        Ожидаемый результат: статус 401 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Получение данных пользователя без авторизации (GET /api/user)\")\n>       response = user_client.get_user_info(expected_status=401)  # type: ignore\n\ntests/user/test_user_api.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f1a199b4c20>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 401, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"delete_output_dir","time":{"start":1745348183105,"stop":1745348183106,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1745348183105,"stop":1745348183105,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745348183106,"stop":1745348183558,"duration":452},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745348183106,"stop":1745348183106,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745348183106,"stop":1745348183106,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745348183559,"stop":1745348183586,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745348183586,"stop":1745348183587,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user_client","time":{"start":1745348185807,"stop":1745348185808,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что неавторизованный пользователь получает ошибку 401.","status":"failed","statusMessage":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f1a19ab8f50>\nuser_client = <api.user.client.UserClient object at 0x7f1a199b4c20>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест получения данных пользователя без аутентификации\")\n    @allure.description(\"Проверяем, что неавторизованный пользователь получает ошибку 401.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    def test_get_user_info_unauthorized(self, user_client: UserClient) -> None:\n        \"\"\"\n        Проверка получения информации o пользователе без аутентификации.\n    \n        Ожидаемый результат: статус 401 Unauthorized.\n        \"\"\"\n        logger.info(\"Тест: Получение данных пользователя без авторизации (GET /api/user)\")\n>       response = user_client.get_user_info(expected_status=401)  # type: ignore\n\ntests/user/test_user_api.py:86: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f1a199b4c20>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 401, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1745348186306,"stop":1745348186419,"duration":113},"status":"failed","statusMessage":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"4a2fb55542cde4e5","name":"Status Code: 500","source":"4a2fb55542cde4e5.txt","type":"text/plain","size":3},{"uid":"e3d8d5a99bed66ac","name":"Request URL","source":"e3d8d5a99bed66ac.uri","type":"text/uri-list","size":30},{"uid":"e958264cead5d66a","name":"Response Headers (JSON)","source":"e958264cead5d66a.json","type":"application/json","size":309},{"uid":"bf5384cbdc25ce11","name":"Response Body (Text)","source":"bf5384cbdc25ce11.txt","type":"text/plain","size":20},{"uid":"3d4119dc96933742","name":"Status response code: 500 (Expected: 401)","source":"3d4119dc96933742.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"401"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"432807b411c7725a","name":"log","source":"432807b411c7725a.txt","type":"text/plain","size":3042},{"uid":"4684aaf93a06d793","name":"stderr","source":"4684aaf93a06d793.txt","type":"text/plain","size":3640}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745348187180,"stop":1745348187190,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745348187191,"stop":1745348187198,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"story","value":"Получение профиля"},{"name":"severity","value":"critical"},{"name":"epic","value":"Управление пользователем"},{"name":"tag","value":"negative"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az842-287"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"a8a3c8f49e281d2e","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745348186209,"stop":1745348186267,"duration":58}},{"uid":"4dfba607472c666c","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745348186117,"stop":1745348186172,"duration":55}},{"uid":"c0a8414986953f34","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745348186023,"stop":1745348186080,"duration":57}},{"uid":"cdac6bcbfd4d126a","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745348185914,"stop":1745348185987,"duration":73}},{"uid":"3e335509678f72cb","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745348185809,"stop":1745348185880,"duration":71}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":9,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":9},"items":[{"uid":"7f1d95b980ba65a2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/78//#testresult/7f1d95b980ba65a2","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745347897656,"stop":1745347897712,"duration":56}},{"uid":"ab0b7367f099c13f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/77//#testresult/ab0b7367f099c13f","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745347099645,"stop":1745347099682,"duration":37}},{"uid":"3e8e175d6d59ada0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/76//#testresult/3e8e175d6d59ada0","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745331970336,"stop":1745331970385,"duration":49}},{"uid":"c93c7e214464c077","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/75//#testresult/c93c7e214464c077","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745298267412,"stop":1745298267460,"duration":48}},{"uid":"e3436039df2b6a22","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/74//#testresult/e3436039df2b6a22","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297841486,"stop":1745297841541,"duration":55}},{"uid":"4a54ce978043551a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/4a54ce978043551a","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297611184,"stop":1745297611237,"duration":53}},{"uid":"cf144e059c7d563e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/cf144e059c7d563e","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297412117,"stop":1745297412170,"duration":53}},{"uid":"7c8c083e7d181083","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/7c8c083e7d181083","status":"failed","statusDetails":"AssertionError: The status was pending 401, but received 403. URL: http://localhost:4040/api/user\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297305957,"stop":1745297306008,"duration":51}}]},"tags":["negative","user"]},"source":"24668c5bb5dbb16d.json","parameterValues":[]}