{"uid":"bbf6b0c25d5871a3","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1746525759252,"stop":1746525759354,"duration":102},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fab3762bc50>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fab35fa9a30>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fab35fa9a30>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746525756265,"stop":1746525756267,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746525756267,"stop":1746525756267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746525756267,"stop":1746525756267,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746525756268,"stop":1746525756802,"duration":534},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746525756268,"stop":1746525756268,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746525756802,"stop":1746525756833,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746525756833,"stop":1746525756834,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746525756834,"stop":1746525756835,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1746525758436,"stop":1746525758592,"duration":156},"status":"passed","steps":[],"attachments":[{"uid":"e552c3058d4932f7","name":"Status Code: 200","source":"e552c3058d4932f7.txt","type":"text/plain","size":3},{"uid":"612d214fe740adcb","name":"Request URL","source":"612d214fe740adcb.uri","type":"text/uri-list","size":30},{"uid":"5bd0e145a99416eb","name":"Response Headers (JSON)","source":"5bd0e145a99416eb.json","type":"application/json","size":317},{"uid":"95642626460ebf0f","name":"Response Body (JSON)","source":"95642626460ebf0f.json","type":"application/json","size":224},{"uid":"45f949fde4597906","name":"Status response code: 200 (Expected: 200)","source":"45f949fde4597906.txt","type":"text/plain","size":3},{"uid":"4d0c65024f414a5d","name":"Body of the answer (failed by AuthSuccessResponse)","source":"4d0c65024f414a5d.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1746525759230,"stop":1746525759250,"duration":20},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1746525759251,"stop":1746525759251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1746525759251,"stop":1746525759251,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fab3762bc50>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fab35fa9a30>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fab35fa9a30>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1746525759253,"stop":1746525759352,"duration":99},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"9cb5af2f5da6af4d","name":"Status Code: 500","source":"9cb5af2f5da6af4d.txt","type":"text/plain","size":3},{"uid":"b133e6a1b0e2a5f7","name":"Request URL","source":"b133e6a1b0e2a5f7.uri","type":"text/uri-list","size":30},{"uid":"6e2e176a54f79f55","name":"Response Headers (JSON)","source":"6e2e176a54f79f55.json","type":"application/json","size":309},{"uid":"f6afb90c0f978df4","name":"Response Body (Text)","source":"f6afb90c0f978df4.txt","type":"text/plain","size":20},{"uid":"f7ef564949e234ca","name":"Status response code: 500 (Expected: 200)","source":"f7ef564949e234ca.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a2d8a6c62e74c","name":"log","source":"a2d8a6c62e74c.txt","type":"text/plain","size":4674},{"uid":"35f1bf821d3e9bb1","name":"stderr","source":"35f1bf821d3e9bb1.txt","type":"text/plain","size":5539}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1746525759376,"stop":1746525759392,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1746525759967,"stop":1746525759982,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746525759984,"stop":1746525759994,"duration":10},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение профиля"},{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Управление пользователем"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az1432-705"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"2e0174f9124699c1","status":"failed","statusDetails":"AssertionError: assert 'Центральный оптимизационный разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный оптимизационный разработчик","time":{"start":1746525759124,"stop":1746525759185,"duration":61}},{"uid":"cfc673cbd290e68b","status":"failed","statusDetails":"AssertionError: assert 'Центральный оптимизационный разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный оптимизационный разработчик","time":{"start":1746525758998,"stop":1746525759060,"duration":62}},{"uid":"21b2863bdb9d8f2d","status":"failed","statusDetails":"AssertionError: assert 'Центральный оптимизационный разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный оптимизационный разработчик","time":{"start":1746525758872,"stop":1746525758931,"duration":59}},{"uid":"3f46ce3d5b3948a2","status":"failed","statusDetails":"AssertionError: assert 'Центральный оптимизационный разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный оптимизационный разработчик","time":{"start":1746525758746,"stop":1746525758808,"duration":62}},{"uid":"203e2aeef21a2d7e","status":"failed","statusDetails":"AssertionError: assert 'Центральный оптимизационный разработчик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный оптимизационный разработчик","time":{"start":1746525758615,"stop":1746525758679,"duration":64}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":17,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":17},"items":[{"uid":"5357f3d3632726d0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/105//#testresult/5357f3d3632726d0","status":"failed","statusDetails":"AssertionError: assert 'Главный интеграционный архитектор' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный интеграционный архитектор","time":{"start":1746525194991,"stop":1746525195043,"duration":52}},{"uid":"4bb61d10673823f4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/104//#testresult/4bb61d10673823f4","status":"failed","statusDetails":"AssertionError: assert 'Областной коммуникационный планировщик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Областной коммуникационный планировщик","time":{"start":1746488405636,"stop":1746488405721,"duration":85}},{"uid":"d4dbf3eb79d2c6be","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/103//#testresult/d4dbf3eb79d2c6be","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746488160077,"stop":1746488160159,"duration":82}},{"uid":"159172343eafbd6a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/102//#testresult/159172343eafbd6a","status":"failed","statusDetails":"AssertionError: assert 'Главный страховой планировщик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный страховой планировщик","time":{"start":1746487131682,"stop":1746487131731,"duration":49}},{"uid":"37c6e658a411c07f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/101//#testresult/37c6e658a411c07f","status":"failed","statusDetails":"AssertionError: assert 'Глобальный функциональный руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Глобальный функциональный руководитель","time":{"start":1746486678720,"stop":1746486678803,"duration":83}},{"uid":"6729fe67fa8f743","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/100//#testresult/6729fe67fa8f743","status":"failed","statusDetails":"AssertionError: assert 'Региональный функциональный консультант' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный функциональный консультант","time":{"start":1746483620523,"stop":1746483620585,"duration":62}},{"uid":"5b56549d87dd098d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/99//#testresult/5b56549d87dd098d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746483424514,"stop":1746483424544,"duration":30}},{"uid":"586d2b992fdb5923","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/98//#testresult/586d2b992fdb5923","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746482681888,"stop":1746482681921,"duration":33}},{"uid":"e949e12418d05abc","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/97//#testresult/e949e12418d05abc","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746481275566,"stop":1746481275618,"duration":52}},{"uid":"72f843ca9d8b82d8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/96//#testresult/72f843ca9d8b82d8","status":"failed","statusDetails":"AssertionError: assert 'Международный операционный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Международный операционный инженер","time":{"start":1746479137925,"stop":1746479138019,"duration":94}},{"uid":"fcc3bc3e66e77b42","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/95//#testresult/fcc3bc3e66e77b42","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746478918404,"stop":1746478918435,"duration":31}},{"uid":"aa3eb924cdd2cf45","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/94//#testresult/aa3eb924cdd2cf45","status":"failed","statusDetails":"AssertionError: assert 'Глобальный маркетинговый помощник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Глобальный маркетинговый помощник","time":{"start":1746398527168,"stop":1746398527231,"duration":63}},{"uid":"2c69d942ec7a841e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/93//#testresult/2c69d942ec7a841e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398347046,"stop":1746398347117,"duration":71}},{"uid":"14d7638bb35e689a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/92//#testresult/14d7638bb35e689a","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1746398074041,"stop":1746398074073,"duration":32}},{"uid":"16abdc1663c192","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/16abdc1663c192","status":"failed","statusDetails":"AssertionError: assert 'Региональный маркетинговый аналитик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный маркетинговый аналитик","time":{"start":1746395043852,"stop":1746395043910,"duration":58}},{"uid":"3af48f1e8ebee0b7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/3af48f1e8ebee0b7","status":"failed","statusDetails":"AssertionError: assert 'Генеральный маркетинговый техник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный маркетинговый техник","time":{"start":1746394513268,"stop":1746394513310,"duration":42}}]},"tags":["smoke","positive","user"]},"source":"bbf6b0c25d5871a3.json","parameterValues":[]}