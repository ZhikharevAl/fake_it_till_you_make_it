{"uid":"abd10e59f5f9c8fa","name":"Тест неуспешного входа: Некорректный формат login (не email)","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"257a67a3a809dafc07576d1c0f38534b","time":{"start":1746559022552,"stop":1746559022606,"duration":54},"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Некорректный формат login (не email)","descriptionHtml":"<p>Проверяем, что API возвращает 400 при отправке некорректного тела: Некорректный формат login (не email)</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f583a736f50>\nauth_client = <api.auth.client.AuthClient object at 0x7f583a412900>\npayload_dict = {'login': 'не email', 'password': 'password4'}\nexpected_status = 400, description = 'Некорректный формат login (не email)'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1746559020919,"stop":1746559020920,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1746559020920,"stop":1746559020920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1746559020920,"stop":1746559020920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1746559020921,"stop":1746559020921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1746559020921,"stop":1746559021432,"duration":511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1746559021432,"stop":1746559021472,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1746559021472,"stop":1746559021473,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1746559021473,"stop":1746559021474,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Некорректный формат login (не email)","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f583a736f50>\nauth_client = <api.auth.client.AuthClient object at 0x7f583a412900>\npayload_dict = {'login': 'не email', 'password': 'password4'}\nexpected_status = 400, description = 'Некорректный формат login (не email)'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","steps":[],"attachments":[{"uid":"15068cd28ce7cea4","name":"Status Code: 403","source":"15068cd28ce7cea4.txt","type":"text/plain","size":3},{"uid":"231c7d3c5187e584","name":"Request URL","source":"231c7d3c5187e584.uri","type":"text/uri-list","size":39},{"uid":"f3f772c644e0df25","name":"Response Headers (JSON)","source":"f3f772c644e0df25.json","type":"application/json","size":316},{"uid":"592d06b47ea29917","name":"Response Body (JSON)","source":"592d06b47ea29917.json","type":"application/json","size":39},{"uid":"8d94ac0144c50359","name":"log","source":"8d94ac0144c50359.txt","type":"text/plain","size":1913},{"uid":"66397dee9fe1d5d0","name":"stderr","source":"66397dee9fe1d5d0.txt","type":"text/plain","size":2292}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1746559024807,"stop":1746559024815,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1746559024815,"stop":1746559024823,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Неуспешный вход - Некорректное тело запроса"},{"name":"epic","value":"Аутентификация"},{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"normal"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1756-922"},{"name":"thread","value":"6-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Некорректный формат login (не email)'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'login': 'не email', 'password': 'password4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"fd525979f3963cf2","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746559022474,"stop":1746559022527,"duration":53}},{"uid":"b7fd789ad6ebff1a","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746559022399,"stop":1746559022447,"duration":48}},{"uid":"9faf519054d575f6","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746559022319,"stop":1746559022372,"duration":53}},{"uid":"df575a950cff8790","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746559022238,"stop":1746559022294,"duration":56}},{"uid":"23bd4d6e7ab52a5f","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746559022152,"stop":1746559022208,"duration":56}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":18,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":18},"items":[{"uid":"b4152f469d779f90","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/106//#testresult/b4152f469d779f90","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1746525757966,"stop":1746525758032,"duration":66}},{"uid":"f4bbd8a75f0a1e87","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/105//#testresult/f4bbd8a75f0a1e87","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746525193772,"stop":1746525193827,"duration":55}},{"uid":"8074d0007e3fb6ef","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/104//#testresult/8074d0007e3fb6ef","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1746488404414,"stop":1746488404483,"duration":69}},{"uid":"7bfa002abea7f4ab","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/103//#testresult/7bfa002abea7f4ab","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1746488158891,"stop":1746488158961,"duration":70}},{"uid":"cc97f9378c01a790","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/102//#testresult/cc97f9378c01a790","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1746487130418,"stop":1746487130485,"duration":67}},{"uid":"d5fee5b0b25fa5ee","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/101//#testresult/d5fee5b0b25fa5ee","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746486677570,"stop":1746486677625,"duration":55}},{"uid":"8626019babbadf97","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/100//#testresult/8626019babbadf97","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746483618719,"stop":1746483618782,"duration":63}},{"uid":"54f14bb91b0a0772","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/99//#testresult/54f14bb91b0a0772","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746483424089,"stop":1746483424113,"duration":24}},{"uid":"43caf4f3938a2888","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/98//#testresult/43caf4f3938a2888","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746482681419,"stop":1746482681445,"duration":26}},{"uid":"844030a12fc3b249","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/97//#testresult/844030a12fc3b249","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1746481274311,"stop":1746481274381,"duration":70}},{"uid":"ca271a3353f4eb55","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/96//#testresult/ca271a3353f4eb55","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746479136229,"stop":1746479136283,"duration":54}},{"uid":"285f3dbfebfe7681","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/95//#testresult/285f3dbfebfe7681","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746478917957,"stop":1746478917985,"duration":28}},{"uid":"fb4cfc4d3482d5cb","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/94//#testresult/fb4cfc4d3482d5cb","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746398525929,"stop":1746398525978,"duration":49}},{"uid":"bbe27fb8e38fe092","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/93//#testresult/bbe27fb8e38fe092","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746398345810,"stop":1746398345859,"duration":49}},{"uid":"5f478bf135af8b16","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/92//#testresult/5f478bf135af8b16","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746398073594,"stop":1746398073619,"duration":25}},{"uid":"609ed7c730a0b454","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/91//#testresult/609ed7c730a0b454","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1746395042175,"stop":1746395042228,"duration":53}},{"uid":"1ad6eab33eb5a6a1","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/90//#testresult/1ad6eab33eb5a6a1","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 500. Тело: Planned Server Error\nassert 500 == 400\n +  where 500 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=500 status_text='Internal Server Error'>.status","time":{"start":1746394512044,"stop":1746394512115,"duration":71}}]},"tags":["negative","auth"]},"source":"abd10e59f5f9c8fa.json","parameterValues":["'Некорректный формат login (не email)'","400","{'login': 'не email', 'password': 'password4'}"]}