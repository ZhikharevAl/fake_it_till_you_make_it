{"uid":"2418182bd3f16549","name":"Тест успешного получения списка всех запросов помощи","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_all_requests_success","historyId":"5875c2fe5df957c12e3410e346b8b5a0","time":{"start":1745263983892,"stop":1745263983928,"duration":36},"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","descriptionHtml":"<p>Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f46c6f03ed0>\nrequest_client = <api.request.client.RequestClient object at 0x7f46c6dffe00>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f46c6dffe00>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745263983123,"stop":1745263983123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745263983123,"stop":1745263983124,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745263983124,"stop":1745263983383,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745263983124,"stop":1745263983124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745263983124,"stop":1745263983124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745263983383,"stop":1745263983405,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745263983405,"stop":1745263983405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745263983891,"stop":1745263983891,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f46c6f03ed0>\nrequest_client = <api.request.client.RequestClient object at 0x7f46c6dffe00>\n\n    @allure.feature(\"Список запросов (GET /api/request)\")\n    @allure.story(\"Получение списка\")\n    @allure.title(\"Тест успешного получения списка всех запросов помощи\")\n    @allure.description(\n        \"Проверяем получение списка всех запросов, ожидаем статус 200 и массив данных.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_all_requests_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения списка всех запросов помощи.\n    \n        Ожидаемый результат: статус 200 и список объектов HelpRequestData.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение всех запросов (GET /api/request)\")\n>       response = request_client.get_all_requests(expected_status=200)  # type: ignore\n\ntests/request/test_request_api.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:30: in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f46c6dffe00>\nresponse = <APIResponse url='http://localhost:4040/api/request' status=403 status_text='Forbidden'>\nexpected_status = 200, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение всех запросов помощи","time":{"start":1745263983893,"stop":1745263983927,"duration":34},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 30, in get_all_requests\n    processed_response = self._handle_response(response, expected_status)\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"9128034b16de841c","name":"Status Code: 403","source":"9128034b16de841c.txt","type":"text/plain","size":3},{"uid":"22395285b3330076","name":"Request URL","source":"22395285b3330076.uri","type":"text/uri-list","size":33},{"uid":"5d08e109e98d17f2","name":"Response Headers (JSON)","source":"5d08e109e98d17f2.json","type":"application/json","size":316},{"uid":"cf490d429423c2ea","name":"Response Body (JSON)","source":"cf490d429423c2ea.json","type":"application/json","size":39},{"uid":"9eeadd88ea0d15ff","name":"Status response code: 403 (Expected: 200)","source":"9eeadd88ea0d15ff.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"2b0ae376fed6ec44","name":"log","source":"2b0ae376fed6ec44.txt","type":"text/plain","size":503},{"uid":"7e10d71e1bd93a48","name":"stderr","source":"7e10d71e1bd93a48.txt","type":"text/plain","size":609}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745263984625,"stop":1745263984632,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745263984632,"stop":1745263984640,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Список запросов (GET /api/request)"},{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Получение списка"},{"name":"severity","value":"normal"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az1793-383"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":25,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":25},"items":[{"uid":"c1b54c3aec155ad1","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/54//#testresult/c1b54c3aec155ad1","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745180423614,"stop":1745180423667,"duration":53}},{"uid":"67f474d18eb8ca5b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/53//#testresult/67f474d18eb8ca5b","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745180151694,"stop":1745180151748,"duration":54}},{"uid":"89579e41fc4e8f8f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/52//#testresult/89579e41fc4e8f8f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745173181905,"stop":1745173181929,"duration":24}},{"uid":"ef195c78a1ae0bf1","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/51//#testresult/ef195c78a1ae0bf1","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745173152953,"stop":1745173152975,"duration":22}},{"uid":"7838c6360155a3a0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/50//#testresult/7838c6360155a3a0","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745171168692,"stop":1745171168725,"duration":33}},{"uid":"735a1e351e70004","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/49//#testresult/735a1e351e70004","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745016104142,"stop":1745016104169,"duration":27}},{"uid":"e7551bcb0f9f5000","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/48//#testresult/e7551bcb0f9f5000","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745015891973,"stop":1745015891997,"duration":24}},{"uid":"a352a64f318724ad","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/47//#testresult/a352a64f318724ad","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745014809569,"stop":1745014809606,"duration":37}},{"uid":"8023dc7e3dee3f66","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/46//#testresult/8023dc7e3dee3f66","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745014787711,"stop":1745014787735,"duration":24}},{"uid":"239a3ef88031c2d7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/45//#testresult/239a3ef88031c2d7","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745013912593,"stop":1745013912616,"duration":23}},{"uid":"afe414271195af27","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/afe414271195af27","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745013767315,"stop":1745013767339,"duration":24}},{"uid":"4e177820206c4971","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/4e177820206c4971","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745007983857,"stop":1745007983884,"duration":27}},{"uid":"f866bef0693c89d3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/f866bef0693c89d3","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745007717739,"stop":1745007717763,"duration":24}},{"uid":"2077b8e047532daf","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/2077b8e047532daf","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745007086587,"stop":1745007086619,"duration":32}},{"uid":"badf1de6cdd30758","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/badf1de6cdd30758","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006982760,"stop":1745006982795,"duration":35}},{"uid":"4022cdf1a405b537","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/4022cdf1a405b537","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006650097,"stop":1745006650121,"duration":24}},{"uid":"4c4f2a42f6e0e683","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/4c4f2a42f6e0e683","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006447575,"stop":1745006447600,"duration":25}},{"uid":"275bf371623b75f8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/275bf371623b75f8","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745006158216,"stop":1745006158239,"duration":23}},{"uid":"fd485b9f8bf61694","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/fd485b9f8bf61694","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005971245,"stop":1745005971269,"duration":24}},{"uid":"9754bdd61d14fb79","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/9754bdd61d14fb79","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745005662938,"stop":1745005662966,"duration":28}}]},"tags":["request","smoke","positive"]},"source":"2418182bd3f16549.json","parameterValues":[]}