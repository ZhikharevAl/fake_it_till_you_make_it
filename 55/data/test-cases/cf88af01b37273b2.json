{"uid":"cf88af01b37273b2","name":"Тест неуспешного входа: Пустая строка в поле login","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"b663cc8e346260d2bfa873bb5b822797","time":{"start":1745263983709,"stop":1745263983731,"duration":22},"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле login","descriptionHtml":"<p>Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле login</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f46c6efe250>\nauth_client = <api.auth.client.AuthClient object at 0x7f46c6dff230>\npayload_dict = {'login': '', 'password': 'password4'}, expected_status = 400\ndescription = 'Пустая строка в поле login'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745263983123,"stop":1745263983123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745263983123,"stop":1745263983124,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745263983124,"stop":1745263983383,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745263983124,"stop":1745263983124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745263983124,"stop":1745263983124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745263983383,"stop":1745263983405,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745263983405,"stop":1745263983405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745263983406,"stop":1745263983406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Пустая строка в поле login","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f46c6efe250>\nauth_client = <api.auth.client.AuthClient object at 0x7f46c6dff230>\npayload_dict = {'login': '', 'password': 'password4'}, expected_status = 400\ndescription = 'Пустая строка в поле login'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","steps":[],"attachments":[{"uid":"7de09f0dcd832ae3","name":"Status Code: 403","source":"7de09f0dcd832ae3.txt","type":"text/plain","size":3},{"uid":"3d41a7a53305be44","name":"Request URL","source":"3d41a7a53305be44.uri","type":"text/uri-list","size":39},{"uid":"2f2dc7ceaf5d6b1d","name":"Response Headers (JSON)","source":"2f2dc7ceaf5d6b1d.json","type":"application/json","size":316},{"uid":"a22d79c14ce2a66c","name":"Response Body (JSON)","source":"a22d79c14ce2a66c.json","type":"application/json","size":39},{"uid":"72933466bd9f72cb","name":"log","source":"72933466bd9f72cb.txt","type":"text/plain","size":305},{"uid":"97229979b7b61153","name":"stderr","source":"97229979b7b61153.txt","type":"text/plain","size":369}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745263984625,"stop":1745263984632,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745263984632,"stop":1745263984640,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"normal"},{"name":"epic","value":"Аутентификация"},{"name":"story","value":"Неуспешный вход - Некорректное тело запроса"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1793-383"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Пустая строка в поле login'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'login': '', 'password': 'password4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":29,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":29},"items":[{"uid":"3c29b44273f0aff2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/54//#testresult/3c29b44273f0aff2","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745180422336,"stop":1745180422421,"duration":85}},{"uid":"4462793ea9bd88b2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/53//#testresult/4462793ea9bd88b2","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745180150379,"stop":1745180150469,"duration":90}},{"uid":"86d1143e02cbee78","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/52//#testresult/86d1143e02cbee78","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745173181717,"stop":1745173181741,"duration":24}},{"uid":"be0b83085ef85881","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/51//#testresult/be0b83085ef85881","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745173152775,"stop":1745173152797,"duration":22}},{"uid":"1161ff981765eb3f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/50//#testresult/1161ff981765eb3f","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745171168504,"stop":1745171168527,"duration":23}},{"uid":"eda1d72dec2dfc15","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/49//#testresult/eda1d72dec2dfc15","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745016103957,"stop":1745016103979,"duration":22}},{"uid":"fb195c66ce694bfd","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/48//#testresult/fb195c66ce694bfd","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745015891792,"stop":1745015891815,"duration":23}},{"uid":"132094b5e95e194b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/47//#testresult/132094b5e95e194b","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745014809367,"stop":1745014809392,"duration":25}},{"uid":"4bac18a5a6cd0613","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/46//#testresult/4bac18a5a6cd0613","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745014787529,"stop":1745014787552,"duration":23}},{"uid":"77869bcd2e8fa43c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/45//#testresult/77869bcd2e8fa43c","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745013912412,"stop":1745013912434,"duration":22}},{"uid":"bd5ad7d1e5fd90bd","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/bd5ad7d1e5fd90bd","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745013767129,"stop":1745013767152,"duration":23}},{"uid":"3ea287d4ae4c7829","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/3ea287d4ae4c7829","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745007983659,"stop":1745007983683,"duration":24}},{"uid":"1a4352350d373d11","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/1a4352350d373d11","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745007717558,"stop":1745007717581,"duration":23}},{"uid":"3903ab5cca763b82","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/3903ab5cca763b82","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745007086398,"stop":1745007086421,"duration":23}},{"uid":"877d2d3ca24eee08","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/877d2d3ca24eee08","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006982568,"stop":1745006982592,"duration":24}},{"uid":"db152bd0ac895664","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/db152bd0ac895664","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006649907,"stop":1745006649931,"duration":24}},{"uid":"5ceb62594c52e81e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/5ceb62594c52e81e","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006447369,"stop":1745006447394,"duration":25}},{"uid":"ae24702006b19778","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/ae24702006b19778","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006158033,"stop":1745006158056,"duration":23}},{"uid":"a2b9b1aaff767c25","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/a2b9b1aaff767c25","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745005971044,"stop":1745005971068,"duration":24}},{"uid":"82a983cece5d3a1","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/82a983cece5d3a1","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745005662749,"stop":1745005662773,"duration":24}}]},"tags":["negative","auth"]},"source":"cf88af01b37273b2.json","parameterValues":["'Пустая строка в поле login'","400","{'login': '', 'password': 'password4'}"]}