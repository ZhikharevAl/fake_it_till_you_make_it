{"uid":"b2e2a8d02006a121","name":"Тест неуспешного входа: Неверный логин, неверный пароль","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_failure_invalid_credentials","historyId":"7ab3741e30f743348384fc25c8c65e9f","time":{"start":1745263983559,"stop":1745263983590,"duration":31},"description":"Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, неверный пароль","descriptionHtml":"<p>Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, неверный пароль</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f46c6e80770>\nauth_client = <api.auth.client.AuthClient object at 0x7f46c6dff230>\nlogin = 'nonexistent.user@example.com', password = 'wrongPassword'\nexpected_status = 400, description = 'Неверный логин, неверный пароль'\n\n    @allure.story(\"Неуспешный вход - Неверные учетные данные\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Корректный логин, неверный пароль\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Неверный логин, корректный пароль\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Неверный логин, неверный пароль\",\n                id=\"invalid_login_and_pass\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка неуспешной авторизации c неверными учетными данными.\n    \n        Ожидаемый результат: статус код 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при попытке входа c: {description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f46c6dff230>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745263983123,"stop":1745263983123,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745263983123,"stop":1745263983124,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745263983124,"stop":1745263983383,"duration":259},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745263983124,"stop":1745263983124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745263983124,"stop":1745263983124,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745263983383,"stop":1745263983405,"duration":22},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745263983405,"stop":1745263983405,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745263983406,"stop":1745263983406,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при попытке входа c: Неверный логин, неверный пароль","status":"failed","statusMessage":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f46c6e80770>\nauth_client = <api.auth.client.AuthClient object at 0x7f46c6dff230>\nlogin = 'nonexistent.user@example.com', password = 'wrongPassword'\nexpected_status = 400, description = 'Неверный логин, неверный пароль'\n\n    @allure.story(\"Неуспешный вход - Неверные учетные данные\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"login\", \"password\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                TEST_USER_LOGIN,\n                INVALID_USER_PASSWORD,\n                400,\n                \"Корректный логин, неверный пароль\",\n                id=\"invalid_password\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                TEST_USER_PASSWORD,\n                400,\n                \"Неверный логин, корректный пароль\",\n                id=\"invalid_login\",\n            ),\n            pytest.param(\n                \"nonexistent.user@example.com\",\n                INVALID_USER_PASSWORD,\n                400,\n                \"Неверный логин, неверный пароль\",\n                id=\"invalid_login_and_pass\",\n            ),\n        ],\n    )\n    def test_login_failure_invalid_credentials(\n        self,\n        auth_client: AuthClient,\n        login: str,\n        password: str,\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка неуспешной авторизации c неверными учетными данными.\n    \n        Ожидаемый результат: статус код 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при попытке входа c: {description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        payload = AuthPayload(login=login, password=password)\n>       response = auth_client.login(payload=payload, expected_status=expected_status)\n\ntests/auth/test_auth_api.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/auth/client.py:50: in login\n    return self._handle_response(response, expected_status)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.auth.client.AuthClient object at 0x7f46c6dff230>\nresponse = <APIResponse url='http://localhost:4040/api/auth' status=500 status_text='Internal Server Error'>\nexpected_status = 400, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[],"attachments":[{"uid":"f9b9a1fa1ec13d3b","name":"Status Code: 500","source":"f9b9a1fa1ec13d3b.txt","type":"text/plain","size":3},{"uid":"af0cf76e0ede1219","name":"Request URL","source":"af0cf76e0ede1219.uri","type":"text/uri-list","size":30},{"uid":"8d7d71ad26c9d47d","name":"Response Headers (JSON)","source":"8d7d71ad26c9d47d.json","type":"application/json","size":309},{"uid":"89bf70722f8fbfff","name":"Response Body (Text)","source":"89bf70722f8fbfff.txt","type":"text/plain","size":20},{"uid":"4799f2f0d3976e05","name":"Status response code: 500 (Expected: 400)","source":"4799f2f0d3976e05.txt","type":"text/plain","size":3},{"uid":"3dbc61657add438a","name":"log","source":"3dbc61657add438a.txt","type":"text/plain","size":439},{"uid":"71329ac071d0f0af","name":"stderr","source":"71329ac071d0f0af.txt","type":"text/plain","size":527}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745263984625,"stop":1745263984632,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745263984632,"stop":1745263984640,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"critical"},{"name":"epic","value":"Аутентификация"},{"name":"story","value":"Неуспешный вход - Неверные учетные данные"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1793-383"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Неверный логин, неверный пароль'"},{"name":"expected_status","value":"400"},{"name":"login","value":"'nonexistent.user@example.com'"},{"name":"password","value":"'wrongPassword'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":27,"broken":0,"skipped":0,"passed":2,"unknown":0,"total":29},"items":[{"uid":"606b91f2d9d93295","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/54//#testresult/606b91f2d9d93295","status":"passed","time":{"start":1745180421822,"stop":1745180421990,"duration":168}},{"uid":"30d860252f84a63","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/53//#testresult/30d860252f84a63","status":"passed","time":{"start":1745180149854,"stop":1745180150019,"duration":165}},{"uid":"60eefc4998e58e83","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/52//#testresult/60eefc4998e58e83","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745173181566,"stop":1745173181597,"duration":31}},{"uid":"b9186a737e97c3c7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/51//#testresult/b9186a737e97c3c7","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745173152638,"stop":1745173152667,"duration":29}},{"uid":"4fc523017f23fac0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/50//#testresult/4fc523017f23fac0","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745171168357,"stop":1745171168387,"duration":30}},{"uid":"dcc0352e79de56ac","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/49//#testresult/dcc0352e79de56ac","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745016103813,"stop":1745016103843,"duration":30}},{"uid":"c023be3eec727bc3","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/48//#testresult/c023be3eec727bc3","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745015891646,"stop":1745015891677,"duration":31}},{"uid":"c317c239167ac12d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/47//#testresult/c317c239167ac12d","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745014809209,"stop":1745014809242,"duration":33}},{"uid":"4a75769d568f6b8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/46//#testresult/4a75769d568f6b8","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745014787386,"stop":1745014787417,"duration":31}},{"uid":"1e840352d6bc71a8","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/45//#testresult/1e840352d6bc71a8","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745013912268,"stop":1745013912298,"duration":30}},{"uid":"6ce88d6cd71ab481","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/6ce88d6cd71ab481","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745013766983,"stop":1745013767014,"duration":31}},{"uid":"e310eca3d3510706","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/e310eca3d3510706","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745007983506,"stop":1745007983538,"duration":32}},{"uid":"776971b4418c2c4c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/776971b4418c2c4c","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745007717414,"stop":1745007717444,"duration":30}},{"uid":"850b9a601dfa66d0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/850b9a601dfa66d0","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745007086248,"stop":1745007086280,"duration":32}},{"uid":"5d5254b5671fed95","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/5d5254b5671fed95","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745006982415,"stop":1745006982447,"duration":32}},{"uid":"50dff19f372dad3a","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/50dff19f372dad3a","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745006649758,"stop":1745006649790,"duration":32}},{"uid":"4cf2784bf3ac4b01","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/4cf2784bf3ac4b01","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745006447212,"stop":1745006447245,"duration":33}},{"uid":"af6dd3e7420d2853","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/af6dd3e7420d2853","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745006157887,"stop":1745006157918,"duration":31}},{"uid":"185a8f5f83e79893","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/185a8f5f83e79893","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745005970889,"stop":1745005970921,"duration":32}},{"uid":"7f4afe393a6460d4","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/7f4afe393a6460d4","status":"failed","statusDetails":"AssertionError: The status was pending 400, but received 500. URL: http://localhost:4040/api/auth\nBody of the answer:\nPlanned Server Error","time":{"start":1745005662603,"stop":1745005662634,"duration":31}}]},"tags":["negative","auth"]},"source":"b2e2a8d02006a121.json","parameterValues":["'Неверный логин, неверный пароль'","400","'nonexistent.user@example.com'","'wrongPassword'"]}