{"uid":"c16e8e787bade7c7","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1745007984188,"stop":1745007984219,"duration":31},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fabe01682d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fabdeb60440>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fabdeb60440>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745007983068,"stop":1745007983068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745007983068,"stop":1745007983068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745007983068,"stop":1745007983068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745007983068,"stop":1745007983068,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745007983069,"stop":1745007983333,"duration":264},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745007983333,"stop":1745007983352,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745007983352,"stop":1745007983353,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745007983353,"stop":1745007983353,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1745007984109,"stop":1745007984179,"duration":70},"status":"passed","steps":[],"attachments":[{"uid":"26103f601c9987ef","name":"Status Code: 200","source":"26103f601c9987ef.txt","type":"text/plain","size":3},{"uid":"9ea1edb8bcfedad2","name":"Request URL","source":"9ea1edb8bcfedad2.uri","type":"text/uri-list","size":30},{"uid":"cac0b1203d85b1e4","name":"Response Headers (JSON)","source":"cac0b1203d85b1e4.json","type":"application/json","size":317},{"uid":"314f09a1191e829b","name":"Response Body (JSON)","source":"314f09a1191e829b.json","type":"application/json","size":224},{"uid":"9fb6abbdfa3b70b5","name":"Status response code: 200 (Expected: 200)","source":"9fb6abbdfa3b70b5.txt","type":"text/plain","size":3},{"uid":"2fdf3e8e1d705227","name":"Body of the answer (failed by AuthSuccessResponse)","source":"2fdf3e8e1d705227.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1745007984180,"stop":1745007984187,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1745007984187,"stop":1745007984187,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1745007984188,"stop":1745007984188,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7fabe01682d0>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7fabdeb60440>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7fabdeb60440>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1745007984189,"stop":1745007984218,"duration":29},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"e57db7c56199ff82","name":"Status Code: 500","source":"e57db7c56199ff82.txt","type":"text/plain","size":3},{"uid":"92e841f38d2c15d8","name":"Request URL","source":"92e841f38d2c15d8.uri","type":"text/uri-list","size":30},{"uid":"a5b229a60cb0cede","name":"Response Headers (JSON)","source":"a5b229a60cb0cede.json","type":"application/json","size":309},{"uid":"ab1d508be76289df","name":"Response Body (Text)","source":"ab1d508be76289df.txt","type":"text/plain","size":20},{"uid":"1f7b71a61289e59e","name":"Status response code: 500 (Expected: 200)","source":"1f7b71a61289e59e.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"b1eec31397adaf6a","name":"log","source":"b1eec31397adaf6a.txt","type":"text/plain","size":1264},{"uid":"9b8ff3f168e39051","name":"stderr","source":"9b8ff3f168e39051.txt","type":"text/plain","size":1499}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1745007984232,"stop":1745007984240,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1745007984594,"stop":1745007984601,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745007984601,"stop":1745007984609,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"epic","value":"Управление пользователем"},{"name":"severity","value":"critical"},{"name":"story","value":"Получение профиля"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"fv-az891-648"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":15,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":15},"items":[{"uid":"4497c205a02f76e5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/4497c205a02f76e5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745007718062,"stop":1745007718093,"duration":31}},{"uid":"2ad275bfd6044f56","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/2ad275bfd6044f56","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745007086920,"stop":1745007086950,"duration":30}},{"uid":"7a1d8b2beefc8b0c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/7a1d8b2beefc8b0c","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006983096,"stop":1745006983128,"duration":32}},{"uid":"c21c2f659552df50","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/c21c2f659552df50","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006650417,"stop":1745006650447,"duration":30}},{"uid":"1b7a965fd9e6ed9d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/1b7a965fd9e6ed9d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006447908,"stop":1745006447939,"duration":31}},{"uid":"55199893bddc6f9f","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/55199893bddc6f9f","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745006158525,"stop":1745006158555,"duration":30}},{"uid":"ec5c72e3549776c5","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/ec5c72e3549776c5","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745005971572,"stop":1745005971603,"duration":31}},{"uid":"60b7bda8e087a02d","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/60b7bda8e087a02d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745005663264,"stop":1745005663295,"duration":31}},{"uid":"71cd1951663eac41","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/71cd1951663eac41","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1745005090050,"stop":1745005090083,"duration":33}},{"uid":"d8c69b27583e2bfc","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/d8c69b27583e2bfc","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1744923399209,"stop":1744923399240,"duration":31}},{"uid":"e0d45bee5a3e77d0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/e0d45bee5a3e77d0","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1744850340326,"stop":1744850340359,"duration":33}},{"uid":"6352404082032fe0","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/6352404082032fe0","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1744849900105,"stop":1744849900135,"duration":30}},{"uid":"2cba2a03c0cafc48","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/29//#testresult/2cba2a03c0cafc48","status":"failed","statusDetails":"AssertionError: assert 'Ведущий операционный координатор' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Ведущий операционный координатор","time":{"start":1744767142036,"stop":1744767142063,"duration":27}},{"uid":"8f75fd340330df45","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/28//#testresult/8f75fd340330df45","status":"failed","statusDetails":"AssertionError: assert 'Районный страховой агент' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Районный страховой агент","time":{"start":1744766715765,"stop":1744766715794,"duration":29}}]},"tags":["smoke","positive","user"]},"source":"c16e8e787bade7c7.json","parameterValues":[]}