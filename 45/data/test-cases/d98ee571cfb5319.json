{"uid":"d98ee571cfb5319","name":"Тест неуспешного входа: Отсутствует поле login","fullName":"tests.auth.test_auth_api.TestAuthenticationAPI#test_login_malformed_payload","historyId":"189451d03a7bcf402ee0bcdda1148ed8","time":{"start":1745013912346,"stop":1745013912369,"duration":23},"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Отсутствует поле login","descriptionHtml":"<p>Проверяем, что API возвращает 400 при отправке некорректного тела: Отсутствует поле login</p>\n","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f2896a4a450>\nauth_client = <api.auth.client.AuthClient object at 0x7f28969d3230>\npayload_dict = {'password': 'password4'}, expected_status = 400\ndescription = 'Отсутствует поле login'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1745013911845,"stop":1745013911845,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745013911845,"stop":1745013911845,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1745013911845,"stop":1745013911845,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745013911845,"stop":1745013911845,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745013911846,"stop":1745013912097,"duration":251},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745013912097,"stop":1745013912116,"duration":19},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1745013912116,"stop":1745013912117,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745013912116,"stop":1745013912116,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем, что API возвращает 400 при отправке некорректного тела: Отсутствует поле login","status":"failed","statusMessage":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","statusTrace":"self = <tests.auth.test_auth_api.TestAuthenticationAPI object at 0x7f2896a4a450>\nauth_client = <api.auth.client.AuthClient object at 0x7f28969d3230>\npayload_dict = {'password': 'password4'}, expected_status = 400\ndescription = 'Отсутствует поле login'\n\n    @allure.story(\"Неуспешный вход - Некорректное тело запроса\")\n    @allure.title(\"Тест неуспешного входа: {description}\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    @pytest.mark.parametrize(\n        (\"payload_dict\", \"expected_status\", \"description\"),\n        [\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN},\n                400,\n                \"Отсутствует поле password\",\n                id=\"missing_password\",\n            ),\n            pytest.param(\n                {\"password\": TEST_USER_PASSWORD},\n                400,\n                \"Отсутствует поле login\",\n                id=\"missing_login\",\n            ),\n            pytest.param({}, 400, \"Пустое тело запроса\", id=\"empty_payload_400\"),\n            pytest.param(\n                {\"login\": \"\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Пустая строка в поле login\",\n                id=\"empty_login_str_400\",\n            ),\n            pytest.param(\n                {\"login\": TEST_USER_LOGIN, \"password\": \"\"},\n                400,\n                \"Пустая строка в поле password\",\n                id=\"empty_pass_str\",\n            ),\n            pytest.param(\n                {\"login\": \"не email\", \"password\": TEST_USER_PASSWORD},\n                400,\n                \"Некорректный формат login (не email)\",\n                id=\"bad_login_format\",\n            ),\n        ],\n    )\n    def test_login_malformed_payload(\n        self,\n        auth_client: AuthClient,\n        payload_dict: dict[str, str | None],\n        expected_status: int,\n        description: str,\n    ) -> None:\n        \"\"\"\n        Проверка реакции API на некорректно сформированное тело запроса.\n    \n        Ожидаемый результат: код состояния 400 Bad Request.\n        \"\"\"\n        allure.dynamic.description(\n            f\"Проверяем, что API возвращает {expected_status} при отправке некорректного тела: \"\n            f\"{description}\"\n        )\n        logger.info(\"Тест: %s\", description)\n        endpoint = APIEndpoints.AUTH\n        response = auth_client.http.post(endpoint=str(endpoint), json=payload_dict)\n>       assert response.status == expected_status, (\n            f\"Ожидался статус {expected_status}, но получен {response.status}. \"\n            f\"Тело: {response.text()}\"\n        )\nE       AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nE       assert 403 == 400\nE        +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status\n\ntests/auth/test_auth_api.py:137: AssertionError","steps":[],"attachments":[{"uid":"58fc1f2946d5543","name":"Status Code: 403","source":"58fc1f2946d5543.txt","type":"text/plain","size":3},{"uid":"360f32410999b816","name":"Request URL","source":"360f32410999b816.uri","type":"text/uri-list","size":39},{"uid":"a66b0682da36b8ed","name":"Response Headers (JSON)","source":"a66b0682da36b8ed.json","type":"application/json","size":316},{"uid":"c3ea74b309721fd4","name":"Response Body (JSON)","source":"c3ea74b309721fd4.json","type":"application/json","size":39},{"uid":"beb259b547b0c9ff","name":"log","source":"beb259b547b0c9ff.txt","type":"text/plain","size":299},{"uid":"44b17c89f49eb6bb","name":"stderr","source":"44b17c89f49eb6bb.txt","type":"text/plain","size":363}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745013913286,"stop":1745013913292,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745013913292,"stop":1745013913300,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Вход пользователя (POST /api/auth)"},{"name":"severity","value":"normal"},{"name":"story","value":"Неуспешный вход - Некорректное тело запроса"},{"name":"epic","value":"Аутентификация"},{"name":"tag","value":"negative"},{"name":"tag","value":"auth"},{"name":"parentSuite","value":"tests.auth"},{"name":"suite","value":"test_auth_api"},{"name":"subSuite","value":"TestAuthenticationAPI"},{"name":"host","value":"fv-az1787-359"},{"name":"thread","value":"1-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.auth.test_auth_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"description","value":"'Отсутствует поле login'"},{"name":"expected_status","value":"400"},{"name":"payload_dict","value":"{'password': 'password4'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":19,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":19},"items":[{"uid":"ae947a1883e8cfbb","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/44//#testresult/ae947a1883e8cfbb","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745013767062,"stop":1745013767085,"duration":23}},{"uid":"6144608eacef14d7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/43//#testresult/6144608eacef14d7","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745007983590,"stop":1745007983613,"duration":23}},{"uid":"e62671cf85898c1e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/42//#testresult/e62671cf85898c1e","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745007717492,"stop":1745007717515,"duration":23}},{"uid":"96604081d4530797","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/40//#testresult/96604081d4530797","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745007086330,"stop":1745007086353,"duration":23}},{"uid":"9021889a923c3c72","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/39//#testresult/9021889a923c3c72","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006982498,"stop":1745006982522,"duration":24}},{"uid":"338371cec2c2be4b","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/38//#testresult/338371cec2c2be4b","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006649840,"stop":1745006649863,"duration":23}},{"uid":"620c80a57a6f2a46","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/37//#testresult/620c80a57a6f2a46","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006447298,"stop":1745006447322,"duration":24}},{"uid":"a87bea1e8ae1d812","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/36//#testresult/a87bea1e8ae1d812","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745006157967,"stop":1745006157990,"duration":23}},{"uid":"13a02cee9c2b3dda","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/35//#testresult/13a02cee9c2b3dda","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745005970971,"stop":1745005970996,"duration":25}},{"uid":"a14015abb065cd61","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/34//#testresult/a14015abb065cd61","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745005662682,"stop":1745005662705,"duration":23}},{"uid":"744124189f7af609","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/33//#testresult/744124189f7af609","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1745005089418,"stop":1745005089446,"duration":28}},{"uid":"13eb1fa33631bc95","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/32//#testresult/13eb1fa33631bc95","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744923398612,"stop":1744923398638,"duration":26}},{"uid":"fab8c7eb962593f2","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/31//#testresult/fab8c7eb962593f2","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744850339716,"stop":1744850339741,"duration":25}},{"uid":"acb43004433b71b6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/30//#testresult/acb43004433b71b6","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744849899535,"stop":1744849899558,"duration":23}},{"uid":"a54b6ab08c7b6b6e","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/29//#testresult/a54b6ab08c7b6b6e","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744767141712,"stop":1744767141735,"duration":23}},{"uid":"9bc8811d01e63ea7","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/28//#testresult/9bc8811d01e63ea7","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744766715436,"stop":1744766715459,"duration":23}},{"uid":"f4658952d523ed81","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/27//#testresult/f4658952d523ed81","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744662840455,"stop":1744662840479,"duration":24}},{"uid":"7bad62ed9f6b5a67","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/26//#testresult/7bad62ed9f6b5a67","status":"failed","statusDetails":"AssertionError: Ожидался статус 400, но получен 403. Тело: {\"message\":\"No token provided.\"}\nassert 403 == 400\n +  where 403 = <APIResponse url='http://localhost:4040/APIEndpoints.AUTH' status=403 status_text='Forbidden'>.status","time":{"start":1744662222614,"stop":1744662222637,"duration":23}}]},"tags":["negative","auth"]},"source":"d98ee571cfb5319.json","parameterValues":["'Отсутствует поле login'","400","{'password': 'password4'}"]}