{"uid":"d8e6c68f80b14063","name":"Тест успешного получения данных пользователя","fullName":"tests.user.test_user_api.TestUserAPI#test_get_user_info_success","historyId":"ce00374a95389d718a8d728c79e283b3","time":{"start":1758231402348,"stop":1758231402382,"duration":34},"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","descriptionHtml":"<p>Проверяем получение данных профиля для аутентифицированного пользователя.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f069f97d590>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f069e4f29f0>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f069e4f29f0>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1758231400392,"stop":1758231400392,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1758231400393,"stop":1758231400393,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1758231400393,"stop":1758231400393,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1758231400393,"stop":1758231400393,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1758231400393,"stop":1758231401154,"duration":761},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1758231401154,"stop":1758231401187,"duration":33},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1758231401187,"stop":1758231401188,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_client","time":{"start":1758231401188,"stop":1758231401189,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"auth_token","time":{"start":1758231401909,"stop":1758231401982,"duration":73},"status":"passed","steps":[],"attachments":[{"uid":"7f6ff7d4b3fe29d3","name":"Status Code: 200","source":"7f6ff7d4b3fe29d3.txt","type":"text/plain","size":3},{"uid":"8c9108b67d17d255","name":"Request URL","source":"8c9108b67d17d255.uri","type":"text/uri-list","size":30},{"uid":"443ab659c18fa2ce","name":"Response Headers (JSON)","source":"443ab659c18fa2ce.json","type":"application/json","size":317},{"uid":"c2d9c07f48dc44ea","name":"Response Body (JSON)","source":"c2d9c07f48dc44ea.json","type":"application/json","size":224},{"uid":"e53b0fc58faa6420","name":"Status response code: 200 (Expected: 200)","source":"e53b0fc58faa6420.txt","type":"text/plain","size":3},{"uid":"36f7ca8262c14b4f","name":"Body of the answer (failed by AuthSuccessResponse)","source":"36f7ca8262c14b4f.json","type":"application/json","size":220}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":6,"hasContent":true,"attachmentStep":false},{"name":"authenticated_api_req_context","time":{"start":1758231402341,"stop":1758231402347,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_user_client","time":{"start":1758231402347,"stop":1758231402347,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"authenticated_http_client","time":{"start":1758231402347,"stop":1758231402347,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение данных профиля для аутентифицированного пользователя.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.user.test_user_api.TestUserAPI object at 0x7f069f97d590>\nauthenticated_user_client = <api.user.client.UserClient object at 0x7f069e4f29f0>\n\n    @allure.feature(\"Профиль пользователя (GET /api/user)\")\n    @allure.story(\"Получение профиля\")\n    @allure.title(\"Тест успешного получения данных пользователя\")\n    @allure.description(\"Проверяем получение данных профиля для аутентифицированного пользователя.\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    @pytest.mark.smoke\n    @pytest.mark.positive\n    def test_get_user_info_success(self, authenticated_user_client: UserClient) -> None:\n        \"\"\"\n        Проверка успешного получения информации o текущем пользователе.\n    \n        Ожидаемый результат: статус 200 и валидные данные пользователя.\n        \"\"\"\n        logger.info(\"Тест: Успешное получение данных пользователя (GET /api/user)\")\n>       response = authenticated_user_client.get_user_info(expected_status=200)  # type: ignore\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/user/test_user_api.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/user/client.py:101: in get_user_info\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.user.client.UserClient object at 0x7f069e4f29f0>\nresponse = <APIResponse url='http://localhost:4040/api/user' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.user.models.UserDataResponse'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение данных текущего пользователя","time":{"start":1758231402349,"stop":1758231402381,"duration":32},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/user/client.py\", line 101, in get_user_info\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=UserDataResponse if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"ebf4014d383f627","name":"Status Code: 500","source":"ebf4014d383f627.txt","type":"text/plain","size":3},{"uid":"484b79b56141471b","name":"Request URL","source":"484b79b56141471b.uri","type":"text/uri-list","size":30},{"uid":"cdc97c788d9ed885","name":"Response Headers (JSON)","source":"cdc97c788d9ed885.json","type":"application/json","size":309},{"uid":"b6a37f1578621e1d","name":"Response Body (Text)","source":"b6a37f1578621e1d.txt","type":"text/plain","size":20},{"uid":"4fb99a835d6dac74","name":"Status response code: 500 (Expected: 200)","source":"4fb99a835d6dac74.txt","type":"text/plain","size":3}],"parameters":[{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a27607ec196d47ad","name":"log","source":"a27607ec196d47ad.txt","type":"text/plain","size":5085},{"uid":"d392cc281eb9683f","name":"stderr","source":"d392cc281eb9683f.txt","type":"text/plain","size":6022}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"authenticated_api_req_context::0","time":{"start":1758231402407,"stop":1758231402413,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context::0","time":{"start":1758231402888,"stop":1758231402894,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1758231402895,"stop":1758231402903,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Управление пользователем"},{"name":"story","value":"Получение профиля"},{"name":"severity","value":"critical"},{"name":"feature","value":"Профиль пользователя (GET /api/user)"},{"name":"tag","value":"positive"},{"name":"tag","value":"smoke"},{"name":"tag","value":"user"},{"name":"parentSuite","value":"tests.user"},{"name":"suite","value":"test_user_api"},{"name":"subSuite","value":"TestUserAPI"},{"name":"host","value":"runnervmyfcvg"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.user.test_user_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"critical","retries":[{"uid":"4593854f3642c1af","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1758231402285,"stop":1758231402306,"duration":21}},{"uid":"81e7127c2c276230","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1758231402207,"stop":1758231402234,"duration":27}},{"uid":"19a859e8e407b3dd","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1758231402128,"stop":1758231402155,"duration":27}},{"uid":"708c9a51c95d63c7","status":"failed","statusDetails":"AssertionError: assert 'Главный операционный помощник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный операционный помощник","time":{"start":1758231402057,"stop":1758231402089,"duration":32}},{"uid":"d54d51441d43b177","status":"failed","statusDetails":"AssertionError: assert 'Главный операционный помощник' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный операционный помощник","time":{"start":1758231401990,"stop":1758231402019,"duration":29}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":8,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":8},"items":[{"uid":"86d94ad3c002a59c","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/125//#testresult/86d94ad3c002a59c","status":"failed","statusDetails":"AssertionError: assert 'Районный оптимизационный инженер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Районный оптимизационный инженер","time":{"start":1758230435922,"stop":1758230435940,"duration":18}},{"uid":"e980c6c42e242c85","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/124//#testresult/e980c6c42e242c85","status":"failed","statusDetails":"AssertionError: assert 'Национальный операционный архитектор' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Национальный операционный архитектор","time":{"start":1755538570594,"stop":1755538570611,"duration":17}},{"uid":"105823fd990a30af","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/123//#testresult/105823fd990a30af","status":"failed","statusDetails":"AssertionError: assert 'Главный коммуникационный менеджер' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Главный коммуникационный менеджер","time":{"start":1755511587590,"stop":1755511587646,"duration":56}},{"uid":"c57e1b7f10619945","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/122//#testresult/c57e1b7f10619945","status":"failed","statusDetails":"AssertionError: assert 'Генеральный оптимизационный планировщик' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Генеральный оптимизационный планировщик","time":{"start":1755511258031,"stop":1755511258056,"duration":25}},{"uid":"dcf4e6d79dc03bab","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/121//#testresult/dcf4e6d79dc03bab","status":"failed","statusDetails":"AssertionError: assert 'Региональный интеграционный руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Региональный интеграционный руководитель","time":{"start":1755508618062,"stop":1755508618082,"duration":20}},{"uid":"8464641104d1f350","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/120//#testresult/8464641104d1f350","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/user\nBody of the answer:\nPlanned Server Error","time":{"start":1755508196574,"stop":1755508196637,"duration":63}},{"uid":"837f3f2a3055d060","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/837f3f2a3055d060","status":"failed","statusDetails":"AssertionError: assert 'Центральный страховой руководитель' == 'Районный маркетинговый администратор'\n  \n  - Районный маркетинговый администратор\n  + Центральный страховой руководитель","time":{"start":1755507569422,"stop":1755507569441,"duration":19}}]},"tags":["smoke","positive","user"]},"source":"d8e6c68f80b14063.json","parameterValues":[]}