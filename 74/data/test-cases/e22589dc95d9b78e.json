{"uid":"e22589dc95d9b78e","name":"Тест успешного получения деталей существующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_success","historyId":"848c3990855d944f629b42a62406a4ac","time":{"start":1745297840743,"stop":1745297840813,"duration":70},"description":"Проверяем получение деталей запроса по существующему ID и валидируем поля.","descriptionHtml":"<p>Проверяем получение деталей запроса по существующему ID и валидируем поля.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fa37365cb90>\nrequest_client = <api.request.client.RequestClient object at 0x7fa37354dd30>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест успешного получения деталей существующего запроса\")\n    @allure.description(\n        \"Проверяем получение деталей запроса по существующему ID и валидируем поля.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_get_request_details_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения деталей существующего запроса.\n    \n        Ожидаемый результат: статус 200 и объект HelpRequestData c корректными полями.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное получение деталей запроса (GET /api/request/%s)\", EXISTING_REQUEST_ID\n        )\n>       response = request_client.get_request_details(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fa37354dd30>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.request.models.HelpRequestData'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745297838396,"stop":1745297838397,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1745297838397,"stop":1745297838397,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1745297838397,"stop":1745297838397,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1745297838398,"stop":1745297838398,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1745297838398,"stop":1745297838851,"duration":453},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1745297838851,"stop":1745297838878,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1745297838878,"stop":1745297838879,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1745297840232,"stop":1745297840233,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение деталей запроса по существующему ID и валидируем поля.","status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7fa37365cb90>\nrequest_client = <api.request.client.RequestClient object at 0x7fa37354dd30>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест успешного получения деталей существующего запроса\")\n    @allure.description(\n        \"Проверяем получение деталей запроса по существующему ID и валидируем поля.\"\n    )\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.positive\n    def test_get_request_details_success(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка успешного получения деталей существующего запроса.\n    \n        Ожидаемый результат: статус 200 и объект HelpRequestData c корректными полями.\n        \"\"\"\n        logger.info(\n            \"Тест: Успешное получение деталей запроса (GET /api/request/%s)\", EXISTING_REQUEST_ID\n        )\n>       response = request_client.get_request_details(\n            request_id=EXISTING_REQUEST_ID, expected_status=200\n        )  # type: ignore\n\ntests/request/test_request_api.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7fa37354dd30>\nresponse = <APIResponse url='http://localhost:4040/api/request/request-id-1' status=500 status_text='Internal Server Error'>\nexpected_status = 200\nresponse_model = <class 'api.request.models.HelpRequestData'>\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nE       Body of the answer:\nE       Planned Server Error\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='request-id-1'","time":{"start":1745297840744,"stop":1745297840812,"duration":68},"status":"failed","statusMessage":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"30f4e230a8c31c2c","name":"Status Code: 500","source":"30f4e230a8c31c2c.txt","type":"text/plain","size":3},{"uid":"13f8a5f4ffe48ecc","name":"Request URL","source":"13f8a5f4ffe48ecc.uri","type":"text/uri-list","size":46},{"uid":"86ccfb48ace553a7","name":"Response Headers (JSON)","source":"86ccfb48ace553a7.json","type":"application/json","size":309},{"uid":"945e9c37f54c5e89","name":"Response Body (Text)","source":"945e9c37f54c5e89.txt","type":"text/plain","size":20},{"uid":"8d3c6066f87833ff","name":"Status response code: 500 (Expected: 200)","source":"8d3c6066f87833ff.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'request-id-1'"},{"name":"expected_status","value":"200"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"a0e40d11c5144d02","name":"log","source":"a0e40d11c5144d02.txt","type":"text/plain","size":3380},{"uid":"7d9f5030471173c8","name":"stderr","source":"7d9f5030471173c8.txt","type":"text/plain","size":3978}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1745297842563,"stop":1745297842571,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1745297842572,"stop":1745297842579,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"epic","value":"Запросы помощи"},{"name":"story","value":"Получение деталей"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"severity","value":"normal"},{"name":"tag","value":"positive"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"fv-az659-85"},{"name":"thread","value":"3-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"72cc74654ab0b337","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","time":{"start":1745297840638,"stop":1745297840706,"duration":68}},{"uid":"9f0f84380b36e56e","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297840548,"stop":1745297840602,"duration":54}},{"uid":"248e858ef152c565","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297840454,"stop":1745297840512,"duration":58}},{"uid":"62b90deea21413cf","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 500. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\nPlanned Server Error","time":{"start":1745297840348,"stop":1745297840417,"duration":69}},{"uid":"5fc0e5692c0f071d","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297840237,"stop":1745297840307,"duration":70}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":4},"items":[{"uid":"5436b02649d099bb","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/73//#testresult/5436b02649d099bb","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297610577,"stop":1745297610629,"duration":52}},{"uid":"fbda18f463cfbb6","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/72//#testresult/fbda18f463cfbb6","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297411296,"stop":1745297411349,"duration":53}},{"uid":"a37742d7eaa9e228","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/71//#testresult/a37742d7eaa9e228","status":"failed","statusDetails":"AssertionError: The status was pending 200, but received 403. URL: http://localhost:4040/api/request/request-id-1\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1745297305100,"stop":1745297305154,"duration":54}}]},"tags":["request","positive"]},"source":"e22589dc95d9b78e.json","parameterValues":[]}