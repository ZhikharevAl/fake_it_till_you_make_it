{"uid":"62de37348ea30867","name":"Тест получения деталей несуществующего запроса","fullName":"tests.request.test_request_api.TestRequestAPI#test_get_request_details_not_found","historyId":"26961aa1f740e62b43d9b1c13642c2bc","time":{"start":1755508196411,"stop":1755508196428,"duration":17},"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","descriptionHtml":"<p>Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.</p>\n","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f3fd6701220>\nrequest_client = <api.request.client.RequestClient object at 0x7f3fdc13f230>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f3fdc13f230>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1755508194631,"stop":1755508194631,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1755508194631,"stop":1755508194632,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance","time":{"start":1755508194632,"stop":1755508195127,"duration":495},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1755508194632,"stop":1755508194632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1755508194632,"stop":1755508194632,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1755508195127,"stop":1755508195152,"duration":25},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"http_client","time":{"start":1755508195153,"stop":1755508195153,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"request_client","time":{"start":1755508195828,"stop":1755508195829,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.","status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","statusTrace":"self = <tests.request.test_request_api.TestRequestAPI object at 0x7f3fd6701220>\nrequest_client = <api.request.client.RequestClient object at 0x7f3fdc13f230>\n\n    @allure.feature(\"Детали запроса (GET /api/request/{id})\")\n    @allure.story(\"Получение деталей\")\n    @allure.title(\"Тест получения деталей несуществующего запроса\")\n    @allure.description(\"Проверяем получение ошибки 404 при запросе деталей по несуществующему ID.\")\n    @allure.severity(allure.severity_level.NORMAL)\n    @pytest.mark.negative\n    def test_get_request_details_not_found(self, request_client: RequestClient) -> None:\n        \"\"\"\n        Проверка получения деталей несуществующего запроса.\n    \n        Ожидаемый результат: статус 404 Not Found.\n        \"\"\"\n        logger.info(\n            \"Тест: Получение деталей несуществующего запроса (GET /api/request/%s)\",\n            NON_EXISTENT_REQUEST_ID,\n        )\n>       response = request_client.get_request_details(\n            request_id=NON_EXISTENT_REQUEST_ID, expected_status=404\n        )  # type: ignore\n\ntests/request/test_request_api.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/request/client.py:65: in get_request_details\n    return self._handle_response(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <api.request.client.RequestClient object at 0x7f3fdc13f230>\nresponse = <APIResponse url='http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8' status=403 status_text='Forbidden'>\nexpected_status = 404, response_model = None\n\n    def _handle_response(\n        self,\n        response: APIResponse,\n        expected_status: int,\n        response_model: type[T] | None = None,\n    ) -> T | APIResponse:\n        \"\"\"\n        A generic method to handle the API response.\n    \n        Checks the status code and, if a model is specified, validates the response body against it.\n    \n        Args:\n            response: APIResponse object received from HTTPClient.\n            expected_status: Expected HTTP status code.\n            response_model: Optional Pydantic model class for validating the response body.\n    \n        Returns:\n            An instance of response_model if the validation was successful.\n            Raw APIResponse object if response_model is not specified or validation is not required.\n    \n        Raises:\n            AssertionError: If the actual status of the code does not match the expected_status,\n                           or if it failed to parse JSON,\n                           or if the Pydantic model validation failed.\n        \"\"\"\n        self.logger.debug(\n            \"Handling response: Status=%s, Expected=%s, URL=%s\",\n            response.status,\n            expected_status,\n            response.url,\n        )\n    \n        allure.attach(\n            name=f\"Status response code: {response.status} (Expected: {expected_status})\",\n            body=str(response.status),\n            attachment_type=allure.attachment_type.TEXT,\n        )\n    \n>       assert response.status == expected_status, (\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n            f\"The status was pending {expected_status}, but received {response.status}. \"\n            f\"URL: {response.url}\\nBody of the answer:\\n{response.text()}\"\n        )\nE       AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nE       Body of the answer:\nE       {\"message\":\"No token provided.\"}\n\napi/base_api.py:69: AssertionError","steps":[{"name":"Получение деталей запроса помощи: id='non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8'","time":{"start":1755508196411,"stop":1755508196427,"duration":16},"status":"failed","statusMessage":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}\n","statusTrace":"  File \"/app/.venv/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/app/api/request/client.py\", line 65, in get_request_details\n    return self._handle_response(\n           ~~~~~~~~~~~~~~~~~~~~~^\n        response,\n        ^^^^^^^^^\n        expected_status,\n        ^^^^^^^^^^^^^^^^\n        response_model=HelpRequestData if expected_status == 200 else None,\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/app/api/base_api.py\", line 69, in _handle_response\n    assert response.status == expected_status, (\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[{"uid":"f1ec2bcd5baddb35","name":"Status Code: 403","source":"f1ec2bcd5baddb35.txt","type":"text/plain","size":3},{"uid":"795696ee49626111","name":"Request URL","source":"795696ee49626111.uri","type":"text/uri-list","size":83},{"uid":"ef45b1bb7cc14ff7","name":"Response Headers (JSON)","source":"ef45b1bb7cc14ff7.json","type":"application/json","size":316},{"uid":"38c967c66887060f","name":"Response Body (JSON)","source":"38c967c66887060f.json","type":"application/json","size":39},{"uid":"ab5900a98d724d6d","name":"Status response code: 403 (Expected: 404)","source":"ab5900a98d724d6d.txt","type":"text/plain","size":3}],"parameters":[{"name":"request_id","value":"'non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8'"},{"name":"expected_status","value":"404"}],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":5,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"adc4596cf0ae36a7","name":"log","source":"adc4596cf0ae36a7.txt","type":"text/plain","size":3869},{"uid":"8db03378d9950d29","name":"stderr","source":"8db03378d9950d29.txt","type":"text/plain","size":4374}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":7,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1755508196814,"stop":1755508196820,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright_instance::0","time":{"start":1755508196821,"stop":1755508196830,"duration":9},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Получение деталей"},{"name":"severity","value":"normal"},{"name":"epic","value":"Запросы помощи"},{"name":"feature","value":"Детали запроса (GET /api/request/{id})"},{"name":"tag","value":"negative"},{"name":"tag","value":"request"},{"name":"parentSuite","value":"tests.request"},{"name":"suite","value":"test_request_api"},{"name":"subSuite","value":"TestRequestAPI"},{"name":"host","value":"pkrvmdgpy2b27sr"},{"name":"thread","value":"12-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.request.test_request_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"ee8bbcfaf8cb9f70","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755508196367,"stop":1755508196390,"duration":23}},{"uid":"c9cf84f85adb9a24","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755508196316,"stop":1755508196337,"duration":21}},{"uid":"3bf440bbec3728b9","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755508196238,"stop":1755508196287,"duration":49}},{"uid":"7a36557d77c74a8f","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755508196187,"stop":1755508196206,"duration":19}},{"uid":"a1c7fde7a3fb2891","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 403. URL: http://localhost:4040/api/request/non-existent-bed9aef2-8690-4ad7-9926-257e1a03dcf8\nBody of the answer:\n{\"message\":\"No token provided.\"}","time":{"start":1755508196152,"stop":1755508196165,"duration":13}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":2},"items":[{"uid":"b178380c52848465","reportUrl":"https://ZhikharevAl.github.io/fake_it_till_you_make_it/119//#testresult/b178380c52848465","status":"failed","statusDetails":"AssertionError: The status was pending 404, but received 500. URL: http://localhost:4040/api/request/non-existent-b5f4d8b1-fc88-4ada-8489-773b893a2766\nBody of the answer:\nPlanned Server Error","time":{"start":1755507569262,"stop":1755507569287,"duration":25}}]},"tags":["request","negative"]},"source":"62de37348ea30867.json","parameterValues":[]}